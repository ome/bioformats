Generating test images
======================

Sometimes it is nice to have a file of a specific size or pixel type for
testing. To generate an image file (that contains a gradient image):

::

    touch "my-special-test-file&pixelType=uint8&sizeX=8192&sizeY=8192.fake"

Whatever is before the first ``&`` is the image name; the remaining key-value
pairs, each preceded with ``&``, set the pixel type and image dimensions. Just
replace the values with whatever you need for testing.

Additionally, you can put such values in a separate :file:`.ini` file:

::

    touch my-special-test-file.fake
    echo "pixelType=uint8" >> my-special-test-file.fake.ini
    echo "sizeX=8192" >> my-special-test-file.fake.ini
    echo "sizeY=8192" >> my-special-test-file.fake.ini

In fact, just the :file:`.fake.ini` file alone suffices:

::

    echo "pixelType=uint8" >> my-special-test-file.fake.ini
    echo "sizeX=8192" >> my-special-test-file.fake.ini
    echo "sizeY=8192" >> my-special-test-file.fake.ini

If you include a "[GlobalMetadata]" section to the ini file,
then all the included values will be accessible from the
global metadata map:

::

    echo "[GlobalMetadata]" >> my-special-test-file.fake.ini
    echo "my.key=some.value" >> my-special-test-file.fake.ini

To generate a simple plate file:

::

    touch "plate-test-file&plates=1&plateAcqs=1&plateRows=1&plateCols=1&fields=1.fake"

This will create a single plate which is, by default, within a containing
screen. To create a plate with no containing screen add ``&screens=0`` to the
key-value pairs in the file name. As above a :file:`.fake.ini` file can be
used.

To generate a valid plate the values of ``plates``, ``plateAcqs``,
``plateRows``, ``plateCols`` and ``fields`` must **all** be greater than zero.
If this condition is not met then an image will be generated instead of a
plate.

There are several other keys that can be added, a complete list of these,
with their default values, is shown below.

.. tabularcolumns:: |p{3cm}|p{11cm}|p{2cm}|

.. list-table::
    :header-rows: 1
    :widths: 30, 60, 10

    - * Key
      * Value
      * Default
    - * sizeX
      * number of pixels wide
      * 512
    - * sizeY
      * number of pixels tall
      * 512
    - * sizeZ
      * number of Z sections
      * 1
    - * sizeC
      * number of channels
      * 1
    - * sizeT
      * number of timepoints
      * 1
    - * thumbSizeX
      * number of pixels wide, for the thumbnail
      * 0
    - * thumbSizeY
      * number of pixels tall, for the thumbnail
      * 0
    - * pixelType
      * pixel type
      * uint8
    - * bitsPerPixel
      * number of valid bits (<= number of bits implied by pixel type)
      * 0
    - * rgb
      * number of channels that are merged together
      * 1
    - * dimOrder
      * dimension order (e.g. XYZCT)
      * XYZCT
    - * orderCertain
      *
      * true
    - * little
      * whether or not the pixel data should be little-endian
      * true
    - * interleaved
      * whether or not merged channels are interleaved
      * false
    - * indexed
      * whether or not a color lookup table is present
      * false
    - * falseColor
      * whether or not the color lookup table is just for making the image look pretty
      * false
    - * metadataComplete
      *
      * true
    - * thumbnail
      *
      * false
    - * series
      * number of series (Images)
      * 1
    - * lutLength
      * number of entries in the color lookup table
      * 3
    - * scaleFactor
      *
      * 1
    - * exposureTime
      * time of exposure, supports units defaulting to seconds
      * null
    - * acquisitionDate
      * timestamp formatted as "yyyy-MM-dd_HH-mm-ss"
      * null
    - * screens
      * number of screens
      * 1
    - * plates
      * number of plates to generate
      * 0
    - * plateAcqs
      * number of plate runs
      * 0
    - * plateRows
      * number of rows per plate
      * 0
    - * plateCols
      * number of rows per plate
      * 0
    - * fields
      * number of fields per well
      * 0
    - * annLong, annDouble, annMap, annComment, annBool, annTime, annTag, annTerm, annXml
      * number of annotations of the given type to generate
      * 0
    - * physicalSizeX
      * real width of the pixels, supports units defaulting to microns
      *
    - * physicalSizeY
      * real height of the pixels, supports units defaulting to microns
      *
    - * physicalSizeZ
      * real depth of the pixels, supports units defaulting to microns
      *
    - * color
      *
      * null
    - * color_*
      *
      *

For full details of these keys, how unset and default values are handled and
further examples see :source:`loci.formats.in.FakeReader <components/formats-bsd/src/loci/formats/in/FakeReader.java>`.

You can often work with the .fake file directly, but in some cases
support for those files is disabled and so you will need to convert the
file to something else. Make sure that you have Bio-Formats built and
the JARs in your :envvar:`CLASSPATH` (individual JARs or just
:file:`bioformats_package.jar`):

::

    bfconvert test&pixelType=uint8&sizeX=8192&sizeY=8192.fake test.tiff

If you do not have the command line tools installed, substitute
:source:`loci.formats.tools.ImageConverter <components/bio-formats-tools/src/loci/formats/tools/ImageConverter.java>`
for :program:`bfconvert`.
