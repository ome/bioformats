C++ implementation
==================

A completely native C++ interface is currently in development.  Unlike
the BF-CPP bindings, this does not wrap the Java implementation.  This
is a work in progress and not yet fully functional.


Prerequisites
-------------

In order to build the C++ library, a number of packages are required
to be installed:

+------------+-----------+------------------+----------------+----------+
| Dependency | Version   | Debian/Ubuntu    | RedHat/CentOS  | Homebrew |
+============+===========+==================+================+==========+
| CMake      | >= 2.8    | cmake            | cmake          | cmake    |
+------------+-----------+------------------+----------------+----------+
| Boost      | >= 1.42¹  | libboost-all-dev | boost-devel    | boost    |
+------------+-----------+------------------+----------------+----------+
| PNG        | >= 1.2    | libpng12-dev     | libpng-devel   | libpng   |
+------------+-----------+------------------+----------------+----------+
| TIFF       | >= 4.0²   | libtiff5-dev     | libtiff4-devel | libtiff  |
+------------+-----------+------------------+----------------+----------+
| Xerces-C   | 3.x       | libxerces-c-dev  | xerces-c-devel | xerces-c |
+------------+-----------+------------------+----------------+----------+
| GTest†     | >= 1.5    | libgtest-dev     | gtest-devel    | N/A³     |
+------------+-----------+------------------+----------------+----------+
| Doxygen‡   | >= 1.6    | doxygen          | doxygen        | doxygen  |
+------------+-----------+------------------+----------------+----------+
| Graphviz‡  | >= 1.8.10 | graphviz         | graphviz       | graphviz |
+------------+-----------+------------------+----------------+----------+

1. 1.41 is known to not work nicely with :program:`cmake`; 1.5x or later recommended
2. 4.0.2 and earlier do not have TIFFField accessor functions; 4.0.3 or later recommended
3. `gtest not available in homebrew <http://answers.ros.org/question/42335/mac-os-x-install-error-no-available-formula-for-gtest/>`_

†
  Optional, needed to run the unit tests
‡
  Optional, needed to build the API reference

The C++ bindings use C++11 features such as
:cpp:type:`std::shared_ptr` when using a C++11 compiler.  When using
an older compiler, the Boost equivalents will be used as fallbacks to
provide the same functionality.  :program:`cmake` will automatically
detect and use C++11 features when available.


Unit tests
----------

The Google test (:program:`gtest`) framework is used for unit testing.
Unfortunately, it's packaged in different ways on different systems
and for different versions.

RedHat and CentOS
^^^^^^^^^^^^^^^^^

Install the :file:`gtest` package.  Future versions might require an
extra build step as for the Debian version, below, but currently the
library is prebuilt and installed ready for use.

Debian and Ubuntu
^^^^^^^^^^^^^^^^^

Install the :file:`gtest` package.  After installation, a copy of the
library needs to be built, for example::

  % mkdir gtest
  % cd gtest
  % cmake /usr/src/gtest
  % make

While this could be done once, ideally this should be done immediately
prior to each build to ensure that :program:`gtest` is built with the
same compiler and compiler options as the bioformats build.  In
practice, this isn't necessary.  See :file:`tools/test-build` for how
this is handled for the GitHub/Travis builds, which is done on Ubuntu
systems.

MacOS X Homebrew
^^^^^^^^^^^^^^^^

Obtain the `source
<https://code.google.com/p/googletest/downloads/detail?name=gtest-1.7.0.zip&can=2&q=>`_.
The easiest thing to do is to download and build :program:`gtest`,
then install it into :file:`/opt/gtest` (both the includes directory
and the static libraries).  It doesn't provide an "install" target;
you'll have to use the build directory directly or copy manually::

  % cmake .
  % make
  % mkdir /opt/gtest
  % cp -r includes *.a /opt/gtest
  % ls /opt/gtest
  include         libgtest.a      libgtest_main.a


Configuring
-----------

Create a temporary build directory.  The temporary build directory may
be in any location inside or outside the bioformats source tree.
However, you may not use the source directory as the build directory.
(This fills the source tree full of autogenerated files.)

If running the unit tests is required, make sure that
:envvar:`GTEST_ROOT` is set in the environment, and that this points
to the location where you installed the :program:`gtest` library.  If
the library is located on the default library search path, this is not
necessary.

Run :program:`cmake` from the temporary build directory::

  % mkdir build
  % cd build
  % GTEST_ROOT=/path/to/gtest cmake /path/to/bioformats

Run ``cmake -LH`` to see the configurable project options.  The
following basic options are supported:

cxxstd-autodetect=(ON|OFF)
  Enable (default) or disable C++ compiler standard autodetection.  If
  enabled, the compiler will be put into C++11 mode if available,
  otherwise falling back to C++03 or C++98.  If disabled, it is the
  responsibility of the user to add the appropriate compiler options
  to build using the required standard.  This is useful if
  autodetection fails or a compiler is buggy in certain modes (e.g. GCC
  4.4 or 4.6 require ``-std=gnu++98`` or else ``stdarg`` support is
  broken).
doxygen=(ON|OFF)
  Enable doxygen documentation.  These will be enabled by default if
  doxygen is found.
embedded-gtest=(ON|OFF)
  Enable the use of an embedded copy of the Google Test (gtest)
  library.  This is off by default but will be enabled automatically
  if a system copy is not found.  This may be enabled explicitly to
  override the autodetection.
extended-tests=(ON|OFF)
  Some of the unit tests are comprehensive and run many thousands of
  tests.  These are enabled by default, but by setting to OFF a
  representative subset of the tests will be run instead to save time.
extra-warnings=(ON|OFF)
  Enable or disable additional compiler warnings in addition to the
  default set.  These are disabled by default since they trigger a large
  number of false positives, particularly in third-party libraries
  outside our control.
test=(ON|OFF)
  Enable unit tests.  Tests are enabled by default.

For example, to disable tests, run ``cmake -Dtest=OFF``.  Options will
typically be enabled by default if the prerequisites are available.

The installation prefix may be set at this point using
`-DCMAKE_INSTALL_PREFIX=prefix`.  The build system and compiler to use
may also be specified.  Please see the :program:`cmake` documentation
for further details of all configurable options, and run ``cmake
--help`` to list the available generators for your platform.

Linux and MacOS X
^^^^^^^^^^^^^^^^^

The default generator is ``Unix Makefiles``, and the standard
:envvar:`CXX`, :envvar:`CXXFLAGS` and :envvar:`LDFLAGS` environment
variables may be set to explicitly specify the compiler, compiler
flags and linker flags, respectively.  These may be useful for adding
additional ``-I`` and ``-L`` include and library search paths, for
example.

If you wish to use an IDE such as Eclipse or KDevelop, an alternative
generator may be used.

Windows
^^^^^^^

On Windows, the generator will require specifying by hand, and this
will configure the version of Visual Studio (or other compiler) to
use.  For example, ``-G "Visual Studio 11 Win64"`` will configure for
generating Visual Studio 2012 64-bit build files for use with the
Visual C++ compiler.


Building
--------

For all platforms and generators, it should usually be possible to
build using::

  % cmake --build

which will invoke the platform- and generator-specific build as
appropriate.

Linux and MacOS X
^^^^^^^^^^^^^^^^^

If using ``Unix Makefiles``, simply run::

  % make

with any additional options required, for example ``-j`` to enable
parallel building.

If using an IDE, open the generated project file and proceed using the
IDE to build the project.

Windows
^^^^^^^

If using Visual Studio, the generated project files may be opened
using the IDE and then built within the IDE.  Alternatively, the
project files may be built directly using the :program:`msbuild`
command-line tool inside a Visual Studio command prompt (or an
appropriately configured command prompt which has run
:program:`VCVARSALL.BAT` or equivalent to configure the environment).


Installation
------------

Linux and MacOS X
^^^^^^^^^^^^^^^^^

To install the headers and libraries directly on the system into the
configured prefix::

  % make install

Alternatively, to install into a staging directory::

  % make DESTDIR=/path/to/staging/directory install

Windows
^^^^^^^

When using Visual Studio, there should be an :file:`INSTALL.vcxproj`
project which may be run using :program:`msbuild`, for example::

  > msbuild INSTALL.vcxproj /p:platform=x64


Testing
-------

For all platforms and generators, it should usually be possible to run
all tests using :program:`ctest`.  Run::

  % ctest

or to run verbosely::

  % ctest -V

Additional flags allow specification of the build configuration to
use, logging, parallel building and other options.  Please see the
:program:`ctest` documentation for further details.

Individual test programs may be run by hand if required.

Linux and MacOS X
^^^^^^^^^^^^^^^^^

To run all tests, run::

  % make test

or verbosely::

  % make test ARGS=-V

Windows
^^^^^^^
To run all tests, run::

  > msbuild RUN_TESTS.vcproj
