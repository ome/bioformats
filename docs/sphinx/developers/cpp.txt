C++ implementation
==================

A completely native Bio-Formats C++ interface is now available.
Unlike the BF-CPP bindings, this does not wrap the Java
implementation.  With this release, TIFF reading and writing are
available.  OME-TIFF reading and writing will be available soon.  All
other readers and writers from the Java implementation are currently
unavailable; the intention is that support for these will be added
over time.

.. note::

  The C++ implementation is functional in Bio-Formats version 5.1.
  However, API stability will not be guaranteed until version 5.2
  since it may be necessary to refactor certain parts of the API for
  optimal usability, robustness and performance.  Applications built
  against version 5.1 of the API may require updating to work with
  version 5.2, if they make use of any part of the API which is
  changed incompatibly.


Prerequisites
-------------

In order to build the C++ library and its documentation, a number of
packages are required to be installed.  Note that the minimum version
is the minimum version we regularly test with; older versions may work
but are not supported.

+----------------+--------------+--------------+
|                |           Version           |
+----------------+--------------+--------------+
| Package        | Recommended  | Minimum      |
+================+==============+==============+
| Boost          | 1.54         | 1.48         |
+----------------+--------------+--------------+
| CMake          | 3.0          | 2.8          |
+----------------+--------------+--------------+
| HDF5*          | 1.8.x        | 1.8.x        |
+----------------+--------------+--------------+
| PNG            | 1.2          | 1.2          |
+----------------+--------------+--------------+
| Python         | 2.7          | 2.6          |
+----------------+--------------+--------------+
| Python Genshi  | 0.7          | 0.6          |
+----------------+--------------+--------------+
| TIFF           | 4.0.3        | 3.9.5        |
+----------------+--------------+--------------+
| Xerces-C       | 3.0          | 3.0          |
+----------------+--------------+--------------+
| Git*           | 2.1.x        | 1.7.x        |
+----------------+--------------+--------------+
| GTest*         | 1.7          | 1.5          |
+----------------+--------------+--------------+
| Doxygen†       | 1.8          | 1.6          |
+----------------+--------------+--------------+
| Graphviz†      | 2.x          | 1.8.10       |
+----------------+--------------+--------------+
| Apache Ant‡    | 1.9.x        | 1.8.x        |
+----------------+--------------+--------------+
| Java‡          | 1.7.x        | 1.6.x        |
+----------------+--------------+--------------+
| Python Sphinx‡ | 1.2.x        | 1.1.x        |
+----------------+--------------+--------------+
| TeX (XeLaTeX)‡ | TeXLive 2014 | TeXLive 2012 |
+----------------+--------------+--------------+

\*
  Optional
†
  Optional, needed to build the API reference
‡
  Optional, needed to build the Sphinx manual

Due to lacking a package manager, if building on Windows most of the
above packages will require downloading and installing by hand.  Links
for these are provided below.

Basic toolchain
^^^^^^^^^^^^^^^

A functional compiler, assembler and linker are required to build C++
code.

If possible, install the following packages:

+------------------+-----------------+
| System           | Package         |
+==================+=================+
| BSD Ports        | N/A*            |
+------------------+-----------------+
| Debian/Ubuntu    | build-essential |
+------------------+-----------------+
| Homebrew         | N/A†            |
+------------------+-----------------+
| RedHat/CentOS    | N/A‡            |
+------------------+-----------------+
| Windows          | N/A§            |
+------------------+-----------------+

\*
  Available by default
†
  Install :program:`Xcode`
‡
  Run ``yum groupinstall "Development Tools"``
§
  Install Visual Studio or `Visual Studio Express <http://www.visualstudio.com/downloads/download-visual-studio-vs#d-express-windows-desktop>`__

Boost
^^^^^

If possible, install one of the following packages:

+------------------+------------------+
| System           | Package          |
+==================+==================+
| BSD Ports        | devel/boost-all  |
+------------------+------------------+
| Debian/Ubuntu    | libboost-all-dev |
+------------------+------------------+
| Homebrew         | boost            |
+------------------+------------------+
| RedHat/CentOS    | boost-devel      |
+------------------+------------------+

1.41 is known to not work nicely with :program:`cmake`; 1.48 or later
needed for Boost.Geometry; 1.54 or later needed for Boost.Geometry
spatial indexes.

CMake
^^^^^

If possible, install the following packages:

+------------------+-------------+
| System           | Package     |
+==================+=============+
| BSD Ports        | devel/cmake |
+------------------+-------------+
| Debian/Ubuntu    | cmake       |
+------------------+-------------+
| Homebrew         | cmake       |
+------------------+-------------+
| RedHat/CentOS    | cmake       |
+------------------+-------------+

- `Website <http://cmake.org/>`__
- `Download <http://cmake.org/cmake/resources/software.html>`__

HDF5
^^^^

If possible, install the following packages:

+------------------+---------------+
| System           | Package       |
+==================+===============+
| BSD Ports        | science/hdf5  |
+------------------+---------------+
| Debian/Ubuntu    | libhdf5-dev   |
+------------------+---------------+
| Homebrew         | hdf5          |
+------------------+---------------+
| RedHat/CentOS    | libhdf5-devel |
+------------------+---------------+

PNG
^^^

If possible, install the following packages:

+------------------+--------------+
| System           | Package      |
+==================+==============+
| BSD Ports        | graphics/png |
+------------------+--------------+
| Debian/Ubuntu    | libpng12-dev |
+------------------+--------------+
| Homebrew         | libpng       |
+------------------+--------------+
| RedHat/CentOS    | libpng-devel |
+------------------+--------------+

Python
^^^^^^

If possible, install the following packages:

+------------------+-------------+
| System           | Package     |
+==================+=============+
| BSD Ports        | lang/python |
+------------------+-------------+
| Debian/Ubuntu    | python      |
+------------------+-------------+
| Homebrew         | python      |
+------------------+-------------+
| RedHat/CentOS    | python      |
+------------------+-------------+

- `Website <https://www.python.org/>`__
- `Download <https://www.python.org/download/releases/2.7.8/>`__
- `Extra packages for Windows <http://www.lfd.uci.edu/~gohlke/pythonlibs/>`__

For Python on Windows, either download separate installers for each
package, or install ``setuptools`` and ``pip`` for Python, then ``pip
install`` needed packages; ensure downloaded packages are 64-bit if
using 64-bit Python.


Python Genshi
^^^^^^^^^^^^^

If possible, install the following packages:

+------------------+--------------------+
| System           | Package            |
+==================+====================+
| BSD Ports        | textproc/py-genshi |
+------------------+--------------------+
| Debian/Ubuntu    | python-genshi      |
+------------------+--------------------+
| Homebrew         | N/A                |
+------------------+--------------------+
| RedHat/CentOS    | python-genshi      |
+------------------+--------------------+

Use ``pip install genshi`` if a packaged version is not available.

TIFF
^^^^

If possible, install the following packages:

+------------------+----------------+
| System           | Package        |
+==================+================+
| BSD Ports        | graphics/tiff  |
+------------------+----------------+
| Debian/Ubuntu    | libtiff5-dev*  |
+------------------+----------------+
| Homebrew         | libtiff        |
+------------------+----------------+
| RedHat/CentOS    | libtiff-devel  |
+------------------+----------------+

\*
  libtiff4-dev with older releases

4.0.2 and earlier do not have TIFFField accessor functions.

Xerces-C
^^^^^^^^

If possible, install the following packages:

+------------------+--------------------+
| System           | Package            |
+==================+====================+
| BSD Ports        | textproc/xerces-c3 |
+------------------+--------------------+
| Debian/Ubuntu    | libxerces-c-dev    |
+------------------+--------------------+
| Homebrew         | xerces-c           |
+------------------+--------------------+
| RedHat/CentOS    | xerces-c-devel     |
+------------------+--------------------+

Git
^^^

If possible, install the following packages:

+------------------+--------------+
| System           | Package      |
+==================+==============+
| BSD Ports        | devel/git    |
+------------------+--------------+
| Debian/Ubuntu    | git          |
+------------------+--------------+
| Homebrew         | git          |
+------------------+--------------+
| RedHat/CentOS    | git          |
+------------------+--------------+

- `Website <http://www.git-scm.com/>`__
- `Download <http://www.git-scm.com/downloads>`__

Google Test (gtest)
^^^^^^^^^^^^^^^^^^^

If possible, install the following packages:

+------------------+------------------+
| System           | Package          |
+==================+==================+
| BSD Ports        | devel/googletest |
+------------------+------------------+
| Debian/Ubuntu    | libgtest-dev     |
+------------------+------------------+
| Homebrew         | N/A*             |
+------------------+------------------+
| RedHat/CentOS    | gtest-devel      |
+------------------+------------------+

\*
  `gtest is not available in homebrew <http://answers.ros.org/question/42335/mac-os-x-install-error-no-available-formula-for-gtest/>`__

An embedded copy of GTest is provided; it is only necessary to use a
system-provided or self-built copy of GTest if the embedded copy is
not functional on a specific system.

If using an external GTest, make sure that :envvar:`GTEST_ROOT` is set
in the environment, or that ``-DGTEST_ROOT=/path/to/gtest`` is passed
to :program:`cmake` and that this points to the location where you
installed the :program:`gtest` library.  If the library is located on
the default library search path, this is not necessary.

- `Website <https://code.google.com/p/googletest/>`__
- `Zip download <https://code.google.com/p/googletest/downloads/detail?name=gtest-1.7.0.zip>`__
- `SVN tag <http://googletest.googlecode.com/svn/tags/release-1.7.0>`__

Doxygen
^^^^^^^

If possible, install the following packages:

+------------------+---------------+
| System           | Package       |
+==================+===============+
| BSD Ports        | devel/doxygen |
+------------------+---------------+
| Debian/Ubuntu    | doxygen       |
+------------------+---------------+
| Homebrew         | doxygen       |
+------------------+---------------+
| RedHat/CentOS    | doxygen       |
+------------------+---------------+

- `Website <http://www.stack.nl/~dimitri/doxygen/>`__
- `Download <http://www.stack.nl/~dimitri/doxygen/download.html>`__


Graphviz
^^^^^^^^

If possible, install the following packages:

+------------------+-------------------+
| System           | Package           |
+==================+===================+
| BSD Ports        | graphics/graphviz |
+------------------+-------------------+
| Debian/Ubuntu    | graphviz          |
+------------------+-------------------+
| Homebrew         | graphviz          |
+------------------+-------------------+
| RedHat/CentOS    | graphviz          |
+------------------+-------------------+

- `Website <http://graphviz.org/>`__
- `Download (for Windows) <http://graphviz.org/Download_windows.php>`__

Apache Ant
^^^^^^^^^^

If possible, install one of the following packages:

+------------------+------------------------------+
| System           | Package                      |
+==================+==============================+
| BSD Ports        | devel/apache-ant             |
+------------------+------------------------------+
| Debian/Ubuntu    | ant ant-contrib ant-optional |
+------------------+------------------------------+
| Homebrew         | ant                          |
+------------------+------------------------------+
| RedHat/CentOS    | N/A                          |
+------------------+------------------------------+

- `Website <http://ant.apache.org/>`__
- `Download <http://ant.apache.org/bindownload.cgi>`__

Java
^^^^

If possible, install one of the following packages:

+------------------+-----------------------------+
| System           | Package                     |
+==================+=============================+
| BSD Ports        | java/openjdk7               |
+------------------+-----------------------------+
| Debian/Ubuntu    | openjdk-7-jdk openjdk-7-jre |
+------------------+-----------------------------+
| Homebrew         | N/A                         |
+------------------+-----------------------------+
| RedHat/CentOS    | java-1.7.0-openjdk          |
+------------------+-----------------------------+

- `Download <http://www.oracle.com/technetwork/java/javase/downloads/jdk7-downloads-1880260.html>`__

Python Sphinx
^^^^^^^^^^^^^

If possible, install the following packages:

+------------------+--------------------+
| System           | Package            |
+==================+====================+
| BSD Ports        | textproc/py-sphinx |
+------------------+--------------------+
| Debian/Ubuntu    | python-sphinx      |
+------------------+--------------------+
| Homebrew         | N/A                |
+------------------+--------------------+
| RedHat/CentOS    | N/A                |
+------------------+--------------------+

Use ``pip install sphinx`` if a packaged version is not available.

TeX
^^^

If possible, install the following packages:

+------------------+--------------------+
| System           | Package            |
+==================+====================+
| BSD Ports        | print/texlive-full |
+------------------+--------------------+
| Debian/Ubuntu    | texlive-full       |
+------------------+--------------------+
| Homebrew         | N/A*               |
+------------------+--------------------+
| RedHat/CentOS    | N/A†               |
+------------------+--------------------+

\*
  Install TeXLive or MacTeX
†
  Provides an obsolete version; install TeXLive

- `TeXLive website (for Unix) <https://www.tug.org/texlive/>`__
- `TeXLive quick install (for Unix) <https://www.tug.org/texlive/quickinstall.html>`__
- `MacTeX website (for MacOS X) <https://tug.org/mactex/>`__
- `MaxTeX download (for MacOS X) <http://mirror.ctan.org/systems/mac/mactex/MacTeX.pkg>`__
- `MikTeX website (for Windows) <http://www.miktex.org/>`__
- `MikTeX download (for Windows) <http://www.miktex.org/download>`__

Local font configuration may be required to make the
TeX Gyre fonts available:

- Linux and FreeBSD: Use the provided :program:`fontconfig` template
  or create your own
- MacOS X: Add to system using :program:`FontBook`
- Windows: May need adding to the system fonts if not found
  automatically

Build environment
-----------------

Custom configuration is needed primarily on Windows, where the needed
tools may not be on the search path by default.  There are several
possible approaches here:

- Add to the system environment (globally)
- Add to the user environment (affects a single user)
- Set in a batch file and run this to set up the environment on demand
  (local to the command shell)

The first will affect all programs running on the system and so may
cause problems, particularly if multiple configurations or tool
versions are to be used.  The last offers the greatest flexibility and
safety, and can be sourced automatically when starting a shell if a
console replacement such as :program:`ConsoleZ` is used.

- Activate a python virtualenv if needed
- Ensure that needed tools are on the user :envvar:`PATH`
  (e.g. :program:`ant`, :program:`cmake`, :program:`doxygen`,
  :program:`dot`, :program:`git`, :program:`python`, :program:`java`,
  :program:`sphinx`, :program:`xelatex`)
- Set ``CMAKE_PREFIX_PATH`` if some libraries and tools are not on the
  default search path.  Not all tools need to be on the default path;
  some will be discovered automatically by :program:`cmake`


Source tree layout
------------------

Source tree layout::

  cpp
  ├── cmake
  ├── ext
  ├── lib
  │   └── ome
  │       ├── bioformats
  │       │   ├── detail
  │       │   ├── in
  │       │   ├── out
  │       │   └── tiff
  │       ├── compat
  │       ├── internal
  │       ├── xerces
  │       │   └── dom
  │       └── xml
  │           ├── meta
  │           └── model
  │               ├── enums
  │               └── primitives
  └── test
      ├── ome-bioformats
      ├── ome-compat
      ├── ome-internal
      ├── ome-xerces
      └── ome-xml

Top-level directories inside :file:`cpp`:

:file:`cmake`
  CMake build infrastructure
:file:`ext`
  External third-party code
:file:`lib`
  Bio-Formats library headers and sources
:file:`test`
  Bio-Formats unit tests

Components in :file:`lib` and :file:`test`:

:file:`bioformats`
  Bio-Formats reader and writer interfaces and implementations
:file:`compat`
  Compatibility workarounds
:file:`internal`
  Private implementation details
:file:`xerces`
  Xerces-C XML DOM wrappers
:file:`xml`
  OME XML model and metadata


Configuring
-----------

Bio-Formats uses :program:`cmake`, a generic cross-platform build
system which generates build files for a large number of common build
systems and IDEs.  For example, on BSD, Linux and MacOS X, Unix
:program:`make` :file:`Makefile` files may be created.  On Windows,
Visual Studio :program:`msbuild` :file:`.sln` solution files and
:file:`.vcxproj` project may be created.  However, Eclipse, Sublime
Text or several other IDEs or alternative build systems may be used
instead, if desired.

Start by creating a temporary build directory.  This directory may be
in any location inside or outside the Bio-Formats source tree.
However, you may not use the source directory as the build directory.
(This fills the source tree full of autogenerated files.)

Run :program:`cmake` from the temporary build directory::

  % mkdir build
  % cd build
  % cmake /path/to/bioformats

Run ``cmake -LH`` to see the configurable project options; use
``-LAH`` to see advanced options.  The following basic options are
supported:

cxxstd-autodetect=(ON|OFF)
  Enable (default) or disable C++ compiler standard autodetection.  If
  enabled, the compiler will be put into C++11 mode if available,
  otherwise falling back to C++03 or C++98.  If disabled, it is the
  responsibility of the user to add the appropriate compiler options
  to build using the required standard.  This is useful if
  autodetection fails or a compiler is buggy in certain modes (e.g. GCC
  4.4 or 4.6 require ``-std=gnu++98`` or else ``stdarg`` support is
  broken).
doxygen=(ON|OFF)
  Enable doxygen documentation.  These will be enabled by default if
  doxygen is found.
embedded-gtest=(ON|OFF)
  Enable the use of an embedded copy of the Google Test (gtest)
  library.  This is off by default but will be enabled automatically
  if a system copy is not found.  This may be enabled explicitly to
  override the autodetection.
extended-tests=(ON|OFF)
  Some of the unit tests are comprehensive and run many thousands of
  tests.  These are enabled by default, but by setting to OFF a
  representative subset of the tests will be run instead to save time.
extra-warnings=(ON|OFF)
  Enable or disable additional compiler warnings in addition to the
  default set.  These are disabled by default since they trigger a large
  number of false positives, particularly in third-party libraries
  outside our control.
fatal-warnings=(ON|OFF)
  Make compiler warnings into fatal errors.  This is disabled by
  default.
test=(ON|OFF)
  Enable unit tests.  Tests are enabled by default.

For example, to disable tests, run ``cmake -Dtest=OFF``.  Options will
typically be enabled by default if the prerequisites are available.

The installation prefix may be set at this point using
`-DCMAKE_INSTALL_PREFIX=prefix`.  The build system and compiler to use
may also be specified.  Please see the :program:`cmake` documentation
for further details of all configurable options, and run ``cmake
--help`` to list the available generators for your platform.

C++11
^^^^^

C++11 features such as :cpp:type:`std::shared_ptr` are used when using
a C++11 compiler.  When using an older compiler, the Boost equivalents
will be used as fallbacks to provide the same functionality.
:program:`cmake` will automatically detect and use C++11 features when
available.


Linux and MacOS X
^^^^^^^^^^^^^^^^^

The default generator is ``Unix Makefiles``, and the standard
:envvar:`CXX`, :envvar:`CXXFLAGS` and :envvar:`LDFLAGS` environment
variables may be set to explicitly specify the compiler, compiler
flags and linker flags, respectively.  These may be useful for adding
additional ``-I`` and ``-L`` include and library search paths, for
example.

If you wish to use an IDE such as Eclipse or KDevelop, an alternative
generator may be used.

Windows
^^^^^^^

On Windows, the generator will require specifying by hand, and this
will configure the version of Visual Studio (or other compiler) to
use.  For example, ``-G "Visual Studio 11 Win64"`` will configure for
generating Visual Studio 2012 64-bit build files for use with the
Visual C++ compiler.

.. note::

    There is no need to use the Visual Studio command shell when
    running :program:`cmake`.


Building
--------

For all platforms and generators, it should usually be possible to
build using::

  % cmake --build

which will invoke the platform- and generator-specific build as
appropriate.

To build the API reference documentation, run::

  % cmake --build . --target doc


Linux and MacOS X
^^^^^^^^^^^^^^^^^

If using ``Unix Makefiles``, simply run::

  % make

with any additional options required, for example ``-j`` to enable
parallel building, or ``VERBOSE=1`` to show the details of every
command being executed.

To build the API reference documentation, run::

  % make doc

If using an IDE, open the generated project file and proceed using the
IDE to build the project.

Windows
^^^^^^^

If using Visual Studio, the generated project files may be opened
using the IDE and then built within the IDE.  Alternatively, the
project files may be built directly using the :program:`msbuild`
command-line tool inside a Visual Studio command prompt (or an
appropriately configured command prompt which has run
:program:`VCVARSALL.BAT` or equivalent to configure the environment).


Testing
-------

For all platforms and generators, it should usually be possible to run
all tests using :program:`ctest`.  Run::

  % ctest

or to run verbosely::

  % ctest -V

Additional flags allow specification of the build configuration to
use, logging, parallel building and other options.  Please see the
:program:`ctest` documentation for further details.

Individual test programs may be run by hand if required.

Linux and MacOS X
^^^^^^^^^^^^^^^^^

To run all tests, run::

  % cmake --build . --target test

or verbosely::

  % cmake --build . --target test -- ARGS=-V

If using ``Unix Makefiles``, simply run::

  % make test

or verbosely::

  % make test ARGS=-V

Windows
^^^^^^^
To run all tests, run::

  > msbuild RUN_TESTS.vcproj


Installation
------------

Linux and MacOS X
^^^^^^^^^^^^^^^^^

To install the headers and libraries directly on the system into the
configured prefix::

  % cmake --build . --target install

Alternatively, to install into a staging directory::

  % cmake --build . --target install -- DESTDIR=/path/to/staging/directory install

If using ``Unix Makefiles``, simply run::

  % make install

Alternatively, to install into a staging directory::

  % make DESTDIR=/path/to/staging/directory install

Windows
^^^^^^^

When using Visual Studio, there should be an :file:`INSTALL.vcxproj`
project which may be run using :program:`msbuild`, for example::

  > msbuild INSTALL.vcxproj /p:platform=x64

Installation layout
^^^^^^^^^^^^^^^^^^^

A typical installation layout::

  $CMAKE_INSTALL_PREFIX
  ├── include
  │   └── ome
  │       ├── bioformats
  │       │   ├── detail
  │       │   ├── in
  │       │   ├── out
  │       │   └── tiff
  │       ├── compat
  │       ├── xerces
  │       │   └── dom
  │       └── xml
  │           ├── meta
  │           └── model
  │               ├── enums
  │               └── primitives
  └── lib
      └── cmake


Using the library
-----------------

The :doxygen:`Doxygen API reference <annotated.html>` is used to
document all aspects of the Bio-Formats API.
