C++ conversion details
======================

The C++ codebase has been primarily a conversion of the original Java
codebase, with some additional helper functions and classes added
where needed.  The intention is that the basic interfaces and classes
should be identical between the two languages unless this is prevented
by fundamental differences between the languages.

This section is intended to be useful for

- Users of the existing Java interface, who wish to understand the
  differences between the two implementations
- Developers who wish to work on the C++ interface

In addition to documenting the specific language and class
compatibility issues, this section also documents the idioms in use in
the C++ code which might not be immediately clear by looking at the
API reference, and which may not be familiar to Java developers.


C++ and Java type incompatibility
---------------------------------

While C++ and Java have some basic syntactical similarities, there are
several basic differences in their type systems.

Java types
^^^^^^^^^^

.. code-block:: java

    int i;
    double d;

    Pixels pixels = new Pixels();

    Pixels[] array = new Pixels[5];

- Primitive types and classes
- No unsigned primitive integer types
- All classes are derived from root :cpp:class:`Object`
- Objects and arrays are always allocated with :cpp:class:`new`
- Destruction is non-deterministic
- Objects are by reference only
- All passing is by value (primitives and object references)

C++ types
^^^^^^^^^

.. code-block:: cpp

    uint32_t i;
    double d;

    Pixels         pixels;
    Pixels        *pixelsptr1 = new Pixels();
    const Pixels  *pixelsptr2 = &pixels;
    Pixels&        pixelsref(pixels);

    Pixels array[5];

- Primitive types, structures and classes
- Signed and unsigned primitive integer types of standard sizes
- Classes have no common root
- All types may be instances, pointers or references
- Object construction may be on the stack, on the heap using
  :cpp:class:`new` or in place using placement :cpp:class:`new`.
- Pointers and references may refer to :c:type:`const` type
- Pointers may be :c:type:`const`
- References are implicitly :c:type:`const` (similar to :c:type:`final`)
- Destruction is deterministic

Reference handling
^^^^^^^^^^^^^^^^^^

Plain C++ pointers can be dangerous if used incorrectly.  The
Bio-Formats API make a point of never using them unless absolutely
necessary.  One of the pitfalls of “dumb” pointers:

.. code-block:: cpp

    // Start of block
    {
      Image *i = new Image(filename);

      i->read_plane(); // throws exception

      // Memory leaked here
      // Memory not freed when pointer i goes out of scope
    }

- :cpp:class:`new` and :cpp:class:`delete` must always be paired
- Requires manual management of ownership and lifetime
- Bare pointers are not exception-safe
- Need to clean up for every exit point in a function

Therefore use of :cpp:class:`new` is not in general a safe or sensible
thing to do.  The Bio-Formats API **never** passes pointers allocated
with :cpp:class:`new`, nor requires any manual memory management.
Instead, “smart” pointers are used throughout to manage memory safely
and automatically.


:cpp:class:`std::shared_ptr` as a “smart” pointer
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

The unsafe example above, rewritten to use
:cpp:class:`std::shared_ptr`:

.. code-block:: cpp

    // Start of block
    {
      std::shared_ptr<Image> i(std::make_shared<Image>(filename));

      i->read_plane(); // throws exception

      // Memory freed when i's destructor is
      // run at exit of block scope
    }

- :cpp:class:`shared_ptr` object lifetime manages the resource
- :cpp:class:`new` replaced with :cpp:class:`std::make_shared`
- May be used as class members; lifetime is tied to class instance
- Clean up for all exit points is automatic and safe
- Allows ownership transfer and sharing
- Allows reference without ownership using :cpp:class:`weak_ptr`
- :cpp:class:`weak_ptr` references the object but does not prevent it
  being freed when the last :cpp:class:`shared_ptr` reference is lost;
  this is useful for cycle breaking and is used by the OME XML model
  objects for references

Resource Acquisition Is Initialization
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Resource Acquisition Is Initialization (RAII) is a programming idiom
used throughout modern C++ libraries and applications, including the
Standard Library,

- A class is a proxy for a resource
- The resource is acquired when object is initialised
- The resource is released when object is destroyed
- Any resource may be managed (e.g. memory, files, locks)
- The C++ language and runtime guarantees make resource management
  deterministic and reliable
- Safe for use in any scope
- Exception safe

Because this relies implicitly upon the deterministic object
destruction guarantees made by the C++ language, this is not used
widely in Java APIs which often require manual management of resources
such as open files.  Used carefully, RAII will prevent resource leaks
and result in robust, safe code.

The :cpp:class:`FormatReader` API is currently not using RAII due to
the use of the :cpp:func:`FormatHandler::setId()` interface.

C++ reference variants
^^^^^^^^^^^^^^^^^^^^^^

.. code-block:: cpp

    //          Non-constant                              Constant
    // -----------------------------       ---------------------------------------
    // Pointer
                           Image *i;                               const Image *i;
                    Image * const i;                        const Image * const i;

    // Reference
                         Image& i;                               const Image& i;

    // Shared pointer
           std::shared_ptr<Image> i;               std::shared_ptr<const Image> i;
     const std::shared_ptr<Image> i;         const std::shared_ptr<const Image> i;

    // Shared pointer reference
          std::shared_ptr<Image>& i;              std::shared_ptr<const Image>& i;
    const std::shared_ptr<Image>& i;        const std::shared_ptr<const Image>& i;

    // Weak pointer
             std::weak_ptr<Image> i;                 std::weak_ptr<const Image> i;
       const std::weak_ptr<Image> i;           const std::weak_ptr<const Image> i;

   // Weak pointer reference
            std::weak_ptr<Image>& i;                std::weak_ptr<const Image>& i;
      const std::weak_ptr<Image>& i;          const std::weak_ptr<const Image>& i;

Java has one reference type.  Here, we have **22**.  Clearly, not all
of these will typically be used.  Below, a subset of these are shown
for use for particular purposes.

Class member types:

.. code-block:: cpp

  Image i;                     // Concrete instance
  std::shared_ptr<Image> i;    // Reference
  std::weak_ptr<Image> i;      // Weak reference

Wherever possible, a concrete instance should be preferred.  This
won't be possible for polymorphic types, where a reference is
required.  In this situation, a :cpp:class:`std::shared_ptr` is
preferred if the class owns the member and/or needs control over its
lifetime.  If the class does not have ownership then a
:cpp:class:`std::weak_ptr` will allow safe access to the object if it
still exists.  In circumstances where manual lifetime management is
required, e.g. for performance, and the member is guaranteed to exists
for the duration of the class' lifetime, a plain pointer or reference
may be used.  A pointer will be used if it's possible for it to be
:cpp:class:`null`, or it may be reassigned more than once, or if is
initialised after initial construction.  If properly using RAII,
references should be possible and preferred.

Argument types:

.. code-block:: cpp

  void read_plane(const Image& image);
  void read_plane(const std::shared_ptr<Image>& image);

Passing primitive types by value is acceptable.  However, passing a
struct or class by value will implicitly copy the object into the
callee's stack frame, which may be expensive (and requires a copy
constructor which won't be guaranteed or even possible for polymorphic
types).  Passing by reference avoids the need for any copying, and
passing by :c:type:`const` reference will prevent the callee from
modifying the object, also making it clear that there is no transfer
of ownership.  Passing using a :cpp:class:`std::shared_ptr` is
possible but not recommended---the copy will involve reference
counting overhead which can kill multi-threaded performance since it
requires synchronization between all threads; use a :c:type:`const`
reference to a :cpp:class:`std::shared_ptr` to avoid the overhead.  If
ownership should be transferred or shared with the callee, use a
non-:c:type:`const` reference.

To be absolutely clear, plain pointers are never used and are not
acceptable for ownership transfer.  A plain reference also makes it
clear there is no ownership transfer.

Return types:

.. code-block:: cpp

                    Image get_image(); // ownership transferred
                   Image& get_image(); // ownership retained
   std::shared_ptr<Image> get_image(); // ownership shared/trans
  std::shared_ptr<Image>& get_image(); // ownership shared

If the callee does not retain a copy of the original object, it can't
pass by reference since it can't guarantee the object remaining in
scope after it returns, hence it must create a temporary value and
pass by value.  If the callee does retain a copy, it has the option of
passing by reference.  Passing by reference is preferred when
possible.  Passing by value implies ownership transfer.  Passing by
reference implies ownership retention.  Passing a
:cpp:class:`std::shared_ptr` by value or reference implies sharing
ownership since the caller can retain a reference; if passing by value
ownership *may* be transferred since this implies the callee is not
retaining a reference to it (but this isn't guaranteed).

Again, to be absolutely clear, plain pointers are never used and are
not acceptable for ownership transfer.  A plain reference also makes
it clear there is no ownership transfer.

- Safety: References cannot be :cpp:class:`null`
- Storing polymorphic types requires use of a
  :cpp:class:`shared_ptr`
- Referencing polymorphic types *may* require use of a
  :cpp:class:`shared_ptr`
- Safety: To avoid cyclic dependencies, use :cpp:class:`weak_ptr`
- Safety: To allow object destruction while maintaining a safe
  reference, use :cpp:class:`weak_ptr`
- :cpp:class:`weak_ptr` is not directly usable
- :cpp:class:`weak_ptr` is convertible back to :cpp:class:`shared_ptr`
  for use

Safe array passing
------------------

C++ arrays are not safe to pass in or out of functions since the size
is not known unless passed separately.

.. code-block:: cpp

  class Image
  {
    // Unsafe; size unknown
    uint8_t[] getLUT();
         void setLUT(uint8_t[]& lut);
  };

:cpp:class:`std::array` is a safe alternative.  This is a C++11
feature; older compilers use :cpp:class:`boost::array` as a fallback.

.. code-block:: cpp

  class Image
  {
    typedef std::array<uint8_t, 256> LUT;

    // Safe; size defined
    const LUT& getLUT() const;
          void setLUT(const LUT&);
  };

- C (C++) arrays essentially decay to plain pointers
- Plain pointers have no associated size information
- :cpp:class:`std::array` is a class which behaves like an array
- :cpp:class:`std::array` size is defined in the template
- :cpp:class:`std::array` can be passed like any object

Storing and passing different types
-----------------------------------

Types with a common base
^^^^^^^^^^^^^^^^^^^^^^^^

.. code-block:: cpp

    std::vector<std::shared_ptr<Base> > v;
    v.push_back(std::make_shared<Derived>());

This can store any type derived from :cpp:class:`Base`.  A
:cpp:class:`std::shared_ptr` is **essential**.  Without it, bare
pointers to the base would be stored, and memory leak when elements
are removed from the container (unless externally managed [generally
unsafe]).  The same applies to passing polymorphic types.

Java containers can be problematic:

- Java can store root :cpp:class`Object` in containers
- Java can pass and return root :cpp:class`Object` in methods.
- This isn't possible in C++: there is no root object.
- An alternative approach is needed.

Types with no common base
^^^^^^^^^^^^^^^^^^^^^^^^^

:cpp:class:`boost::variant` may be used to store a limited set of
different types:

.. code-block:: cpp

  typedef boost::variant<int, std::string> variants;
  std::vector<variants> v;
  v.push_back(43);
  v.push_back("ATTO 647N");

- Store a set of discriminated types
- Used to store original metadata

This is not an alternative to a common root object.  Instead, this is
a discriminated union, which can store one of a defined set of
"variant" types.  A static visitor pattern may be used to generate
code to operate on all of the supported types.  The variant type may
be used as a class member, passed by value, passed by reference or
stored in a containers like any other type.  Due to the way it is
implemented to store values, it doesn not necessarily need wrapping in
a :cpp:class:`std::shared_ptr` since it can behave as a value type
(depending upon the context).

Arbitrary types
^^^^^^^^^^^^^^^

:cpp:class:`boost::any` may be used to store any type:

.. code-block:: cpp

  std::vector<boost::any> v;
  v.push_back(Anything);

This is the most flexible solution, but in order to get a value back
out, it requires casting to its specific type.  This can mean a
situation could arise where values are stored of types which cannot
be handled since it's not possible to write the code to handle every
single possibility ahead of time.  This can't arise with
:cpp:class:`boost::variant` since the scope is limited to a set of
allowed types, and the static visitor can ensure that all types are
supported by the code at compile time.  However, if the open-ended
flexibility is needed, this is available.

Java uses polymorphism to store and pass the root :cpp:class:`Object`
around.  The :cpp:class:`boost::variant` and :cpp:class:`boost::any`
approaches use templates to create a common base and manage the stored
objects.  However, the end user doesn't need to deal with this
complexity directly---the use of the types is quite transparent.

Interfaces
----------

Java supports single-inheritance, plus interfaces.  C++ supports true
multiple-inheritance, which is rather more flexible, at the expense of
being rather more complicated and dangerous.  However, the Java
single-inheritance-plus-interfaces model can be implemented in C++
using a subset of the facilities provided by multiple inheritance.
Rather than being enforced by the language, it's a set of idioms.
These must be rigorously followed or else things will fail horribly!

C++ interfaces are classes with:

- No instance variables
- Pure virtual methods
- :cpp:type:`protected` default constructor
- :c:type:`public virtual` destructor
- Deleted copy constructor and assignment operator

C++ classes implementing interfaces:

- Use :cpp:type:`public` inheritance for parent class
- Use :c:type:`virtual public` inheritance for implemented interfaces
- Have a :cpp:type:`virtual` destructor

When compiled with optimization enabled, the interface classes should
have zero storage overhead.  If implementing classes don't use
:c:type:`virtual public` inheritance, compilation will fail as soon as
a second class in the inheritance hierarchy also implements the
interface.

Building and installing
-----------------------

Source layout::

  cpp
  ├── cmake
  ├── lib
  │   └── ome
  │       ├── bioformats
  │       │   └── detail
  │       ├── compat
  │       ├── internal
  │       ├── xerces
  │       │   └── dom
  │       └── xml
  │           ├── meta
  │           └── model
  │               ├── enums
  │               └── primitives
  └── test
      ├── ome-bioformats
      ├── ome-compat
      ├── ome-internal
      ├── ome-xerces
      └── ome-xml

:file:`bioformats`
  Bio-Formats reader and writer interfaces and implementations
:file:`compat`
  Compatibility workarounds
:file:`internal`
  Private implementation details
:file:`xerces`
  Xerces-C XML DOM wrappers
:file:`xml`
  OME XML model and metadata

Configuring and building with :program:`cmake`
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

The build directory is separate from the source directory.

Configure::

  % mkdir /tmp/bioformats-build
  % cd /tmp/bioformats-build
  % cmake ~/code/bioformats

Build::

  % make -j8

Install::

  % make DESTDIR=/tmp/bioformats-install install

Installation layout::

  $CMAKE_INSTALL_PREFIX
  ├── include
  │   └── ome
  │       ├── bioformats
  │       ├── compat
  │       ├── xerces
  │       │   └── dom
  │       └── xml
  │           ├── meta
  │           └── model
  │               ├── enums
  │               └── primitives
  └── lib
      └── x86_64-linux-gnu
          └── cmake

Installed libraries (on Linux)::

  $CMAKE_INSTALL_PREFIX/lib
  └── x86_64-linux-gnu
      ├── cmake
      │   ├── ome-bioformats-config.cmake
      │   ├── ome-xerces-config.cmake
      │   └── ome-xml-config.cmake
      ├── libome-bioformats.so -> libome-bioformats.so.5.1.0
      ├── libome-bioformats.so.5.1.0
      ├── libome-xerces.so -> libome-xerces.so.5.1.0
      ├── libome-xerces.so.5.1.0
      ├── libome-xml.so -> libome-xml.so.5.1.0
      └── libome-xml.so.5.1.0

API Reference
-------------

:bfcppdoxygen:`Doxygen <annotated.html>` is used to document all APIs.
