ITK
===

The `Insight Toolkit <http://itk.org/>`_ (ITK) is an open-source,
cross-platform system that provides developers with an extensive suite
of software tools for image analysis. Developed through extreme
programming methodologies, ITK employs leading-edge algorithms for
registering and segmenting multidimensional data.

ITK provides an ImageIO plug-in structure that works via discovery through
a dependency injection scheme. This allows a program built on ITK to
load plug-ins for reading and writing different image types without
actually linking to the ImageIO libraries required for those types. Such
encapsulation automatically grants two major boons: firstly, programs
can be easily extended just by virtue of using ITK (developers do not
have to specifically accommodate or anticipate what plug-ins may be
used). Secondly, the architecture provides a distribution method for
open source software, like Bio-Formats, which have licenses that might
otherwise exclude them from being used with other software suites.

The Bio-Formats ITK plug-in provides an ImageIO plug-in for ITK that uses
`Bio-Formats <http://farsight-toolkit.org/wiki/Bio-Formats>`_ to read
and write supported life sciences file formats. This plug-in allows any
program built on ITK to read any of the image types supported by
Bio-Formats.

Prerequisites
-------------

If you have not done so already, `download <http://itk.org/ITK/resources/software.html>`_ and build ITK.
Note that BF-ITK requires ITK 3.20.0 or newer. It should also work with the latest
`ITK source from git <http://www.itk.org/Wiki/ITK/Git>`_. BF-ITK also requires ITK to be built with the following
flags set:

* ITK_USE_REVIEW = ON
* BUILD_SHARED_LIBS = ON

You will also need `Git <http://git-scm.com/>`_, `Ant <http://ant.apache.org/>`_ and
`CMake <http://www.cmake.org/>`_ for the installation
tutorial.

Installation
------------

#. Clone the :doc:`Bio-Formats source
   code </developers/source-code>`::

        git clone git://github.com/openmicroscopy/bioformats.git

#. Compile the Bio-Formats tools bundle::

        cd bioformats
        ant tools

#. Configure your BF-ITK build::

        mkdir ../bf-itk-build && cd ../bf-itk-build
        ccmake ../bioformats/components/native/bf-itk

   If you prefer, you can use cmake-gui rather than ccmake to configure
   the project. If you receive a configuration error stating that the
   location of ITK cannot be found, then set ``ITK_DIR`` to your binary
   build of ITK.

#. Compile BF-ITK:

   On Linux and OSX, simply run ``make``, or on Windows ``start BioFormatsImageIO.sln``.

   This will open the solution in Visual Studio. Select ``Debug`` or
   ``Release`` from the drop-down menu, as appropriate. Press ``F7``
   to compile, or select ``Build Solution`` from the Build menu.


#. Package BF-ITK build (optional):

   By default, all necessary libraries including ``loci_tools.jar`` will
   be copied to ``dist/bf-itk`` inside the BF-ITK build folder.

   If desired, everything can be packaged into a single archive by running:

   On Linux and OSX, ``make package`` or on Windows, click on the ``PACKAGE`` target in the Visual Studio interface.
   Then choose ``Build PACKAGE`` from the Build menu.

Usage
-----

To use BF-ITK, you must set your ``ITK_AUTOLOAD_PATH`` to point to the
folder containing the BF-ITK binaries (including the **BioFormatsIO**
and **BioFormatsIOPlugin** shared libraries, and the **loci_tools.jar**
Java library). For example::

     export ITK_AUTOLOAD_PATH=~/bf-itk-build/dist/bf-itk

Once this variable is set, ITK's ImageIO routines will automatically use
Bio-Formats as needed to read and write supported file formats.

If you build ITK with examples, you can test using various programs::

     cd ~/itk-build/bin
     ./ImageReadWrite ~/data/inputFile.ics ~/data/outputFile.mha
