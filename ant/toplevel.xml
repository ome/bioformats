<!--
toplevel.xml

Toplevel targets for Bio-Formats builds.
Download Apache Ant from http://ant.apache.org/.
Type "ant -p" for a list of targets.
-->

<project>
  <property name="root.dir" location="${basedir}"/>
  <import file="${root.dir}/ant/global.xml"/>
  <import file="${root.dir}/ant/version.xml"/>

  <!-- Global build targets -->

  <target name="compile"
    depends="compile-autogen,
      compile-formats-gpl,
      compile-jai,
      compile-bio-formats-plugins,
      compile-lwf-stubs,
      compile-mipav-stubs,
      compile-mdbtools,
      compile-metakit,
      compile-ome-xml,
      compile-formats-api,
      compile-formats-bsd,
      compile-bio-formats-tools,
      compile-tests,
      compile-turbojpeg"
    description="compile classes for all components"/>

  <target name="jars"
    depends="copy-jars,
      jar-autogen,
      jar-formats-gpl,
      jar-jai,
      jar-bio-formats-plugins,
      jar-lwf-stubs,
      jar-mipav-stubs,
      jar-mdbtools,
      jar-metakit,
      jar-ome-xml,
      jar-formats-api,
      jar-formats-bsd,
      jar-bio-formats-tools,
      jar-specification,
      jar-tests,
      jar-turbojpeg"
    description="generate JAR files for software packages"/>

  <!--
  NB: Findbugs target does not test autogenerated code, forks and stubs:
    findbugs-jai
    findbugs-lwf-stubs
    findbugs-mipav-stubs
    findbugs-mdbtools
    findbugs-ome-xml
  -->
  <target name="findbugs"
    depends="findbugs-autogen,
      findbugs-formats-gpl,
      findbugs-bio-formats-plugins,
      findbugs-metakit,
      findbugs-formats-api,
      findbugs-formats-bsd,
      findbugs-bio-formats-tools,
      findbugs-tests"
    description="run findbugs on most components"/>

  <target name="clean"
    depends="
      clean-autogen,
      clean-formats-gpl,
      clean-jai,
      clean-bio-formats-plugins,
      clean-lwf-stubs,
      clean-mipav-stubs,
      clean-mdbtools,
      clean-metakit,
      clean-ome-xml,
      clean-formats-api,
      clean-formats-bsd,
      clean-bio-formats-tools,
      clean-specification,
      clean-tests,
      clean-turbojpeg,
      clean-xsd-fu,
      clean-docs-sphinx"
    description="remove build files for all components">
    <delete dir="${artifact.dir}"/>
    <delete dir="build"/>
  </target>

  <target name="test"
    depends="test-autogen,
      test-formats-gpl,
      test-jai,
      test-bio-formats-plugins,
      test-lwf-stubs,
      test-mipav-stubs,
      test-mdbtools,
      test-metakit,
      test-ome-xml,
      test-formats-api,
      test-formats-bsd,
      test-bio-formats-tools,
      test-tests,
      test-turbojpeg"
    description="compile and run tests for all components">
  </target>

  <target name="utils"
    depends="jars,
      utils-formats-gpl,
      utils-bio-formats-plugins,
      utils-formats-bsd"
    description="compile all extra utilities"/>

  <target name="docs" depends="jars"
    description="generate the Javadocs for most components">
    <echo>----------=========== Javadocs ===========----------</echo>
    <ant dir="components/bundles/bioformats_package" target="docs"/>
  </target>

  <target name="docs-zip" depends="docs"/>

  <target name="docs-sphinx"
    description="generate the Sphinx HTML documentation">
    <echo>----------=========== Sphinx HTML ===========----------</echo>
    <ant dir="docs/sphinx" target="html"/>
    <echo>----------=========== Sphinx MAN ===========----------</echo>
    <ant dir="docs/sphinx" target="man"/>
  </target>

  <target name="clean-docs-sphinx"
	description="remove build files for the Sphinx HTML documentation">
    <ant dir="docs/sphinx" target="clean"/>
  </target>

  <target name="copy-jars" description="copy JARS (deprecated)"/>

  <target name="testing-deps" depends="copy-jars"/>

  <!-- JAI Image I/O Tools library -->

  <target name="deps-jai" depends="copy-jars" />

  <target name="compile-jai" depends="deps-jai"
    description="compile classes for JAI Image I/O Tools library">
    <ant dir="components/forks/jai" target="jai.compile"/>
  </target>

  <target name="jar-jai" depends="deps-jai"
    description="generate JAR file for JAI Image I/O Tools library">
    <ant dir="components/forks/jai" target="jai.jar"/>
  </target>

  <target name="findbugs-jai" depends="jar-jai"
    description="run findbugs on JAI Image I/O Tools library">
    <ant dir="components/forks/jai" target="jai.findbugs"/>
  </target>

  <target name="clean-jai"
    description="remove build files for JAI Image I/O Tools library">
    <ant dir="components/forks/jai" target="jai.clean"/>
  </target>

  <target name="test-jai" depends="jar-jai, testing-deps"
    description="compile and run tests for JAI Image I/O Tools library">
    <ant dir="components/forks/jai" target="test"/>
  </target>

  <!-- MDB Tools Java library -->

  <target name="deps-mdbtools" depends="copy-jars" />

  <target name="compile-mdbtools" depends="deps-mdbtools"
    description="compile classes for MDB Tools Java library">
    <ant dir="components/forks/mdbtools" target="mdbtools.compile"/>
  </target>

  <target name="jar-mdbtools" depends="deps-mdbtools"
    description="generate JAR file for MDB Tools Java library">
    <ant dir="components/forks/mdbtools" target="mdbtools.jar"/>
  </target>

  <target name="findbugs-mdbtools" depends="jar-mdbtools"
    description="run findbugs on MDB Tools Java library">
    <ant dir="components/forks/mdbtools" target="mdbtools.findbugs"/>
  </target>

  <target name="clean-mdbtools"
    description="remove build files for MDB Tools Java library">
    <ant dir="components/forks/mdbtools" target="mdbtools.clean"/>
  </target>

  <target name="test-mdbtools" depends="jar-mdbtools, testing-deps"
    description="compile and run tests for MDB Tools Java library">
    <ant dir="components/forks/mdbtools" target="test"/>
  </target>

  <!-- Metakit library -->

  <target name="deps-metakit"
    depends="copy-jars"/>

  <target name="compile-metakit" depends="deps-metakit"
    description="compile classes for Metakit Java library">
    <ant dir="components/metakit" target="metakit.compile"/>
  </target>

  <target name="jar-metakit" depends="deps-metakit"
    description="generate JAR file for Metakit Java library">
    <ant dir="components/metakit" target="metakit.jar"/>
  </target>

  <target name="findbugs-metakit" depends="jar-metakit"
    description="run findbugs on Metakit Java library">
    <ant dir="components/metakit" target="metakit.findbugs"/>
  </target>

  <target name="clean-metakit"
    description="remove build files for Metakit Java library">
    <ant dir="components/metakit" target="metakit.clean"/>
  </target>

  <target name="test-metakit" depends="jar-metakit, testing-deps"
    description="compile and run tests for Metakit Java library">
    <ant dir="components/metakit" target="test"/>
  </target>

  <!-- OME-XML Java library -->

  <target name="deps-ome-xml" depends="copy-jars" />

  <target name="compile-ome-xml" depends="deps-ome-xml"
    description="compile classes for OME-XML Java library">
    <ant dir="components/ome-xml" target="ome-xml.compile"/>
  </target>

  <target name="jar-ome-xml" depends="deps-ome-xml"
    description="generate JAR file for OME-XML Java library">
    <ant dir="components/ome-xml" target="ome-xml.jar"/>
  </target>

  <target name="findbugs-ome-xml" depends="jar-ome-xml"
    description="run findbugs on OME-XML Java library">
    <ant dir="components/ome-xml" target="ome-xml.findbugs"/>
  </target>

  <target name="clean-ome-xml"
    description="remove build files for OME-XML Java library">
    <ant dir="components/ome-xml" target="ome-xml.clean"/>
  </target>

  <target name="test-ome-xml" depends="jar-ome-xml, testing-deps"
    description="compile and run tests for OME-XML Java library">
    <ant dir="components/ome-xml" target="test"/>
  </target>

  <!-- LWF stubs -->

  <target name="deps-lwf-stubs" depends="copy-jars" />

  <target name="compile-lwf-stubs" depends="deps-lwf-stubs"
    description="compile classes for LWF stubs">
    <ant dir="components/stubs/lwf-stubs" target="lwf-stubs.compile"/>
  </target>

  <target name="jar-lwf-stubs" depends="deps-lwf-stubs"
    description="generate JAR file for LWF stubs">
    <ant dir="components/stubs/lwf-stubs" target="lwf-stubs.jar"/>
  </target>

  <target name="findbugs-lwf-stubs" depends="jar-lwf-stubs"
    description="run findbugs on LWF stubs">
    <ant dir="components/stubs/lwf-stubs" target="lwf-stubs.findbugs"/>
  </target>

  <target name="clean-lwf-stubs"
    description="remove build files for LWF stubs">
    <ant dir="components/stubs/lwf-stubs" target="lwf-stubs.clean"/>
  </target>

  <target name="test-lwf-stubs" depends="jar-lwf-stubs, testing-deps"
    description="compile and run tests for LWF stubs">
    <ant dir="components/stubs/lwf-stubs" target="test"/>
  </target>

  <!-- MIPAV stubs -->

  <target name="deps-mipav-stubs" depends="copy-jars" />

  <target name="compile-mipav-stubs" depends="deps-mipav-stubs"
    description="compile classes for MIPAV stubs">
    <ant dir="components/stubs/mipav" target="mipav-stubs.compile"/>
  </target>

  <target name="jar-mipav-stubs" depends="deps-mipav-stubs"
    description="generate JAR file for MIPAV stubs">
    <ant dir="components/stubs/mipav" target="mipav-stubs.jar"/>
  </target>

  <target name="findbugs-mipav-stubs" depends="jar-mipav-stubs"
    description="run findbugs on MIPAV stubs">
    <ant dir="components/stubs/mipav" target="mipav-stubs.findbugs"/>
  </target>

  <target name="clean-mipav-stubs"
    description="remove build files for MIPAV stubs">
    <ant dir="components/stubs/mipav" target="mipav-stubs.clean"/>
  </target>

  <target name="test-mipav-stubs" depends="jar-mipav-stubs, testing-deps"
    description="compile and run tests for MIPAV stubs">
    <ant dir="components/stubs/mipav" target="test"/>
  </target>

  <!-- API -->

  <target name="deps-formats-api"
    depends="copy-jars,
      jar-ome-xml,
      jar-specification"/>

  <target name="compile-formats-api" depends="deps-formats-api"
    description="compile classes for reader and writer APIs">
    <ant dir="components/formats-api" target="formats-api.compile"/>
  </target>

  <target name="jar-formats-api" depends="deps-formats-api"
    description="generate JAR file for reader and writer APIs">
    <ant dir="components/formats-api" target="formats-api.jar"/>
  </target>

  <target name="findbugs-formats-api" depends="jar-formats-api"
    description="run findbugs on reader and writer APIs">
    <ant dir="components/formats-api" target="formats-api.findbugs"/>
  </target>

  <target name="clean-formats-api"
    depends="clean-ome-xml"
    description="remove build files for reader and writer APIs">
    <ant dir="components/formats-api" target="formats-api.clean"/>
  </target>

  <target name="utils-formats-api" depends="jar-formats-api"
    description="compile extra utilities for reader and writer APIs">
    <ant dir="components/formats-api" target="formats-api.utils"/>
  </target>

  <target name="test-formats-api" depends="jar-formats-api, testing-deps"
    description="compile and run tests for reader and writer APIs">
    <ant dir="components/formats-api" target="test"/>
  </target>

  <!-- BSD Implentation -->

  <target name="deps-formats-bsd"
    depends="copy-jars, jar-jai,
      jar-formats-api,
      jar-lwf-stubs,
      jar-mipav-stubs,
      jar-ome-xml,
      jar-specification,
      jar-turbojpeg"/>

  <target name="compile-formats-bsd" depends="deps-formats-bsd"
    description="compile classes for BSD format implementations">
    <ant dir="components/formats-bsd" target="formats-bsd.compile"/>
  </target>

  <target name="jar-formats-bsd" depends="deps-formats-bsd"
    description="generate JAR file for BSD format implementations">
    <ant dir="components/formats-bsd" target="formats-bsd.jar"/>
  </target>

  <target name="findbugs-formats-bsd" depends="jar-formats-bsd"
    description="run findbugs on BSD format implementations">
    <ant dir="components/formats-bsd" target="formats-bsd.findbugs"/>
  </target>

  <target name="clean-formats-bsd"
    depends="clean-jai,
      clean-lwf-stubs,
      clean-mipav-stubs,
      clean-ome-xml"
    description="remove build files for BSD format implementations">
    <ant dir="components/formats-bsd" target="formats-bsd.clean"/>
  </target>

  <target name="utils-formats-bsd" depends="jar-formats-bsd"
    description="compile extra utilities for BSD format implementations">
    <ant dir="components/formats-bsd" target="formats-bsd.utils"/>
  </target>

  <target name="test-formats-bsd" depends="jar-formats-bsd, testing-deps"
    description="compile and run tests for BSD format implementations">
    <ant dir="components/formats-bsd" target="test"/>
  </target>

  <!-- Bio-Formats command line tools -->

  <target name="deps-bio-formats-tools"
    depends="copy-jars, jar-jai,
      jar-lwf-stubs,
      jar-ome-xml,
      jar-formats-api,
      jar-formats-gpl,
      jar-formats-bsd"/>

  <target name="compile-bio-formats-tools" depends="deps-bio-formats-tools"
    description="compile classes for Bio-Formats tools">
    <ant dir="components/bio-formats-tools" target="bio-formats-tools.compile"/>
  </target>

  <target name="jar-bio-formats-tools" depends="deps-bio-formats-tools"
    description="generate JAR file for Bio-Formats tools">
    <ant dir="components/bio-formats-tools" target="bio-formats-tools.jar"/>
  </target>

  <target name="findbugs-bio-formats-tools" depends="jar-bio-formats-tools"
    description="run findbugs on Bio-Formats tools">
    <ant dir="components/bio-formats-tools" target="bio-formats-tools.findbugs"/>
  </target>

  <target name="clean-bio-formats-tools"
    depends="clean-jai,
      clean-lwf-stubs,
      clean-ome-xml,
      clean-formats-api,
      clean-formats-bsd,
      clean-formats-gpl"
    description="remove build files for Bio-Formats tools">
    <ant dir="components/bio-formats-tools" target="bio-formats-tools.clean"/>
  </target>

  <target name="test-bio-formats-tools" depends="jar-bio-formats-tools, testing-deps"
    description="compile and run tests for Bio-Formats tools">
    <ant dir="components/bio-formats-tools" target="test"/>
  </target>

  <!-- Bio-Formats -->

  <target name="deps-formats-gpl"
    depends="copy-jars,
      jar-mdbtools,
      jar-metakit,
      jar-ome-xml,
      jar-formats-api,
      jar-formats-bsd"/>

  <target name="compile-formats-gpl" depends="deps-formats-gpl"
    description="compile classes for GPL format implementations">
    <ant dir="components/formats-gpl" target="formats-gpl.compile"/>
  </target>

  <target name="jar-formats-gpl" depends="deps-formats-gpl"
    description="generate JAR file for GPL format implementations">
    <ant dir="components/formats-gpl" target="formats-gpl.jar"/>
  </target>

  <target name="findbugs-formats-gpl" depends="jar-formats-gpl"
    description="run findbugs on Bio-Formats">
    <ant dir="components/formats-gpl" target="formats-gpl.findbugs"/>
  </target>

  <target name="clean-formats-gpl"
    depends="clean-mdbtools,
      clean-metakit,
      clean-ome-xml,
      clean-formats-api,
      clean-formats-bsd"
    description="remove build files for GPL format implementations">
    <ant dir="components/formats-gpl" target="formats-gpl.clean"/>
  </target>

  <target name="utils-formats-gpl" depends="jar-formats-gpl"
    description="compile extra utilities for GPL format implementations">
    <ant dir="components/formats-gpl" target="formats-gpl.utils"/>
  </target>

  <target name="test-formats-gpl" depends="jar-formats-gpl, testing-deps"
    description="compile and run tests for GPL format implementations">
    <ant dir="components/formats-gpl" target="test"/>
  </target>

  <!-- Bio-Formats autogen -->

  <target name="deps-autogen"
    depends="copy-jars, jar-formats-api,jar-formats-bsd,jar-formats-gpl"/>

  <target name="compile-autogen" depends="deps-autogen"
    description="compile classes for Bio-Formats autogen">
    <ant dir="components/autogen" target="autogen.compile"/>
  </target>

  <target name="jar-autogen" depends="deps-autogen"
    description="generate JAR file for Bio-Formats autogen">
    <ant dir="components/autogen" target="autogen.jar"/>
  </target>

  <target name="findbugs-autogen" depends="jar-autogen"
    description="run findbugs on Bio-Formats autogen">
    <ant dir="components/autogen" target="autogen.findbugs"/>
  </target>

  <target name="clean-autogen"
    depends="clean-formats-api,clean-formats-bsd"
    description="remove build files for Bio-Formats autogen">
    <ant dir="components/autogen" target="autogen.clean"/>
  </target>

  <target name="test-autogen" depends="jar-autogen, testing-deps"
    description="compile and run tests for Bio-Formats autogen">
    <ant dir="components/autogen" target="test"/>
  </target>

  <!-- Bio-Formats Plugins for ImageJ -->

  <target name="deps-bio-formats-plugins"
    depends="copy-jars, jar-formats-gpl,
      jar-ome-xml,
      jar-formats-api,
      jar-formats-bsd"/>

  <target name="compile-bio-formats-plugins" depends="deps-bio-formats-plugins"
    description="compile classes for Bio-Formats Plugins for ImageJ">
    <ant dir="components/bio-formats-plugins" target="bio-formats-plugins.compile"/>
  </target>

  <target name="jar-bio-formats-plugins" depends="deps-bio-formats-plugins"
    description="generate JAR file for Bio-Formats Plugins for ImageJ">
    <ant dir="components/bio-formats-plugins" target="bio-formats-plugins.jar"/>
  </target>

  <target name="findbugs-bio-formats-plugins" depends="jar-bio-formats-plugins"
    description="run findbugs on Bio-Formats Plugins for ImageJ">
    <ant dir="components/bio-formats-plugins" target="bio-formats-plugins.findbugs"/>
  </target>

  <target name="clean-bio-formats-plugins"
    depends="clean-formats-gpl,
      clean-ome-xml,
      clean-formats-api,
      clean-formats-bsd"
    description="remove build files for Bio-Formats Plugins for ImageJ">
    <ant dir="components/bio-formats-plugins" target="bio-formats-plugins.clean"/>
  </target>

  <target name="utils-bio-formats-plugins" depends="jar-bio-formats-plugins"
    description="compile extra utilities for Bio-Formats Plugins for ImageJ">
    <ant dir="components/bio-formats-plugins" target="bio-formats-plugins.utils"/>
  </target>

  <target name="test-bio-formats-plugins" depends="jar-bio-formats-plugins, testing-deps"
    description="compile and run tests for Bio-Formats Plugins for ImageJ">
    <ant dir="components/bio-formats-plugins" target="test"/>
  </target>

  <!-- Testing framework -->

  <target name="deps-tests"
    depends="copy-jars, jar-formats-gpl,
      jar-ome-xml,
      jar-formats-api,
      jar-formats-bsd"/>

  <target name="compile-tests" depends="deps-tests"
    description="compile classes for Bio-Formats testing framework">
    <ant dir="components/test-suite" target="tests.compile"/>
  </target>

  <target name="jar-tests" depends="deps-tests"
    description="generate JAR file for Bio-Formats testing framework">
    <ant dir="components/test-suite" target="tests.jar"/>
  </target>

  <target name="findbugs-tests" depends="jar-tests"
    description="run findbugs on Bio-Formats testing framework">
    <ant dir="components/test-suite" target="tests.findbugs"/>
  </target>

  <target name="clean-tests"
    depends="clean-formats-gpl,
      clean-ome-xml,
      clean-formats-api,
      clean-formats-bsd"
    description="remove build files for Bio-Formats testing framework">
    <ant dir="components/test-suite" target="tests.clean"/>
  </target>

  <target name="test-tests" depends="jar-tests, testing-deps"
    description="compile and run tests for Bio-Formats testing framework">
    <ant dir="components/test-suite" target="test"/>
  </target>

  <!-- Turbojpeg -->

  <target name="deps-turbojpeg" depends="copy-jars"/>

  <target name="compile-turbojpeg" depends="deps-turbojpeg"
    description="compile classes for Turbojpeg Java bindings">
    <ant dir="components/forks/turbojpeg" target="turbojpeg.compile"/>
  </target>

  <target name="jar-turbojpeg" depends="deps-turbojpeg"
    description="generate JAR file for Turbojpeg Java bindings">
    <ant dir="components/forks/turbojpeg" target="jar"/>
  </target>

  <target name="clean-turbojpeg"
    description="remove build files for Turbojpeg Java bindings">
    <ant dir="components/forks/turbojpeg" target="turbojpeg.clean"/>
  </target>

  <target name="test-turbojpeg" depends="jar-turbojpeg, testing-deps"
    description="compile and run tests for Turbojpeg Java bindings">
    <ant dir="components/forks/turbojpeg" target="test"/>
  </target>

  <!-- Tool collections -->

  <target name="tools" depends="jars"
    description="generate JAR file bundles of Bio-Formats and dependencies">

    <echo>----------=========== bioformats_package ===========----------</echo>
    <ant dir="components/bundles/bioformats_package" target="bundle"/>

    <echo>----------=========== loci_tools ===========----------</echo>
    <ant dir="components/bundles/loci-tools" target="bundle"/>
  </target>

  <!-- Xsd-Fu -->
  <target name="clean-xsd-fu"
    description="remove build files for xsd-fu">
    <ant dir="components/xsd-fu" target="xsd-fu.clean"/>
  </target>

  <target name="ome-xml-src"
    description="generate sources using xsd-fu">
    <ant dir="components/ome-xml" target="generate-source"/>
  </target>

  <!-- Specification -->
  <target name="jar-specification"
    description="generate JAR file for OME-XML specification"
    depends="jar-ome-xml">
    <ant dir="components/specification" target="jar"/>
  </target>
  <target name="test-specification"
    description="compile and run tests for OME-XML specification">
    <ant dir="components/specification" target="test"/>
  </target>
  <target name="clean-specification"
    description="remove build files for OME-XML specification">
    <ant dir="components/specification" target="clean"/>
  </target>

  <!-- HACK - limit OS to *nix due to file permission issues -->
  <target name="dist-bftools" if="isUnix"
      description="generate a zip bundle of the command line tools">
    <echo>----------=========== bftools ===========----------</echo>
    <ant dir="components/bundles/bioformats_package" target="bftools"/>
  </target>

  <!-- Matlab -->
  <target name="dist-matlab"
    description="generate a zip bundle of the Matlab toolbox">
    <echo>----------=========== bfmatlab ===========----------</echo>
    <ant dir="components/bundles/bioformats_package" target="bfmatlab"/>
  </target>

  <target name="test-matlab" description="run Matlab tests" depends="tools">
    <property environment="env"/>
    <exec executable="matlab">
      <env key="MATLABPATH" value="${env.MATLABPATH}:${root.dir}/components/bio-formats/matlab:${artifact.dir}"/>
      <arg value="-nodesktop"/>
      <arg value="-nosplash"/>
      <arg value="-r"/>
      <arg value="runtests ${root.dir}/components/formats-gpl/test/matlab"/>
    </exec>
  </target>

  <!-- Octave -->
  <target name="dist-octave" description="generate an Octave package"
          depends="release-version">
    <echo>-------=========== Octave package ===========-------</echo>

    <tempfile property="temp.file" destDir="${java.io.tmpdir}"/>
    <copy file="${root.dir}/components/formats-gpl/octave/DESCRIPTION.in"
          toFile="${temp.file}">
      <filterset begintoken="$${" endtoken ="}" >
        <filter token="release.version" value="${release.version}"/>
        <filter token="DATE" value="${vcs.date}"/>
      </filterset>
    </copy>

    <tar destfile="${artifact.dir}/bioformats-octave-${release.version}.tar.gz"
         compression="gzip">
      <tarfileset dir="${root.dir}/components/formats-gpl/octave"
                  prefix="bioformats/" excludes="DESCRIPTION.in"/>
      <tarfileset file="${temp.file}" fullpath="bioformats/DESCRIPTION"/>
      <tarfileset file="${root.dir}/LICENSE.txt" fullpath="bioformats/COPYING"/>
      <tarfileset file="${root.dir}/docs/sphinx/about/whats-new.txt"
                  fullpath="bioformats/NEWS"/>
      <tarfileset dir="${root.dir}/components/formats-gpl/matlab"
                  prefix="bioformats/inst/"/>
    </tar>
    <delete file="${temp.file}"/>
  </target>

  <!-- Internal targets -->

  <target name="init"/>

  <!-- Source release -->
  <target name="release" description="zip the git release as bioformats-[dfsg-]${release.version}.zip" depends="release-version">
    <mkdir dir="${artifact.dir}"/>
    <exec executable="python" failonerror="true">
      <arg value="${root.dir}/tools/source-archive.py"/>
      <arg value="--release=bioformats"/>
      <arg value="--bioformats-shortversion=${release.shortversion}"/>
      <arg value="--bioformats-version=${release.version}"/>
      <arg value="--bioformats-vcsshortrevision=${vcs.shortrevision}"/>
      <arg value="--bioformats-vcsrevision=${vcs.revision}"/>
      <arg value="--bioformats-vcsdate=${vcs.date}"/>
      <arg value="--bioformats-vcsdate-unix=${vcs.date_unix}"/>
      <arg value="--target=${artifact.dir}"/>
    </exec>
    <exec executable="python" failonerror="true">
      <arg value="${root.dir}/tools/source-archive.py"/>
      <arg value="--release=bioformats-dfsg"/>
      <arg value="--bioformats-shortversion=${release.shortversion}"/>
      <arg value="--bioformats-version=${release.version}"/>
      <arg value="--bioformats-vcsrevision=${vcs.revision}"/>
      <arg value="--bioformats-vcsdate=${vcs.date}"/>
      <arg value="--bioformats-vcsdate-unix=${vcs.date_unix}"/>
      <arg value="--target=${artifact.dir}"/>
    </exec>
  </target>

  <target name="store-version" description="store version information in a property file" depends="release-version">
    <mkdir dir="${artifact.dir}"/>
    <delete file="${artifact.dir}/bioformats.properties"/>
    <propertyfile file="${artifact.dir}/bioformats.properties">
      <entry key="release.shortversion" value="${release.shortversion}"/>
      <entry key="release.version" value="${release.version}"/>
      <entry key="vcs.date" value="${vcs.date}"/>
      <entry key="vcs.shortrevision" value="${vcs.shortrevision}"/>
      <entry key="vcs.revision" value="${vcs.revision}"/>
      <entry key="vcs.date_unix" value="${vcs.date_unix}"/>
    </propertyfile>
  </target>

  <target name="version" description="print version information" depends="release-version">
    <echo>VERSION=${release.version}
SHORTVERSION=${release.shortversion}
VCS_DATE=${vcs.date}
VCS_SHORTREVISION=${vcs.shortrevision}
VCS_REVISION=${vcs.revision}
</echo>
  </target>

  <target name="update-copyright" description="update copyright headers">
	<property name="executable-update-copyright"
	            location="tools/update_copyright"/>
    <exec executable="${executable-update-copyright}"/>
  </target>

</project>
