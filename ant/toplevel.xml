<!--
toplevel.xml

Toplevel targets for Bio-Formats builds.
Download Apache Ant from http://ant.apache.org/.
Type "ant -p" for a list of targets.
-->

<project>
  <property name="root.dir" location="${basedir}"/>
  <import file="${root.dir}/ant/global.xml"/>
  <import file="${root.dir}/ant/version.xml"/>
  <property file="${root.dir}/ant/toplevel.properties"/>

  <!-- Global build targets -->

  <target name="compile"
    depends="compile-autogen,
      compile-formats-gpl,
      compile-jai,
      compile-formats-common,
      compile-bio-formats-plugins,
      compile-lwf-stubs,
      compile-mdbtools,
      compile-metakit,
      compile-ome-jxr,
      compile-ome-xml,
      compile-ome-poi,
      compile-formats-api,
      compile-formats-bsd,
      compile-bio-formats-tools,
      compile-tests,
      compile-turbojpeg"
    description="compile software packages"/>

  <target name="jars"
    depends="copy-jars,
      jar-autogen,
      jar-formats-gpl,
      jar-jai,
      jar-formats-common,
      jar-bio-formats-plugins,
      jar-lwf-stubs,
      jar-mdbtools,
      jar-metakit,
      jar-ome-jxr,
      jar-ome-xml,
      jar-ome-poi,
      jar-formats-api,
      jar-formats-bsd,
      jar-formats-bsd-tests,
      jar-bio-formats-tools,
      jar-specification,
      jar-tests,
      jar-turbojpeg"
    description="generate JAR files for software packages"/>

  <target name="osgi"
    depends="copy-jars,
      osgi-autogen,
      osgi-formats-gpl,
      osgi-jai,
      osgi-formats-common,
      osgi-bio-formats-plugins,
      osgi-lwf-stubs,
      osgi-mdbtools,
      osgi-metakit,
      osgi-ome-jxr,
      osgi-ome-xml,
      osgi-ome-poi,
      osgi-formats-api,
      osgi-formats-bsd,
      osgi-bio-formats-tools,
      osgi-tests,
      osgi-turbojpeg"
    description="generate OSGi bundles for software packages"/>

  <!--
  NB: Findbugs target does not test autogenerated code, forks and stubs:
    findbugs-jai
    findbugs-lwf-stubs
    findbugs-mdbtools
    findbugs-ome-xml
    findbugs-ome-poi
  -->
  <target name="findbugs"
    depends="findbugs-autogen,
      findbugs-formats-gpl,
      findbugs-formats-common,
      findbugs-bio-formats-plugins,
      findbugs-metakit,
      findbugs-formats-api,
      findbugs-formats-bsd,
      findbugs-bio-formats-tools,
      findbugs-ome-jxr,
      findbugs-tests"
    description="run findbugs on most components"/>

  <target name="clean"
    depends="
      clean-autogen,
      clean-formats-gpl,
      clean-jai,
      clean-formats-common,
      clean-bio-formats-plugins,
      clean-lwf-stubs,
      clean-mdbtools,
      clean-metakit,
      clean-ome-jxr,
      clean-ome-xml,
      clean-ome-poi,
      clean-formats-api,
      clean-formats-bsd,
      clean-bio-formats-tools,
      clean-specification,
      clean-tests,
      clean-turbojpeg,
      clean-xsd-fu,
      clean-docs-sphinx"
    description="remove all build files">
    <delete dir="${artifact.dir}"/>
    <delete dir="build"/>
  </target>

  <target name="test"
    depends="test-autogen,
      test-formats-gpl,
      test-jai,
      test-formats-common,
      test-bio-formats-plugins,
      test-lwf-stubs,
      test-mdbtools,
      test-metakit,
      test-ome-jxr,
      test-ome-xml,
      test-ome-poi,
      test-formats-api,
      test-formats-bsd,
      test-bio-formats-tools,
      test-tests,
      test-turbojpeg"
    description="test all components">
  </target>

  <target name="utils"
    depends="jars,
      utils-formats-gpl,
      utils-bio-formats-plugins,
      utils-formats-bsd"
    description="compile all extra utilities"/>

  <target name="docs" depends="jars"
    description="generate Javadocs for software packages">
    <echo>----------=========== Javadocs ===========----------</echo>
    <tstamp>
      <format property="YEAR" pattern="yyyy"/>
    </tstamp>
    <javadoc sourcepath="${merged-docs.source}"
      classpath="${merged-docs.classpath}"
      destdir="${merged-docs.dir}/api"
      maxmemory="${merged-docs.memory}"
      encoding="UTF-8"
      failonerror="true" author="true" version="true" use="true"
      nodeprecated="false" windowtitle="Bio-Formats API">
      <doctitle><![CDATA[<h1>Bio-Formats</h1>]]></doctitle>
      <bottom><![CDATA[${copyright.begin} ${YEAR} ${copyright.end}]]></bottom>
      <link href="http://docs.oracle.com/javase/6/docs/api/"/>
      <link href="http://rsbweb.nih.gov/ij/developer/api/"/>
      <!--<link href="http://www.jdocs.com/formlayout/1.0.4/api/"/>-->
      <!--<link href="http://www.jdocs.com/looks/1.2.2/api/"/>-->
    </javadoc>
  </target>

  <target name="docs-zip" depends="docs"
    description="generate a Zip containing the Javadocs">
    <zip destfile="${artifact.dir}/bio-formats-javadocs.zip"
      basedir="${merged-docs.dir}"/>
  </target>

  <target name="docs-sphinx"
    description="generate Sphinx HTML and PDF documentation">
    <echo>----------=========== Sphinx HTML ===========----------</echo>
    <ant dir="docs/sphinx" target="html"/>
    <echo>----------=========== Sphinx PDF ===========----------</echo>
    <ant dir="docs/sphinx" target="pdf"/>
  </target>

  <target name="clean-docs-sphinx">
    <ant dir="docs/sphinx" target="clean"/>
  </target>

  <target name="copy-jars">
    <!-- copy third party JARs into artifacts folder -->
    <!-- necessary for runtime classpath dependencies to function properly -->
    <copy todir="${artifact.dir}" preservelastmodified="true">
      <fileset dir="${lib.dir}" includes="*.jar"/>
    </copy>
  </target>

  <target name="testing-deps"
          description="performs any work necessary for testing"
          depends="copy-jars"/>

  <!-- JAI Image I/O Tools library -->

  <target name="deps-jai" depends="copy-jars" />

  <target name="compile-jai" depends="deps-jai"
    description="compile classes for JAI Image I/O Tools library">
    <ant dir="components/forks/jai" target="jai.compile"/>
  </target>

  <target name="jar-jai" depends="deps-jai"
    description="generate JAR file for JAI Image I/O Tools library">
    <ant dir="components/forks/jai" target="jai.jar"/>
  </target>

  <target name="osgi-jai" depends="jar-jai"
    description="generate OSGi bundle for JAI Image I/O Tools library">
    <ant dir="components/forks/jai" target="jai.osgi"/>
  </target>

  <target name="findbugs-jai" depends="jar-jai"
    description="run findbugs on JAI Image I/O Tools library">
    <ant dir="components/forks/jai" target="jai.findbugs"/>
  </target>

  <target name="clean-jai"
    description="remove build files for JAI Image I/O Tools library">
    <ant dir="components/forks/jai" target="jai.clean"/>
  </target>

  <target name="test-jai" depends="jar-jai, testing-deps"
    description="compile and run tests for JAI Image I/O Tools library">
    <ant dir="components/forks/jai" target="test"/>
  </target>

  <!-- Apache POI Java library -->

  <target name="deps-ome-poi"
    depends="copy-jars, jar-formats-common"/>

  <target name="compile-ome-poi" depends="deps-ome-poi"
    description="compile classes for Apache POI library">
    <ant dir="components/forks/poi" target="ome-poi.compile"/>
  </target>

  <target name="jar-ome-poi" depends="deps-ome-poi"
    description="generate JAR file for Apache POI library">
    <ant dir="components/forks/poi" target="ome-poi.jar"/>
  </target>

  <target name="osgi-ome-poi" depends="jar-ome-poi"
    description="generate OSGi bundle for Apache POI library">
    <ant dir="components/forks/poi" target="ome-poi.osgi"/>
  </target>

  <target name="findbugs-ome-poi" depends="jar-ome-poi"
    description="run findbugs on Apache POI library">
    <ant dir="components/forks/poi" target="ome-poi.findbugs"/>
  </target>

  <target name="clean-ome-poi"
    depends="clean-formats-common"
    description="remove build files for Apache POI library">
    <ant dir="components/forks/poi" target="ome-poi.clean"/>
  </target>

  <target name="test-ome-poi" depends="jar-ome-poi, testing-deps"
    description="compile and run tests for Apache POI library">
    <ant dir="components/forks/poi" target="test"/>
  </target>

  <!-- MDB Tools Java library -->

  <target name="deps-mdbtools" depends="copy-jars" />

  <target name="compile-mdbtools" depends="deps-mdbtools"
    description="compile classes for MDB Tools Java library">
    <ant dir="components/forks/mdbtools" target="mdbtools.compile"/>
  </target>

  <target name="jar-mdbtools" depends="deps-mdbtools"
    description="generate JAR file for MDB Tools Java library">
    <ant dir="components/forks/mdbtools" target="mdbtools.jar"/>
  </target>

  <target name="osgi-mdbtools" depends="jar-mdbtools"
    description="generate OSGi bundle for MDB Tools Java library">
    <ant dir="components/forks/mdbtools" target="mdbtools.osgi"/>
  </target>

  <target name="findbugs-mdbtools" depends="jar-mdbtools"
    description="run findbugs on MDB Tools Java library">
    <ant dir="components/forks/mdbtools" target="mdbtools.findbugs"/>
  </target>

  <target name="clean-mdbtools"
    description="remove build files for MDB Tools Java library">
    <ant dir="components/forks/mdbtools" target="mdbtools.clean"/>
  </target>

  <target name="test-mdbtools" depends="jar-mdbtools, testing-deps"
    description="compile and run tests for MDB Tools Java library">
    <ant dir="components/forks/mdbtools" target="test"/>
  </target>

  <!-- Metakit library -->

  <target name="deps-metakit"
    depends="copy-jars, jar-formats-common"/>

  <target name="compile-metakit" depends="deps-metakit"
    description="compile classes for Metakit Java library">
    <ant dir="components/metakit" target="metakit.compile"/>
  </target>

  <target name="jar-metakit" depends="deps-metakit"
    description="generate JAR file for Metakit Java library">
    <ant dir="components/metakit" target="metakit.jar"/>
  </target>

  <target name="osgi-metakit" depends="jar-metakit"
    description="generate OSGi bundle for Metakit Java library">
    <ant dir="components/metakit" target="metakit.osgi"/>
  </target>

  <target name="findbugs-metakit" depends="jar-metakit"
    description="run findbugs on Metakit Java library">
    <ant dir="components/metakit" target="metakit.findbugs"/>
  </target>

  <target name="clean-metakit"
    depends="clean-formats-common"
    description="remove build files for Metakit Java library">
    <ant dir="components/metakit" target="metakit.clean"/>
  </target>

  <target name="test-metakit" depends="jar-metakit, testing-deps"
    description="compile and run tests for Metakit Java library">
    <ant dir="components/metakit" target="test"/>
  </target>

  <!-- OME JPEG XR library -->

  <target name="deps-ome-jxr"
    depends="jar-formats-common, jar-formats-bsd"/>

  <target name="compile-ome-jxr" depends="deps-ome-jxr"
    description="compile classes for OME JPEG XR Java library">
    <ant dir="components/ome-jxr" target="ome-jxr.compile"/>
  </target>

  <target name="jar-ome-jxr" depends="deps-ome-jxr"
    description="generate JAR file for OME JPEG XR Java library">
    <ant dir="components/ome-jxr" target="ome-jxr.jar"/>
  </target>

  <target name="osgi-ome-jxr" depends="jar-ome-jxr"
    description="generate OSGi bundle for OME JPEG XR Java library">
    <ant dir="components/ome-jxr" target="ome-jxr.osgi"/>
  </target>

  <target name="findbugs-ome-jxr" depends="jar-ome-jxr"
    description="run findbugs on OME JPEG XR Java library">
    <ant dir="components/ome-jxr" target="ome-jxr.findbugs"/>
  </target>

  <target name="clean-ome-jxr"
    depends="clean-formats-common"
    description="remove build files for OME JPEG XR Java library">
    <ant dir="components/ome-jxr" target="ome-jxr.clean"/>
  </target>

  <target name="test-ome-jxr" depends="jar-ome-jxr, testing-deps"
    description="compile and run tests for OME JPEG XR Java library">
    <ant dir="components/ome-jxr" target="test"/>
  </target>

  <!-- OME-XML Java library -->

  <target name="deps-ome-xml" depends="copy-jars, jar-formats-common" />

  <target name="compile-ome-xml" depends="deps-ome-xml"
    description="compile classes for OME-XML Java library">
    <ant dir="components/ome-xml" target="ome-xml.compile"/>
  </target>

  <target name="jar-ome-xml" depends="deps-ome-xml"
    description="generate JAR file for OME-XML Java library">
    <ant dir="components/ome-xml" target="ome-xml.jar"/>
  </target>

  <target name="osgi-ome-xml" depends="jar-ome-xml"
    description="generate OSGi bundle for OME-XML Java library">
    <ant dir="components/ome-xml" target="ome-xml.osgi"/>
  </target>

  <target name="findbugs-ome-xml" depends="jar-ome-xml"
    description="run findbugs on OME-XML Java library">
    <ant dir="components/ome-xml" target="ome-xml.findbugs"/>
  </target>

  <target name="clean-ome-xml"
    description="remove build files for OME-XML Java library">
    <ant dir="components/ome-xml" target="ome-xml.clean"/>
  </target>

  <target name="test-ome-xml" depends="jar-ome-xml, testing-deps"
    description="compile and run tests for OME-XML Java library">
    <ant dir="components/ome-xml" target="test"/>
  </target>

  <!-- LWF stubs -->

  <target name="deps-lwf-stubs" depends="copy-jars" />

  <target name="compile-lwf-stubs" depends="deps-lwf-stubs"
    description="compile classes for LWF stubs">
    <ant dir="components/stubs/lwf-stubs" target="lwf-stubs.compile"/>
  </target>

  <target name="jar-lwf-stubs" depends="deps-lwf-stubs"
    description="generate JAR file for LWF stubs">
    <ant dir="components/stubs/lwf-stubs" target="lwf-stubs.jar"/>
  </target>

  <target name="osgi-lwf-stubs" depends="jar-lwf-stubs"
    description="generate OSGi bundle for LWF stubs">
    <ant dir="components/stubs/lwf-stubs" target="lwf-stubs.osgi"/>
  </target>

  <target name="findbugs-lwf-stubs" depends="jar-lwf-stubs"
    description="run findbugs on LWF stubs">
    <ant dir="components/stubs/lwf-stubs" target="lwf-stubs.findbugs"/>
  </target>

  <target name="clean-lwf-stubs"
    description="remove build files for LWF stubs">
    <ant dir="components/stubs/lwf-stubs" target="lwf-stubs.clean"/>
  </target>

  <target name="test-lwf-stubs" depends="jar-lwf-stubs, testing-deps"
    description="compile and run tests for LWF stubs">
    <ant dir="components/stubs/lwf-stubs" target="test"/>
  </target>

  <!-- API -->

  <target name="deps-formats-api"
    depends="copy-jars, jar-formats-common,
      jar-ome-xml,
      jar-specification"/>

  <target name="compile-formats-api" depends="deps-formats-api"
    description="compile classes for reader and writer APIs">
    <ant dir="components/formats-api" target="formats-api.compile"/>
  </target>

  <target name="jar-formats-api" depends="deps-formats-api"
    description="generate JAR file for reader and writer APIs">
    <ant dir="components/formats-api" target="formats-api.jar"/>
  </target>

  <target name="osgi-formats-api" depends="jar-formats-api"
    description="generate OSGi bundle for reader and writer APIs">
    <ant dir="components/formats-api" target="formats-api.osgi"/>
  </target>

  <target name="findbugs-formats-api" depends="jar-formats-api"
    description="run findbugs on reader and writer APIs">
    <ant dir="components/formats-api" target="formats-api.findbugs"/>
  </target>

  <target name="clean-formats-api"
    depends="clean-formats-common,
      clean-ome-xml"
    description="remove build files for reader and writer APIs">
    <ant dir="components/formats-api" target="formats-api.clean"/>
  </target>

  <target name="utils-formats-api" depends="jar-formats-api"
    description="compile extra utilities for reader and writer APIs">
    <ant dir="components/formats-api" target="formats-api.utils"/>
  </target>

  <target name="test-formats-api" depends="jar-formats-api, testing-deps"
    description="compile and run tests for reader and writer APIs">
    <ant dir="components/formats-api" target="test"/>
  </target>

  <!-- BSD Implentation -->

  <target name="deps-formats-bsd"
    depends="copy-jars, jar-jai,
      jar-formats-common,
      jar-formats-api,
      jar-lwf-stubs,
      jar-ome-xml,
      jar-specification,
      jar-turbojpeg"/>

  <target name="compile-formats-bsd" depends="deps-formats-bsd"
    description="compile classes for BSD format implementations">
    <ant dir="components/formats-bsd" target="formats-bsd.compile"/>
  </target>

  <target name="jar-formats-bsd" depends="deps-formats-bsd"
    description="generate JAR file for BSD format implementations">
    <ant dir="components/formats-bsd" target="formats-bsd.jar"/>
  </target>

  <target name="osgi-formats-bsd" depends="jar-formats-bsd"
    description="generate OSGi bundle for BSD format implementations">
    <ant dir="components/formats-bsd" target="formats-bsd.osgi"/>
  </target>

  <target name="findbugs-formats-bsd" depends="jar-formats-bsd"
    description="run findbugs on BSD format implementations">
    <ant dir="components/formats-bsd" target="formats-bsd.findbugs"/>
  </target>

  <target name="clean-formats-bsd"
    depends="clean-jai,
      clean-formats-common,
      clean-lwf-stubs,
      clean-ome-xml"
    description="remove build files for BSD format implementations">
    <ant dir="components/formats-bsd" target="formats-bsd.clean"/>
  </target>

  <target name="utils-formats-bsd" depends="jar-formats-bsd"
    description="compile extra utilities for BSD format implementations">
    <ant dir="components/formats-bsd" target="formats-bsd.utils"/>
  </target>

  <target name="test-formats-bsd" depends="jar-formats-bsd, testing-deps"
    description="compile and run tests for BSD format implementations">
    <ant dir="components/formats-bsd" target="test"/>
  </target>

  <!-- Bio-Formats command line tools -->

  <target name="deps-bio-formats-tools"
    depends="copy-jars, jar-jai,
      jar-lwf-stubs,
      jar-ome-xml,
      jar-formats-api,
      jar-formats-gpl,
      jar-formats-bsd"/>

  <target name="compile-bio-formats-tools" depends="deps-bio-formats-tools"
    description="compile classes for Bio-Formats tools">
    <ant dir="components/bio-formats-tools" target="bio-formats-tools.compile"/>
  </target>

  <target name="jar-bio-formats-tools" depends="deps-bio-formats-tools"
    description="generate JAR file for Bio-Formats tools">
    <ant dir="components/bio-formats-tools" target="bio-formats-tools.jar"/>
  </target>

  <target name="osgi-bio-formats-tools" depends="jar-bio-formats-tools"
    description="generate OSGi bundle for Bio-Formats tools">
    <ant dir="components/bio-formats-tools" target="bio-formats-tools.osgi"/>
  </target>

  <target name="findbugs-bio-formats-tools" depends="jar-bio-formats-tools"
    description="run findbugs on Bio-Formats tools">
    <ant dir="components/bio-formats-tools" target="bio-formats-tools.findbugs"/>
  </target>

  <target name="clean-bio-formats-tools"
    depends="clean-jai,
      clean-lwf-stubs,
      clean-ome-xml,
      clean-formats-api,
      clean-formats-bsd,
      clean-formats-gpl"
    description="remove build files for Bio-Formats tools">
    <ant dir="components/bio-formats-tools" target="bio-formats-tools.clean"/>
  </target>

  <target name="test-bio-formats-tools" depends="jar-bio-formats-tools, testing-deps"
    description="compile and run tests for Bio-Formats tools">
    <ant dir="components/bio-formats-tools" target="test"/>
  </target>

  <target name="jar-formats-bsd-tests"
    description="generate jar of BSD format spec tests">
      <ant dir="components/formats-bsd" target="jar-formats-bsd-tests"/>
  </target>

  <!-- Bio-Formats -->

  <target name="deps-formats-gpl"
    depends="copy-jars, jar-formats-common,
      jar-mdbtools,
      jar-metakit,
      jar-ome-jxr,
      jar-ome-xml,
      jar-ome-poi,
      jar-formats-api,
      jar-formats-bsd"/>

  <target name="compile-formats-gpl" depends="deps-formats-gpl"
    description="compile classes for Bio-Formats">
    <ant dir="components/formats-gpl" target="formats-gpl.compile"/>
  </target>

  <target name="jar-formats-gpl" depends="deps-formats-gpl"
    description="generate JAR file for Bio-Formats">
    <ant dir="components/formats-gpl" target="formats-gpl.jar"/>
  </target>

  <target name="osgi-formats-gpl" depends="jar-formats-gpl"
    description="generate OSGi bundle for Bio-Formats">
    <ant dir="components/formats-gpl" target="formats-gpl.osgi"/>
  </target>

  <target name="findbugs-formats-gpl" depends="jar-formats-gpl"
    description="run findbugs on Bio-Formats">
    <ant dir="components/formats-gpl" target="formats-gpl.findbugs"/>
  </target>

  <target name="clean-formats-gpl"
    depends="clean-formats-common,
      clean-mdbtools,
      clean-metakit,
      clean-ome-jxr,
      clean-ome-xml,
      clean-ome-poi,
      clean-formats-api,
      clean-formats-bsd"
    description="remove build files for Bio-Formats">
    <ant dir="components/formats-gpl" target="formats-gpl.clean"/>
  </target>

  <target name="utils-formats-gpl" depends="jar-formats-gpl"
    description="compile extra utilities for Bio-Formats">
    <ant dir="components/formats-gpl" target="formats-gpl.utils"/>
  </target>

  <target name="test-formats-gpl" depends="jar-formats-gpl, testing-deps"
    description="compile and run tests for Bio-Formats">
    <ant dir="components/formats-gpl" target="test"/>
  </target>

  <!-- Formats Common  -->

  <target name="deps-formats-common" depends="copy-jars" />

  <target name="compile-formats-common" depends="deps-formats-common"
    description="compile classes for Formats Common ">
    <ant dir="components/formats-common" target="formats-common.compile"/>
  </target>

  <target name="jar-formats-common" depends="deps-formats-common"
    description="generate JAR file for Formats Common ">
    <ant dir="components/formats-common" target="formats-common.jar"/>
  </target>

  <target name="osgi-formats-common" depends="jar-formats-common"
    description="generate OSGi bundle for Formats Common ">
    <ant dir="components/formats-common" target="formats-common.osgi"/>
  </target>

  <target name="findbugs-formats-common" depends="jar-formats-common"
    description="run findbugs on Formats Common ">
    <ant dir="components/formats-common" target="formats-common.findbugs"/>
  </target>

  <target name="clean-formats-common"
    description="remove build files for Formats Common ">
    <ant dir="components/formats-common" target="formats-common.clean"/>
  </target>

  <target name="test-formats-common" depends="jar-formats-common"
    description="compile and run tests for Formats Common ">
    <ant dir="components/formats-common" target="test"/>
  </target>

  <!-- Bio-Formats autogen -->

  <target name="deps-autogen"
    depends="copy-jars, jar-formats-api,jar-formats-bsd"/>

  <target name="compile-autogen" depends="deps-autogen"
    description="compile classes for Bio-Formats autogen">
    <ant dir="components/autogen" target="autogen.compile"/>
  </target>

  <target name="jar-autogen" depends="deps-autogen"
    description="generate JAR file for Bio-Formats autogen">
    <ant dir="components/autogen" target="autogen.jar"/>
  </target>

  <target name="osgi-autogen" depends="jar-autogen"
    description="generate OSGi bundle for Bio-Formats autogen">
    <ant dir="components/autogen" target="autogen.osgi"/>
  </target>

  <target name="findbugs-autogen" depends="jar-autogen"
    description="run findbugs on Bio-Formats autogen">
    <ant dir="components/autogen" target="autogen.findbugs"/>
  </target>

  <target name="clean-autogen"
    depends="clean-formats-api,clean-formats-bsd"
    description="remove build files for Bio-Formats autogen">
    <ant dir="components/autogen" target="autogen.clean"/>
  </target>

  <target name="test-autogen" depends="jar-autogen, testing-deps"
    description="compile and run tests for Bio-Formats autogen">
    <ant dir="components/autogen" target="test"/>
  </target>

  <!-- Bio-Formats Plugins for ImageJ -->

  <target name="deps-bio-formats-plugins"
    depends="copy-jars, jar-formats-gpl,
      jar-ome-xml,
      jar-formats-api,
      jar-formats-bsd"/>

  <target name="compile-bio-formats-plugins" depends="deps-bio-formats-plugins"
    description="compile classes for Bio-Formats Plugins for ImageJ">
    <ant dir="components/bio-formats-plugins" target="bio-formats-plugins.compile"/>
  </target>

  <target name="jar-bio-formats-plugins" depends="deps-bio-formats-plugins"
    description="generate JAR file for Bio-Formats Plugins for ImageJ">
    <ant dir="components/bio-formats-plugins" target="bio-formats-plugins.jar"/>
  </target>

  <target name="osgi-bio-formats-plugins" depends="jar-bio-formats-plugins"
    description="generate OSGi bundle for Bio-Formats Plugins for ImageJ">
    <ant dir="components/bio-formats-plugins" target="bio-formats-plugins.osgi"/>
  </target>

  <target name="findbugs-bio-formats-plugins" depends="jar-bio-formats-plugins"
    description="run findbugs on Bio-Formats Plugins for ImageJ">
    <ant dir="components/bio-formats-plugins" target="bio-formats-plugins.findbugs"/>
  </target>

  <target name="clean-bio-formats-plugins"
    depends="clean-formats-gpl,
      clean-ome-xml,
      clean-formats-api,
      clean-formats-bsd"
    description="remove build files for Bio-Formats Plugins for ImageJ">
    <ant dir="components/bio-formats-plugins" target="bio-formats-plugins.clean"/>
  </target>

  <target name="utils-bio-formats-plugins" depends="jar-bio-formats-plugins"
    description="compile extra utilities for Bio-Formats Plugins for ImageJ">
    <ant dir="components/bio-formats-plugins" target="bio-formats-plugins.utils"/>
  </target>

  <target name="test-bio-formats-plugins" depends="jar-bio-formats-plugins, testing-deps"
    description="compile and run tests for Bio-Formats Plugins for ImageJ">
    <ant dir="components/bio-formats-plugins" target="test"/>
  </target>

  <!-- Testing framework -->

  <target name="deps-tests"
    depends="copy-jars, jar-formats-gpl,
      jar-ome-xml,
      jar-formats-api,
      jar-formats-bsd"/>

  <target name="compile-tests" depends="deps-tests"
    description="compile classes for Bio-Formats testing framework">
    <ant dir="components/test-suite" target="tests.compile"/>
  </target>

  <target name="jar-tests" depends="deps-tests"
    description="generate JAR file for Bio-Formats testing framework">
    <ant dir="components/test-suite" target="tests.jar"/>
  </target>

  <target name="osgi-tests" depends="jar-tests"
    description="generate OSGi bundle for Bio-Formats testing framework">
    <ant dir="components/test-suite" target="tests.osgi"/>
  </target>

  <target name="findbugs-tests" depends="jar-tests"
    description="run findbugs on Bio-Formats testing framework">
    <ant dir="components/test-suite" target="tests.findbugs"/>
  </target>

  <target name="clean-tests"
    depends="clean-formats-gpl,
      clean-ome-xml,
      clean-formats-api,
      clean-formats-bsd"
    description="remove build files for Bio-Formats testing framework">
    <ant dir="components/test-suite" target="tests.clean"/>
  </target>

  <target name="test-tests" depends="jar-tests, testing-deps"
    description="compile and run tests for Bio-Formats testing framework">
    <ant dir="components/test-suite" target="test"/>
  </target>

  <!-- Turbojpeg -->

  <target name="deps-turbojpeg" depends="copy-jars"/>

  <target name="compile-turbojpeg" depends="deps-turbojpeg"
    description="compile classes for Turbojpeg Java bindings">
    <ant dir="components/forks/turbojpeg" target="turbojpeg.compile"/>
  </target>

  <target name="jar-turbojpeg" depends="deps-turbojpeg"
    description="generate JAR file for Turbojpeg Java bindings">
    <ant dir="components/forks/turbojpeg" target="jar"/>
  </target>

  <target name="osgi-turbojpeg" depends="jar-turbojpeg"
    description="generate OSGi bundle for Turbojpeg Java bindings">
    <ant dir="components/forks/turbojpeg" target="turbojpeg.osgi"/>
  </target>

  <target name="clean-turbojpeg"
    description="remove build files for Turbojpeg Java bindings">
    <ant dir="components/forks/turbojpeg" target="turbojpeg.clean"/>
  </target>

  <target name="test-turbojpeg" depends="jar-turbojpeg, testing-deps"
    description="compile and run tests for Turbojpeg Java bindings">
    <ant dir="components/forks/turbojpeg" target="test"/>
  </target>

  <!-- Tool collections -->

  <target name="tools"
    depends="copy-jars,
      jar-jai,
      jar-bio-formats-plugins,
      jar-mdbtools,
      jar-metakit,
      jar-ome-jxr,
      jar-ome-xml,
      jar-ome-poi,
      jar-formats-api,
      jar-formats-bsd,
      jar-bio-formats-tools,
      jar-specification"
    description="create JAR file bundles of Bio-Formats and dependencies">

    <echo>----------=========== bioformats_package ===========----------</echo>
    <for list="${package.libraries}" param="jar" delimiter=" " trim="true">
      <sequential>
        <unjar src="${artifact.dir}/@{jar}" dest="${package.dir}">
          <patternset>
            <exclude name="META-INF/*"/>
            <exclude name="META-INF/maven/**"/>
            <exclude name="META-INF/services/**"/>
          </patternset>
        </unjar>
      </sequential>
    </for>
    <jar jarfile="${package.jar}" basedir="${package.dir}">
      <manifest>
        <attribute name="Main-Class" value="${package.main}"/>
      </manifest>
    </jar>
    <delete dir="${package.dir}"/>

    <echo>----------=========== loci_tools ===========----------</echo>
    <for list="${loci-tools.libraries}" param="jar" delimiter=" " trim="true">
      <sequential>
        <unjar src="${artifact.dir}/@{jar}" dest="${loci-tools.dir}">
          <patternset>
            <exclude name="META-INF/*"/>
            <exclude name="META-INF/maven/**"/>
            <exclude name="META-INF/services/**"/>
          </patternset>
        </unjar>
      </sequential>
    </for>
    <jar jarfile="${loci-tools.jar}" basedir="${loci-tools.dir}">
      <manifest>
        <attribute name="Main-Class" value="${loci-tools.main}"/>
      </manifest>
    </jar>
    <delete dir="${loci-tools.dir}"/>
  </target>

  <target name="tools-ome"
    depends="copy-jars"
    description="create JAR file encompassing several OME tools">
    <echo>----------=========== ome_tools ===========----------</echo>
    <for list="${ome-tools.libraries}" param="jar" delimiter=" " trim="true">
      <sequential>
        <unjar src="${artifact.dir}/@{jar}" dest="${ome-tools.dir}">
          <patternset>
            <exclude name="META-INF/*"/>
            <exclude name="META-INF/maven/**"/>
            <exclude name="META-INF/services/**"/>
          </patternset>
        </unjar>
      </sequential>
    </for>
    <jar jarfile="${ome-tools.jar}" basedir="${ome-tools.dir}">
      <manifest>
        <attribute name="Main-Class" value="${ome-tools.main}"/>
      </manifest>
    </jar>
    <delete dir="${ome-tools.dir}"/>
  </target>

  <!-- Xsd-Fu -->
  <target name="clean-xsd-fu"
    description="remove build files for Xsd-Fu">
    <ant dir="components/xsd-fu" target="xsd-fu.clean"/>
  </target>

  <target name="ome-xml-src"
    description="Generate sources using Xsd-Fu">
    <ant dir="components/ome-xml" target="generate-source"/>
  </target>

  <target name="metadata-src"
    description="Generate sources using Xsd-Fu">
    <ant dir="components/formats-bsd" target="generate-source"/>
  </target>

  <!-- Specification -->
  <target name="jar-specification"
    description="create jar for Specification"
    depends="jar-ome-xml">
    <ant dir="components/specification" target="jar"/>
  </target>
  <target name="test-specification"
    description="run tests for Specification">
    <ant dir="components/specification" target="test"/>
  </target>
  <target name="clean-specification"
    description="remove build files for Specification">
    <ant dir="components/specification" target="clean"/>
  </target>

  <!-- HACK - limit OS to *nix due to file permission issues -->
  <target name="dist-bftools" if="isUnix" description="zip the command line tools bundle">
    <echo>----------=========== bftools ===========----------</echo>
    <!--
    <zip destfile="${artifact.dir}/bftools.zip"
      basedir="${bftools.dir}">
      <patternset>
        <exclude name="*.jar"/>
      </patternset>
    </zip>
    -->
    <zip destfile="${artifact.dir}/bftools.zip">
      <zipfileset dir="${bftools.dir}" includes="${bftools.files}"
        prefix="bftools"/>
      <zipfileset dir="${bftools.dir}" includes="${bftools.execfiles}"
        prefix="bftools" filemode="751"/>
      <zipfileset file="${package.jar}" prefix="bftools"/>
    </zip>

  </target>

  <!-- Matlab -->
  <target name="dist-matlab" description="zip the Matlab functions bundle" depends="tools">
    <echo>----------=========== bfmatlab ===========----------</echo>
    <zip destfile="${artifact.dir}/bfmatlab.zip">
      <zipfileset dir="${root.dir}/components/formats-gpl/matlab" includes="**/*" prefix="bfmatlab"/>
      <zipfileset file="${package.jar}" prefix="bfmatlab"/>
    </zip>
  </target>

  <target name="test-matlab" description="run Matlab tests"
	depends="tools">

    <property environment="env"/>
    <exec executable="matlab">
      <env key="MATLABPATH" value="${env.MATLABPATH}:${root.dir}/components/bio-formats/matlab:${artifact.dir}"/>
      <arg value="-nodesktop"/>
      <arg value="-nosplash"/>
      <arg value="-r"/>
      <arg value="runtests ${root.dir}/components/formats-gpl/test/matlab"/>
    </exec>
  </target>

  <!-- Internal targets -->

  <target name="init"/>

  <!-- Source release -->
  <target name="release" description="Zip the git release as bioformats-${release.version}.zip" depends="release-version">
    <mkdir dir="${artifact.dir}"/>
    <exec executable="python" failonerror="true">
      <arg value="${root.dir}/tools/source-archive"/>
      <arg value="--release=bioformats"/>
      <arg value="--bioformats-shortversion=${release.shortversion}"/>
      <arg value="--bioformats-version=${release.version}"/>
      <arg value="--bioformats-vcsrevision=${vcs.revision}"/>
      <arg value="--bioformats-vcsdate=${vcs.date}"/>
      <arg value="--bioformats-vcsdate-unix=${vcs.date_unix}"/>
      <arg value="--target=${artifact.dir}"/>
    </exec>
  </target>

  <target name="version" description="Print version information" depends="release-version">
    <echo>VERSION=${release.version}
SHORTVERSION=${release.version}
VCS_DATE=${vcs.date}
VCS_REVISION=${vcs.revision}
</echo>
  </target>

</project>
