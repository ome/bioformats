<!--
toplevel.xml

Toplevel targets for Bio-Formats builds.
Download Apache Ant from http://ant.apache.org/.
Type "ant -p" for a list of targets.
-->

<project>
  <property name="root.dir" location="${basedir}"/>
  <import file="${root.dir}/ant/global.xml"/>
  <property file="${root.dir}/ant/toplevel.properties"/>

  <!-- Global build targets -->

  <target name="compile"
    depends="compile-autogen,
      compile-common,
      compile-formats,
      compile-jai,
      compile-loci-plugins,
      compile-lwf-stubs,
      compile-mdbtools,
      compile-metakit,
      compile-ome-editor,
      compile-ome-io,
      compile-ome-notes,
      compile-ome-plugins,
      compile-ome-xml,
      compile-poi-loci,
      compile-scifio,
      compile-scifio-tools,
      compile-tests"
    description="compile LOCI software packages"/>

  <target name="jars"
    depends="copy-jars,
      jar-autogen,
      jar-common,
      jar-formats,
      jar-jai,
      jar-loci-plugins,
      jar-lwf-stubs,
      jar-mdbtools,
      jar-metakit,
      jar-ome-editor,
      jar-ome-io,
      jar-ome-notes,
      jar-ome-plugins,
      jar-ome-xml,
      jar-poi-loci,
      jar-scifio,
      jar-scifio-tools,
      jar-tests"
    description="generate JAR files for LOCI software packages"/>

  <target name="osgi"
    depends="copy-jars,
      osgi-autogen,
      osgi-common,
      osgi-formats,
      osgi-jai,
      osgi-loci-plugins,
      osgi-lwf-stubs,
      osgi-mdbtools,
      osgi-metakit,
      osgi-ome-editor,
      osgi-ome-io,
      osgi-ome-notes,
      osgi-ome-plugins,
      osgi-ome-xml,
      osgi-poi-loci,
      osgi-scifio,
      osgi-scifio-tools,
      osgi-tests"
    description="generate OSGi bundles for LOCI software packages"/>

  <!--
  NB: Findbugs target does not test autogenerated code, forks, legacy and stubs:
    findbugs-jai
    findbugs-lwf-stubs
    findbugs-mdbtools
    findbugs-ome-editor
    findbugs-ome-notes
    findbugs-ome-xml
    findbugs-poi-loci
  -->
  <target name="findbugs"
    depends="findbugs-autogen,
      findbugs-common,
      findbugs-formats,
      findbugs-loci-plugins,
      findbugs-metakit,
      findbugs-ome-io,
      findbugs-ome-plugins,
      findbugs-scifio,
      findbugs-scifio-tools,
      findbugs-tests"
    description="run findbugs on most components"/>

  <target name="clean"
    depends="
      clean-autogen,
      clean-common,
      clean-formats,
      clean-jai,
      clean-loci-plugins,
      clean-lwf-stubs,
      clean-mdbtools,
      clean-metakit,
      clean-ome-editor,
      clean-ome-io,
      clean-ome-notes,
      clean-ome-plugins,
      clean-ome-xml,
      clean-poi-loci,
      clean-scifio,
      clean-scifio-tools,
      clean-tests"
    description="remove all build files">
    <delete dir="${artifact.dir}"/>
    <delete dir="build"/>
  </target>

  <target name="test"
    depends="test-autogen,
      test-common,
      test-formats,
      test-jai,
      test-loci-plugins,
      test-lwf-stubs,
      test-mdbtools,
      test-metakit,
      test-ome-editor,
      test-ome-io,
      test-ome-notes,
      test-ome-plugins,
      test-ome-xml,
      test-poi-loci,
      test-scifio,
      test-scifio-tools,
      test-tests"
    description="test all components">
  </target>

  <target name="scan-deps">
    <exec dir="${root.dir}" executable="perl" failonerror="true">
      <arg value="scan-deps.pl"/>
      <arg value="-nosummary"/>
    </exec>
  </target>

  <target name="utils"
    depends="jars,
      utils-common,
      utils-formats,
      utils-loci-plugins"
    description="compile all extra utilities"/>

  <target name="docs" depends="jars"
    description="generate Javadocs for LOCI software packages">
    <echo>----------=========== Javadocs ===========----------</echo>
    <tstamp>
      <format property="YEAR" pattern="yyyy"/>
    </tstamp>
    <javadoc sourcepath="${merged-docs.source}"
      classpath="${merged-docs.classpath}"
      destdir="${merged-docs.dir}/api"
      maxmemory="${merged-docs.memory}"
      failonerror="true" author="true" version="true" use="true"
      nodeprecated="false" windowtitle="Bio-Formats API">
      <doctitle><![CDATA[<h1>Bio-Formats</h1>]]></doctitle>
      <bottom><![CDATA[${copyright.begin} ${YEAR} ${copyright.end}]]></bottom>
      <link href="http://java.sun.com/j2se/1.5.0/docs/api/"/>
      <link href="http://hudson.openmicroscopy.org.uk/job/OMEJAVA/javadoc/"/>
      <link href="http://rsbweb.nih.gov/ij/developer/api/"/>
      <!--<link href="http://www.jdocs.com/formlayout/1.0.4/api/"/>-->
      <!--<link href="http://www.jdocs.com/looks/1.2.2/api/"/>-->
    </javadoc>
  </target>

  <target name="docs-zip" depends="docs"
    description="generate a Zip containing the Javadocs">
    <zip destfile="${artifact.dir}/bio-formats-javadocs.zip"
      basedir="${merged-docs.dir}"/>
  </target>

  <target name="copy-jars">
    <!-- copy third party JARs into artifacts folder -->
    <!-- necessary for runtime classpath dependencies to function properly -->
    <copy todir="${artifact.dir}" preservelastmodified="true">
      <fileset dir="${lib.dir}" includes="*.jar"/>
    </copy>
  </target>

  <target name="testing-deps"
          description="performs any work necessary for testing"
          depends="copy-jars"/>

  <!-- LOCI common library -->

  <target name="deps-common"/>

  <target name="compile-common" depends="deps-common"
    description="compile classes for LOCI common library">
    <ant dir="components/common" target="common.compile"/>
  </target>

  <target name="jar-common" depends="deps-common"
    description="generate JAR file for LOCI common library">
    <ant dir="components/common" target="common.jar"/>
  </target>

  <target name="osgi-common" depends="jar-common"
    description="generate OSGi bundle for LOCI common library">
    <ant dir="components/common" target="common.osgi"/>
  </target>

  <target name="findbugs-common" depends="jar-common"
    description="run findbugs on LOCI common library">
    <ant dir="components/common" target="common.findbugs"/>
  </target>

  <target name="clean-common"
    description="remove build files for LOCI common library">
    <ant dir="components/common" target="common.clean"/>
  </target>

  <target name="utils-common" depends="jar-common"
    description="compile extra utilities for LOCI common library">
    <ant dir="components/common" target="common.utils"/>
  </target>

  <target name="test-common" depends="jar-common, testing-deps"
    description="compile and run tests for LOCI common library">
    <ant dir="components/common" target="test"/>
  </target>

  <!-- JAI Image I/O Tools library -->

  <target name="deps-jai"/>

  <target name="compile-jai" depends="deps-jai"
    description="compile classes for JAI Image I/O Tools library">
    <ant dir="components/forks/jai" target="jai.compile"/>
  </target>

  <target name="jar-jai" depends="deps-jai"
    description="generate JAR file for JAI Image I/O Tools library">
    <ant dir="components/forks/jai" target="jai.jar"/>
  </target>

  <target name="osgi-jai" depends="jar-jai"
    description="generate OSGi bundle for JAI Image I/O Tools library">
    <ant dir="components/forks/jai" target="jai.osgi"/>
  </target>

  <target name="findbugs-jai" depends="jar-jai"
    description="run findbugs on JAI Image I/O Tools library">
    <ant dir="components/forks/jai" target="jai.findbugs"/>
  </target>

  <target name="clean-jai"
    description="remove build files for JAI Image I/O Tools library">
    <ant dir="components/forks/jai" target="jai.clean"/>
  </target>

  <target name="test-jai" depends="jar-jai, testing-deps"
    description="compile and run tests for JAI Image I/O Tools library">
    <ant dir="components/forks/jai" target="test"/>
  </target>

  <!-- Apache POI Java library -->

  <target name="deps-poi-loci"
    depends="jar-common"/>

  <target name="compile-poi-loci" depends="deps-poi-loci"
    description="compile classes for Apache POI library">
    <ant dir="components/forks/poi" target="poi-loci.compile"/>
  </target>

  <target name="jar-poi-loci" depends="deps-poi-loci"
    description="generate JAR file for Apache POI library">
    <ant dir="components/forks/poi" target="poi-loci.jar"/>
  </target>

  <target name="osgi-poi-loci" depends="jar-poi-loci"
    description="generate OSGi bundle for Apache POI library">
    <ant dir="components/forks/poi" target="poi-loci.osgi"/>
  </target>

  <target name="findbugs-poi-loci" depends="jar-poi-loci"
    description="run findbugs on Apache POI library">
    <ant dir="components/forks/poi" target="poi-loci.findbugs"/>
  </target>

  <target name="clean-poi-loci"
    depends="clean-common"
    description="remove build files for Apache POI library">
    <ant dir="components/forks/poi" target="poi-loci.clean"/>
  </target>

  <target name="test-poi-loci" depends="jar-poi-loci, testing-deps"
    description="compile and run tests for Apache POI library">
    <ant dir="components/forks/poi" target="test"/>
  </target>

  <!-- MDB Tools Java library -->

  <target name="deps-mdbtools"/>

  <target name="compile-mdbtools" depends="deps-mdbtools"
    description="compile classes for MDB Tools Java library">
    <ant dir="components/forks/mdbtools" target="mdbtools.compile"/>
  </target>

  <target name="jar-mdbtools" depends="deps-mdbtools"
    description="generate JAR file for MDB Tools Java library">
    <ant dir="components/forks/mdbtools" target="mdbtools.jar"/>
  </target>

  <target name="osgi-mdbtools" depends="jar-mdbtools"
    description="generate OSGi bundle for MDB Tools Java library">
    <ant dir="components/forks/mdbtools" target="mdbtools.osgi"/>
  </target>

  <target name="findbugs-mdbtools" depends="jar-mdbtools"
    description="run findbugs on MDB Tools Java library">
    <ant dir="components/forks/mdbtools" target="mdbtools.findbugs"/>
  </target>

  <target name="clean-mdbtools"
    description="remove build files for MDB Tools Java library">
    <ant dir="components/forks/mdbtools" target="mdbtools.clean"/>
  </target>

  <target name="test-mdbtools" depends="jar-mdbtools, testing-deps"
    description="compile and run tests for MDB Tools Java library">
    <ant dir="components/forks/mdbtools" target="test"/>
  </target>

  <!-- Metakit library -->

  <target name="deps-metakit"
    depends="jar-common"/>

  <target name="compile-metakit" depends="deps-metakit"
    description="compile classes for Metakit Java library">
    <ant dir="components/metakit" target="metakit.compile"/>
  </target>

  <target name="jar-metakit" depends="deps-metakit"
    description="generate JAR file for Metakit Java library">
    <ant dir="components/metakit" target="metakit.jar"/>
  </target>

  <target name="osgi-metakit" depends="jar-metakit"
    description="generate OSGi bundle for Metakit Java library">
    <ant dir="components/metakit" target="metakit.osgi"/>
  </target>

  <target name="findbugs-metakit" depends="jar-metakit"
    description="run findbugs on Metakit Java library">
    <ant dir="components/metakit" target="metakit.findbugs"/>
  </target>

  <target name="clean-metakit"
    depends="clean-common"
    description="remove build files for Metakit Java library">
    <ant dir="components/metakit" target="metakit.clean"/>
  </target>

  <target name="test-metakit" depends="jar-metakit, testing-deps"
    description="compile and run tests for Metakit Java library">
    <ant dir="components/metakit" target="test"/>
  </target>

  <!-- OME-XML Java library -->

  <target name="deps-ome-xml"/>

  <target name="compile-ome-xml" depends="deps-ome-xml"
    description="compile classes for OME-XML Java library">
    <ant dir="components/ome-xml" target="ome-xml.compile"/>
  </target>

  <target name="jar-ome-xml" depends="deps-ome-xml"
    description="generate JAR file for OME-XML Java library">
    <ant dir="components/ome-xml" target="ome-xml.jar"/>
  </target>

  <target name="osgi-ome-xml" depends="jar-ome-xml"
    description="generate OSGi bundle for OME-XML Java library">
    <ant dir="components/ome-xml" target="ome-xml.osgi"/>
  </target>

  <target name="findbugs-ome-xml" depends="jar-ome-xml"
    description="run findbugs on OME-XML Java library">
    <ant dir="components/ome-xml" target="ome-xml.findbugs"/>
  </target>

  <target name="clean-ome-xml"
    description="remove build files for OME-XML Java library">
    <ant dir="components/ome-xml" target="ome-xml.clean"/>
  </target>

  <target name="test-ome-xml" depends="jar-ome-xml, testing-deps"
    description="compile and run tests for OME-XML Java library">
    <ant dir="components/ome-xml" target="test"/>
  </target>

  <!-- LWF stubs -->

  <target name="deps-lwf-stubs"/>

  <target name="compile-lwf-stubs" depends="deps-lwf-stubs"
    description="compile classes for LWF stubs">
    <ant dir="components/stubs/lwf-stubs" target="lwf-stubs.compile"/>
  </target>

  <target name="jar-lwf-stubs" depends="deps-lwf-stubs"
    description="generate JAR file for LWF stubs">
    <ant dir="components/stubs/lwf-stubs" target="lwf-stubs.jar"/>
  </target>

  <target name="osgi-lwf-stubs" depends="jar-lwf-stubs"
    description="generate OSGi bundle for LWF stubs">
    <ant dir="components/stubs/lwf-stubs" target="lwf-stubs.osgi"/>
  </target>

  <target name="findbugs-lwf-stubs" depends="jar-lwf-stubs"
    description="run findbugs on LWF stubs">
    <ant dir="components/stubs/lwf-stubs" target="lwf-stubs.findbugs"/>
  </target>

  <target name="clean-lwf-stubs"
    description="remove build files for LWF stubs">
    <ant dir="components/stubs/lwf-stubs" target="lwf-stubs.clean"/>
  </target>

  <target name="test-lwf-stubs" depends="jar-lwf-stubs, testing-deps"
    description="compile and run tests for LWF stubs">
    <ant dir="components/stubs/lwf-stubs" target="test"/>
  </target>

  <!-- SCIFIO -->

  <target name="deps-scifio"
    depends="jar-common,
      jar-jai,
      jar-lwf-stubs,
      jar-ome-xml"/>

  <target name="compile-scifio" depends="deps-scifio"
    description="compile classes for SCIFIO">
    <ant dir="components/scifio" target="scifio.compile"/>
  </target>

  <target name="jar-scifio" depends="deps-scifio"
    description="generate JAR file for SCIFIO">
    <ant dir="components/scifio" target="scifio.jar"/>
  </target>

  <target name="osgi-scifio" depends="jar-scifio"
    description="generate OSGi bundle for SCIFIO">
    <ant dir="components/scifio" target="scifio.osgi"/>
  </target>

  <target name="findbugs-scifio" depends="jar-scifio"
    description="run findbugs on SCIFIO">
    <ant dir="components/scifio" target="scifio.findbugs"/>
  </target>

  <target name="clean-scifio"
    depends="clean-common,
      clean-jai,
      clean-lwf-stubs,
      clean-ome-xml"
    description="remove build files for SCIFIO">
    <ant dir="components/scifio" target="scifio.clean"/>
  </target>

  <target name="test-scifio" depends="jar-scifio, testing-deps"
    description="compile and run tests for SCIFIO">
    <ant dir="components/scifio" target="test"/>
  </target>

  <!-- SCIFIO tools -->

  <target name="deps-scifio-tools"
    depends="jar-common,
      jar-jai,
      jar-lwf-stubs,
      jar-ome-xml,
      jar-formats,
      jar-scifio"/>

  <target name="compile-scifio-tools" depends="deps-scifio-tools"
    description="compile classes for SCIFIO tools">
    <ant dir="components/scifio-tools" target="scifio-tools.compile"/>
  </target>

  <target name="jar-scifio-tools" depends="deps-scifio-tools"
    description="generate JAR file for SCIFIO tools">
    <ant dir="components/scifio-tools" target="scifio-tools.jar"/>
  </target>

  <target name="osgi-scifio-tools" depends="jar-scifio-tools"
    description="generate OSGi bundle for SCIFIO tools">
    <ant dir="components/scifio-tools" target="scifio-tools.osgi"/>
  </target>

  <target name="findbugs-scifio-tools" depends="jar-scifio-tools"
    description="run findbugs on SCIFIO tools">
    <ant dir="components/scifio-tools" target="scifio-tools.findbugs"/>
  </target>

  <target name="clean-scifio-tools"
    depends="clean-common,
      clean-jai,
      clean-lwf-stubs,
      clean-ome-xml,
      clean-scifio,
      clean-formats"
    description="remove build files for SCIFIO tools">
    <ant dir="components/scifio-tools" target="scifio-tools.clean"/>
  </target>

  <target name="test-scifio-tools" depends="jar-scifio-tools, testing-deps"
    description="compile and run tests for SCIFIO tools">
    <ant dir="components/scifio-tools" target="test"/>
  </target>

  <!-- Bio-Formats -->

  <target name="deps-formats"
    depends="jar-common,
      jar-mdbtools,
      jar-metakit,
      jar-ome-xml,
      jar-poi-loci,
      jar-scifio"/>

  <target name="compile-formats" depends="deps-formats"
    description="compile classes for Bio-Formats">
    <ant dir="components/bio-formats" target="formats.compile"/>
  </target>

  <target name="jar-formats" depends="deps-formats"
    description="generate JAR file for Bio-Formats">
    <ant dir="components/bio-formats" target="formats.jar"/>
  </target>

  <target name="osgi-formats" depends="jar-formats"
    description="generate OSGi bundle for Bio-Formats">
    <ant dir="components/bio-formats" target="formats.osgi"/>
  </target>

  <target name="findbugs-formats" depends="jar-formats"
    description="run findbugs on Bio-Formats">
    <ant dir="components/bio-formats" target="formats.findbugs"/>
  </target>

  <target name="clean-formats"
    depends="clean-common,
      clean-mdbtools,
      clean-metakit,
      clean-ome-xml,
      clean-poi-loci,
      clean-scifio"
    description="remove build files for Bio-Formats">
    <ant dir="components/bio-formats" target="formats.clean"/>
  </target>

  <target name="utils-formats" depends="jar-formats"
    description="compile extra utilities for Bio-Formats">
    <ant dir="components/bio-formats" target="formats.utils"/>
  </target>

  <target name="test-formats" depends="jar-formats, testing-deps"
    description="compile and run tests for Bio-Formats">
    <ant dir="components/bio-formats" target="test"/>
  </target>

  <!-- LOCI autogen -->

  <target name="deps-autogen"
    depends="jar-common,
      jar-scifio"/>

  <target name="compile-autogen" depends="deps-autogen"
    description="compile classes for LOCI autogen">
    <ant dir="components/autogen" target="autogen.compile"/>
  </target>

  <target name="jar-autogen" depends="deps-autogen"
    description="generate JAR file for LOCI autogen">
    <ant dir="components/autogen" target="autogen.jar"/>
  </target>

  <target name="osgi-autogen" depends="jar-autogen"
    description="generate OSGi bundle for LOCI autogen">
    <ant dir="components/autogen" target="autogen.osgi"/>
  </target>

  <target name="findbugs-autogen" depends="jar-autogen"
    description="run findbugs on LOCI autogen">
    <ant dir="components/autogen" target="autogen.findbugs"/>
  </target>

  <target name="clean-autogen"
    depends="clean-common,
      clean-scifio"
    description="remove build files for LOCI autogen">
    <ant dir="components/autogen" target="autogen.clean"/>
  </target>

  <target name="test-autogen" depends="jar-autogen, testing-deps"
    description="compile and run tests for LOCI autogen">
    <ant dir="components/autogen" target="test"/>
  </target>

  <!-- LOCI Plugins for ImageJ -->

  <target name="deps-loci-plugins"
    depends="jar-common,
      jar-formats,
      jar-ome-xml,
      jar-scifio"/>

  <target name="compile-loci-plugins" depends="deps-loci-plugins"
    description="compile classes for LOCI Plugins for ImageJ">
    <ant dir="components/loci-plugins" target="loci-plugins.compile"/>
  </target>

  <target name="jar-loci-plugins" depends="deps-loci-plugins"
    description="generate JAR file for LOCI Plugins for ImageJ">
    <ant dir="components/loci-plugins" target="loci-plugins.jar"/>
  </target>

  <target name="osgi-loci-plugins" depends="jar-loci-plugins"
    description="generate OSGi bundle for LOCI Plugins for ImageJ">
    <ant dir="components/loci-plugins" target="loci-plugins.osgi"/>
  </target>

  <target name="findbugs-loci-plugins" depends="jar-loci-plugins"
    description="run findbugs on LOCI Plugins for ImageJ">
    <ant dir="components/loci-plugins" target="loci-plugins.findbugs"/>
  </target>

  <target name="clean-loci-plugins"
    depends="clean-common,
      clean-formats,
      clean-ome-xml,
      clean-scifio"
    description="remove build files for LOCI Plugins for ImageJ">
    <ant dir="components/loci-plugins" target="loci-plugins.clean"/>
  </target>

  <target name="utils-loci-plugins" depends="jar-loci-plugins"
    description="compile extra utilities for LOCI Plugins for ImageJ">
    <ant dir="components/loci-plugins" target="loci-plugins.utils"/>
  </target>

  <target name="test-loci-plugins" depends="jar-loci-plugins, testing-deps"
    description="compile and run tests for LOCI Plugins for ImageJ">
    <ant dir="components/loci-plugins" target="test"/>
  </target>

  <!-- OME I/O -->

  <target name="deps-ome-io"
    depends="jar-common,
      jar-ome-xml,
      jar-scifio"/>

  <target name="compile-ome-io" depends="deps-ome-io"
    description="compile classes for OME I/O">
    <ant dir="components/ome-io" target="ome-io.compile"/>
  </target>

  <target name="jar-ome-io" depends="deps-ome-io"
    description="generate JAR file for OME I/O">
    <ant dir="components/ome-io" target="ome-io.jar"/>
  </target>

  <target name="osgi-ome-io" depends="jar-ome-io"
    description="generate OSGi bundle for OME I/O">
    <ant dir="components/ome-io" target="ome-io.osgi"/>
  </target>

  <target name="findbugs-ome-io" depends="jar-ome-io"
    description="run findbugs on OME I/O">
    <ant dir="components/ome-io" target="ome-io.findbugs"/>
  </target>

  <target name="clean-ome-io"
    depends="clean-common,
      clean-ome-xml,
      clean-scifio"
    description="remove build files for OME I/O">
    <ant dir="components/ome-io" target="ome-io.clean"/>
  </target>

  <target name="test-ome-io" depends="jar-ome-io, testing-deps"
    description="compile and run tests for OME I/O">
    <ant dir="components/ome-io" target="test"/>
  </target>

  <!-- OME Plugins for ImageJ -->

  <target name="deps-ome-plugins"
    depends="jar-common,
      jar-loci-plugins,
      jar-ome-io,
      jar-scifio"/>

  <target name="compile-ome-plugins" depends="deps-ome-plugins"
    description="compile classes for OME Plugins for ImageJ">
    <ant dir="components/ome-plugins" target="ome-plugins.compile"/>
  </target>

  <target name="jar-ome-plugins" depends="deps-ome-plugins"
    description="generate JAR file for OME Plugins for ImageJ">
    <ant dir="components/ome-plugins" target="ome-plugins.jar"/>
  </target>

  <target name="osgi-ome-plugins" depends="jar-ome-plugins"
    description="generate OSGi bundle for OME Plugins for ImageJ">
    <ant dir="components/ome-plugins" target="ome-plugins.osgi"/>
  </target>

  <target name="findbugs-ome-plugins" depends="jar-ome-plugins"
    description="run findbugs on OME Plugins for ImageJ">
    <ant dir="components/ome-plugins" target="ome-plugins.findbugs"/>
  </target>

  <target name="clean-ome-plugins"
    depends="clean-common,
      clean-loci-plugins,
      clean-ome-io,
      clean-scifio"
    description="remove build files for OME Plugins for ImageJ">
    <ant dir="components/ome-plugins" target="ome-plugins.clean"/>
  </target>

  <target name="test-ome-plugins" depends="jar-ome-plugins, testing-deps"
    description="compile and run tests for OME Plugins for ImageJ">
    <ant dir="components/ome-plugins" target="test"/>
  </target>

  <!-- LOCI testing framework -->

  <target name="deps-tests"
    depends="jar-common,
      jar-formats,
      jar-ome-io,
      jar-ome-xml,
      jar-scifio"/>

  <target name="compile-tests" depends="deps-tests"
    description="compile classes for LOCI testing framework">
    <ant dir="components/test-suite" target="tests.compile"/>
  </target>

  <target name="jar-tests" depends="deps-tests"
    description="generate JAR file for LOCI testing framework">
    <ant dir="components/test-suite" target="tests.jar"/>
  </target>

  <target name="osgi-tests" depends="jar-tests"
    description="generate OSGi bundle for LOCI testing framework">
    <ant dir="components/test-suite" target="tests.osgi"/>
  </target>

  <target name="findbugs-tests" depends="jar-tests"
    description="run findbugs on LOCI testing framework">
    <ant dir="components/test-suite" target="tests.findbugs"/>
  </target>

  <target name="clean-tests"
    depends="clean-common,
      clean-formats,
      clean-ome-io,
      clean-ome-xml,
      clean-scifio"
    description="remove build files for LOCI testing framework">
    <ant dir="components/test-suite" target="tests.clean"/>
  </target>

  <target name="test-tests" depends="jar-tests, testing-deps"
    description="compile and run tests for LOCI testing framework">
    <ant dir="components/test-suite" target="test"/>
  </target>

  <!-- OME Notes -->

  <target name="deps-ome-notes"
    depends="compile-common,
      compile-formats"/>

  <target name="compile-ome-notes" depends="deps-ome-notes"
    description="compile classes for OME Notes">
    <ant dir="components/legacy/ome-notes" target="ome-notes.compile"/>
  </target>

  <target name="jar-ome-notes" depends="deps-ome-notes"
    description="generate JAR file for OME Notes">
    <ant dir="components/legacy/ome-notes" target="ome-notes.jar"/>
  </target>

  <target name="osgi-ome-notes" depends="jar-ome-notes"
    description="generate OSGi bundle for OME Notes">
    <ant dir="components/legacy/ome-notes" target="ome-notes.osgi"/>
  </target>

  <target name="findbugs-ome-notes" depends="jar-ome-notes"
    description="run findbugs for OME Notes">
    <ant dir="components/legacy/ome-notes" target="ome-notes.findbugs"/>
  </target>

  <target name="clean-ome-notes"
    depends="clean-common,
      clean-formats"
    description="remove build files for OME Notes">
    <ant dir="components/legacy/ome-notes" target="ome-notes.clean"/>
  </target>

  <target name="test-ome-notes" depends="jar-ome-notes, testing-deps"
    description="compile and run tests for OME Notes">
    <ant dir="components/legacy/ome-notes" target="test"/>
  </target>

  <!-- OME Metadata Editor -->

  <target name="deps-ome-editor"
    depends="jar-common,
      jar-ome-xml,
      jar-scifio"/>

  <target name="compile-ome-editor" depends="deps-ome-editor"
    description="compile classes for OME Metadata Editor">
    <ant dir="components/legacy/ome-editor" target="ome-editor.compile"/>
  </target>

  <target name="jar-ome-editor" depends="deps-ome-editor"
    description="generate JAR file for OME Metadata Editor">
    <ant dir="components/legacy/ome-editor" target="ome-editor.jar"/>
  </target>

  <target name="osgi-ome-editor" depends="jar-ome-editor"
    description="generate OSGi bundle for OME Metadata Editor">
    <ant dir="components/legacy/ome-editor" target="ome-editor.osgi"/>
  </target>

  <target name="findbugs-ome-editor" depends="jar-ome-editor"
    description="run findbugs on OME Metadata Editor">
    <ant dir="components/legacy/ome-editor" target="ome-editor.findbugs"/>
  </target>

  <target name="clean-ome-editor"
    depends="clean-common,
      clean-ome-xml,
      clean-scifio"
    description="remove build files for OME Metadata Editor">
    <ant dir="components/legacy/ome-editor" target="ome-editor.clean"/>
  </target>

  <target name="test-ome-editor" depends="jar-ome-editor, testing-deps"
    description="compile and run tests for OME Metadata Editor">
    <ant dir="components/legacy/ome-editor" target="test"/>
  </target>

  <!-- Tool collections -->

  <target name="tools"
    depends="copy-jars,
      jar-common,
      jar-jai,
      jar-loci-plugins,
      jar-mdbtools,
      jar-metakit,
      jar-ome-xml,
      jar-poi-loci,
      jar-scifio,
      jar-scifio-tools"
    description="create JAR file encompassing several LOCI tools">
    <echo>----------=========== loci_tools ===========----------</echo>
    <for list="${loci-tools.libraries}" param="jar" delimiter=" " trim="true">
      <sequential>
        <unjar src="${artifact.dir}/@{jar}" dest="${loci-tools.dir}">
          <patternset>
            <exclude name="META-INF/**"/>
          </patternset>
        </unjar>
      </sequential>
    </for>
    <jar jarfile="${loci-tools.jar}" basedir="${loci-tools.dir}">
      <manifest>
        <attribute name="Main-Class" value="${loci-tools.main}"/>
      </manifest>
    </jar>
    <delete dir="${loci-tools.dir}"/>
  </target>

  <target name="tools-ome"
    depends="copy-jars,
      jar-ome-io,
      jar-ome-plugins"
    description="create JAR file encompassing several OME tools">
    <echo>----------=========== ome_tools ===========----------</echo>
    <for list="${ome-tools.libraries}" param="jar" delimiter=" " trim="true">
      <sequential>
        <unjar src="${artifact.dir}/@{jar}" dest="${ome-tools.dir}">
          <patternset>
            <exclude name="META-INF/**"/>
          </patternset>
        </unjar>
      </sequential>
    </for>
    <jar jarfile="${ome-tools.jar}" basedir="${ome-tools.dir}">
      <manifest>
        <attribute name="Main-Class" value="${ome-tools.main}"/>
      </manifest>
    </jar>
    <delete dir="${ome-tools.dir}"/>
  </target>

  <!-- HACK - limit OS to *nix due to file permission issues -->
  <target name="dist-bftools" if="isUnix" description="zip the command line tools bundle">
    <echo>----------=========== bftools ===========----------</echo>
    <!--
    <zip destfile="${artifact.dir}/bftools.zip"
      basedir="${bftools.dir}">
      <patternset>
        <exclude name="*.jar"/>
      </patternset>
    </zip>
    -->
    <exec executable="zip" dir="${bftools.dir}">
      <arg value="-r9"/>
      <arg value="${artifact.dir}/bftools.zip"/>
      <arg line="${bftools.files}"/>
    </exec>
  </target>

  <!-- Matlab -->
  <target name="dist-matlab" if="isUnix" description="zip the Matlab functions bundle">
    <echo>----------=========== bfmatlab ===========----------</echo>
    <zip destfile="${artifact.dir}/bfmatlab.zip">
      <zipfileset dir="${root.dir}/components/bio-formats/matlab" includes="**/*"/>
    </zip>
  </target>

  <target name="test-matlab" description="run Matlab tests"
	depends="tools">

    <property environment="env"/>
    <exec executable="matlab">
      <env key="MATLABPATH" value="${env.MATLABPATH}:${root.dir}/components/bio-formats/matlab:${artifact.dir}"/>  
      <arg value="-nodesktop"/>
      <arg value="-nosplash"/>
      <arg value="-r"/>
      <arg value="runtests ${root.dir}/components/bio-formats/test/matlab"/>
    </exec>
  </target>

  <!-- Internal targets -->

  <target name="init"/>

</project>
