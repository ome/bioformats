<!--
version.xml

Ant build file for release version numbering.
-->

<project>

  <import file="${root.dir}/ant/gitversion.xml" optional="true"/>

  <target name="release-version">
    <property name="release.version.regex" value="IDR-([0-9]+)[.]([0-9]+)[.]([0-9]+)(.*)"/>
    <!-- check for Git versioning information -->
    <property name="git.path" value="${root.dir}/.git"/>
    <available file="${git.path}" property="git.present"/>
    <if>
      <isset property="git.present"/>
      <then>
        <exec executable="git" outputproperty="vcs.shortrevision"
          failifexecutionfails="true">
          <arg value="log"/>
          <arg value="-1"/>
          <arg value="HEAD"/>
          <arg value="--pretty=%h"/>
        </exec>
        <exec executable="git" outputproperty="vcs.revision"
          failifexecutionfails="true">
          <arg value="log"/>
          <arg value="-1"/>
          <arg value="HEAD"/>
          <arg value="--pretty=%H"/>
        </exec>
        <exec executable="git" outputproperty="vcs.date"
              failifexecutionfails="true">
          <arg value="log"/>
          <arg value="-1"/>
          <arg value="${vcs.revision}"/>
          <arg value="--pretty=%ai"/>
        </exec>
        <exec executable="git" outputproperty="vcs.date_unix"
              failifexecutionfails="true">
          <arg value="log"/>
          <arg value="-1"/>
          <arg value="${vcs.revision}"/>
          <arg value="--pretty=%at"/>
        </exec>

        <!-- Check git describe twice: first to see if this is an exact
             match and once to get the full string for parsing major,
             minor, and patch values -->
        <trycatch>
          <try>
            <exec executable="git" outputproperty="git.describe.exact"
              resultproperty="git.describe.exact.rc"
              failifexecutionfails="false" failonerror="true">
              <arg value="describe"/>
              <arg value="--match=IDR-[0-9]*"/>
              <arg value="--exact"/>
            </exec>
          </try>
          <catch></catch>
        </trycatch>
        <exec executable="git" outputproperty="git.describe"
          failifexecutionfails="false">
          <arg value="describe"/>
          <arg value="--match=IDR-[0-9]*"/>
        </exec>
        <if>
          <isset property="git.describe"/>
          <then>
            <propertyregex property="tag.major" input="${git.describe}" regexp="${release.version.regex}" select="\1"/>
            <propertyregex property="tag.minor" input="${git.describe}" regexp="${release.version.regex}" select="\2"/>
            <propertyregex property="tag.patch" input="${git.describe}" regexp="${release.version.regex}" select="\3"/>
            <propertyregex property="tag.extra" input="${git.describe}" regexp="${release.version.regex}" select="\4"/>
          </then>
        </if>

        <!-- First check if Bio-Formats is being built as a part of the top-level
             OME repository. If so, use that version. Otherwise, if this is an
             exact match or if "use.inexact.version" is set, then use the re-created
             version number (minus the "v" prefix) -->

        <if>
          <isset property="omero.version"/>
          <then>
            <property name="release.version" value="${omero.version}"/>
          </then>
        </if>
        <if>
          <or>
            <equals arg1="0" arg2="${git.describe.exact.rc}"/>
            <isset property="use.inexact.version"/>
          </or>
          <then>
            <property name="release.version" value="${tag.major}.${tag.minor}.${tag.patch}${tag.extra}"/>
            <property name="release.shortversion" value="${tag.major}.${tag.minor}.${tag.patch}${tag.extra}"/>
          </then>
          <else>
            <property name="release.version" value="${tag.major}.${tag.minor}.${tag.patch}-DEV"/>
            <property name="release.shortversion" value="${tag.major}.${tag.minor}.${tag.patch}-DEV"/>
          </else>
        </if>
      </then>
    </if>

    <!-- set version components -->
    <propertyregex property="release.major" input="${release.version}" regexp="${release.version.regex}" select="\1"/>
    <propertyregex property="release.minor" input="${release.version}" regexp="${release.version.regex}" select="\2"/>
    <propertyregex property="release.patch" input="${release.version}" regexp="${release.version.regex}" select="\3"/>
    <propertyregex property="release.extra" input="${release.version}" regexp="${release.version.regex}" select="\4"/>

    <!-- set release version by default if nothing is set -->
    <property name="release.version" value="UNKNOWN"/>
    <property name="release.shortversion" value="UNKNOWN"/>
    <property name="vcs.shortrevision" value="UNKNOWN"/>
    <property name="vcs.revision" value="UNKNOWN"/>
    <property name="vcs.date" value="UNKNOWN"/>
  </target>

</project>
