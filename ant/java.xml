<!--
java.xml

Ant build file for logic common to Java-based components.
All Java-based component build files inherit from this build file.
Download Apache Ant from http://ant.apache.org/.
Type "ant -p" for a list of targets.
-->

<project xmlns:artifact="antlib:org.apache.maven.artifact.ant">
  <property file="${root.dir}/ant/java.properties"/>
  <import file="${root.dir}/ant/common.xml"/>
  <import file="${root.dir}/ant/version.xml"/>
  <import file="${root.dir}/ant/xsd-fu.xml"/>

  <taskdef name="testng" classpath="${lib.dir}/testng-${testng.version}.jar"
    classname="org.testng.TestNGAntTask"/>
  <if>
    <isset property="findbugs.home"/>
    <then>
      <taskdef name="findbugs" classpath="${findbugs.home}/findbugs-ant.jar${path.separator}${findbugs.home}/lib/findbugs-ant.jar" classname="edu.umd.cs.findbugs.anttask.FindBugsTask"/>
    </then>
  </if>
  <condition property="doTests">
    <available file="${tests.dir}"/>
  </condition>

  <path id="maven-ant-tasks.classpath"
    path="${lib.dir}/maven-ant-tasks-2.1.3.jar"/>
  <typedef resource="org/apache/maven/artifact/ant/antlib.xml"
    uri="antlib:org.apache.maven.artifact.ant"
    classpathref="maven-ant-tasks.classpath"/>

   <artifact:pom file="pom.xml" id="maven.pom"/>

   <target name="mvn-init" unless="compile.classpath">
     <condition property="maven.repo.local" value="${maven.repo.local}"
         else="${user.home}/.m2/repository">
       <isset property="maven.repo.local"/>
     </condition>
     <artifact:localRepository id="local.repository"
       path="${maven.repo.local}"/>
     <artifact:dependencies pathId="compile.classpath" useScope="compile"
         cacheDependencyRefs="true"
         dependencyRefsBuildFile="${build.dir}/compile-dependencies.xml">
       <pom refid="maven.pom"/>
       <localRepository refid="local.repository"/>
     </artifact:dependencies>
     <artifact:dependencies pathId="test.classpath" useScope="test"
         cacheDependencyRefs="true"
         dependencyRefsBuildFile="${build.dir}/test-dependencies.xml">
       <pom refid="maven.pom"/>
       <localRepository refid="local.repository"/>
     </artifact:dependencies>
     <artifact:dependencies pathId="runtime.classpath"
         filesetId="runtime.fileset"
         useScope="runtime" cacheDependencyRefs="true"
         dependencyRefsBuildFile="${build.dir}/runtime-dependencies.xml">
       <pom refid="maven.pom"/>
       <localRepository refid="local.repository"/>
     </artifact:dependencies>
   </target>


  <!-- Main build targets -->

  <target name="compile" depends="copy-source,copy-generated-source,mvn-init" description="compile classes">

    <javac debug="true" includeantruntime="false" fork="true"
      deprecation="${component.deprecation}"
      source="${component.java-version}"
      target="${component.java-version}"
      encoding="UTF-8"
      srcdir="${dest.dir}" destdir="${classes.dir}"
      includes="${component.source}">
      <classpath refid="compile.classpath" />
      <!--<compilerarg value="-Xlint:unchecked"/>-->
    </javac>
  </target>

  <target name="compile-tests" depends="compile, copy-test-source, mvn-init"
    description="compile test classes" if="doTests">
    <javac debug="true" includeantruntime="false" fork="true"
      deprecation="${component.deprecation}"
      source="${component.java-version}"
      target="${component.java-version}"
      encoding="UTF-8"
      srcdir="${test.dir}" destdir="${test-classes.dir}"
      includes="${component.source}">
      <classpath refid="test.classpath"/>
      <classpath path="${classes.dir}"/>
      </javac>
  </target>

  <target name="exec" depends="compile" description="execute package">
    <java fork="true" classname="${component.main-class}"
      classpath="${classes.dir}">
     <classpath refid="runtime.classpath"/>
     </java>
  </target>

  <target name="test" depends="jar, compile-tests"
    description="run tests" if="doTests">
    <!-- run TestNG tests -->
    <if>
      <isset property="testng.xml"/>
      <then>
        <testng haltonfailure="true" groups="all" testname="${component.name}">
          <classpath refid="test.classpath"/>
          <classpath>
            <pathelement location="${root.dir}/ant/"/><!-- logback.xml -->
            <pathelement location="${test-classes.dir}"/>
            <pathelement location="${test.dir}"/>
          </classpath>
          <xmlfileset file="${testng.xml}"/>
          <jvmarg value="-mx${testng.memory}"/>
        </testng>
      </then>
    </if>
  </target>

  <target name="findbugs" depends="jar"
    description="check source code for bugs">
    <if>
      <isset property="findbugs.home"/>
      <then>
        <findbugs home="${findbugs.home}" jvmargs="-Xmx512m"
          output="xml:withMessages" outputFile="${build.dir}/findbugs.xml"
          excludeFilter="${root.dir}/excludebugs.xml" reportLevel="high"
          errorProperty="findbugsErrors"
          warningsProperty="findbugsWarnings">
          <auxClasspath refid="runtime.classpath"/>
          <sourcePath path="${dest.dir}"/>
          <class location="${classes.dir}"/>
        </findbugs>

        <if>
          <isset property="findbugsErrors"/>
          <then>
            <fail message="FindBugs produced one or more errors."/>
          </then>
        </if>
        <if>
          <isset property="findbugsWarnings"/>
          <then>
            <fail message="FindBugs produced one or more warnings."/>
          </then>
        </if>
      </then>
      <else>
<echo>
Please set the findbugs.home property to point to
your FindBugs installation's lib directory. E.g.:
  ant -Dfindbugs.home=${user.home}/findbugs/lib findbugs
</echo>
        <fail message="FindBugs not found."/>
      </else>
    </if>
  </target>

  <target name="style" depends="compile"
    description="check source code style">
    <checkstyle config="${root.dir}/checkstyle.xml" failOnViolation="false"
      classpath="${classes.dir}">
      <classpath refid="compile.classpath"/>
      <fileset dir="${dest.dir}" includes="${component.source}"/>
    </checkstyle>
  </target>

  <target name="jar" depends="compile" description="generate JAR file">
    <mkdir dir="${artifact.dir}"/>
    <jar jarfile="${artifact.dir}/${component.jar}" basedir="${classes.dir}">
      <metainf dir="${basedir}" includes="lib/**/*"/>
      <manifest>
        <attribute name="Main-Class" value="${component.main-class}"/>
        <attribute name="Class-Path" value="${component.manifest-cp}"/>
      </manifest>
    </jar>
    <artifact:install file="${artifact.dir}/${component.jar}">
        <pom refid="maven.pom"/>
    </artifact:install>
  </target>

  <target name="bundle" depends="mvn-init" description="create bundle JAR">
    <mkdir dir="${artifact.dir}"/>
    <jar destfile="${artifact.dir}/${bundle.jar}" filesetmanifest="skip">
      <zipgroupfileset refid="runtime.fileset"/>
      <manifest>
        <attribute name="Main-Class" value="${package.main}"/>
      </manifest>
    </jar>
    <artifact:install file="${artifact.dir}/${bundle.jar}">
        <pom refid="maven.pom"/>
    </artifact:install>
  </target>

  <target name="utils" depends="jar"
    description="compile extra utilities">
    <delete>
      <fileset dir="${utils.dir}" includes="**/*.class"/>
    </delete>
    <javac debug="true" includeantruntime="false" fork="true"
      deprecation="true" source="1.7" target="1.7"
      encoding="UTF-8"
      srcdir="${utils.dir}" includes="**/*.java"
      classpath="${artifact.dir}/${component.jar}">
      <classpath refid="compile.classpath" />
      <!--<compilerarg value="-Xlint:unchecked"/>-->
    </javac>
  </target>

  <target name="docs" depends="compile, javadoc-properties"
    description="generate javadocs">
    <javadoc sourcepath="${dest.dir}" destdir="${docs.dir}/api"
      encoding="UTF-8"
      author="true" version="true" use="true"
      access="private"
      nodeprecated="false" windowtitle="Bio-Formats API"
      additionalparam="${javadoc.doclint}">
      <packageset dir="${dest.dir}"/>
      <classpath refid="runtime.classpath"/>
      <doctitle><![CDATA[<h1>Bio-Formats</h1>]]></doctitle>
      <bottom><![CDATA[${copyright.begin} ${YEAR} ${copyright.end}]]></bottom>
      <link href="http://docs.oracle.com/javase/7/docs/api/"/>
      <link href="http://rsbweb.nih.gov/ij/developer/api/"/>
      <link href="http://www.ssec.wisc.edu/visad-docs/javadoc/"/>
      <!--<link href="http://www.jdocs.com/formlayout/1.0.4/api/"/>-->
      <!--<link href="http://www.jdocs.com/looks/1.2.2/api/"/>-->
    </javadoc>
  </target>

  <target name="clean-classes" description="remove classes from build folder">
    <delete dir="${classes.dir}"/>
  </target>

  <target name="clean-dist"
    description="remove distribution bundles from build folder">
    <delete dir="${dist.dir}"/>
  </target>

  <target name="clean-docs" description="remove javadocs from build folder">
    <delete dir="${docs.dir}"/>
  </target>

  <target name="clean-src" description="remove source files from build folder">
    <delete dir="${dest.dir}"/>
  </target>

  <target name="clean-jar" description="remove JAR file from artifacts folder">
    <delete>
      <fileset dir="${artifact.dir}" includes="${component.jar}"/>
    </delete>
  </target>

  <!-- Internal build targets -->

  <target name="init"
    depends="init-title, init-timestamp, release-version, init-manifest-cp"/>

  <target name="init-manifest-cp">
    <!-- construct manifest classpath -->
    <propertyregex property="component.manifest-cp"
      input="${component.manifest-cp-temp}" replace=" "
      defaultValue="${component.manifest-cp-temp}">
      <regexp pattern=":"/>
    </propertyregex>
    <!--<echo>Manifest-Classpath: ${component.manifest-cp}</echo>-->
  </target>

  <target name="copy-source" depends="init">
    <!-- copy binary resources -->
    <copy todir="${dest.dir}" preservelastmodified="true">
      <!--
        include (none) to prevent problems if component.resources-bin is empty
      -->
      <fileset dir="${src.dir}" includes="(none) ${component.resources-bin}"/>
    </copy>
    <copy todir="${dest.dir}/META-INF" preservelastmodified="true">
      <fileset dir="${src.dir}/.." includes="(non) ${component.resources-bin}"/>
    </copy>
    <!-- copy source files and text resources with filtering -->
    <copy todir="${dest.dir}" preservelastmodified="true">
      <fileset dir="${src.dir}"
        includes="${component.source} ${component.resources-text}"/>
    </copy>

    <replace dir="${dest.dir}" token="$${date}" value="${DATE}"/>
    <replace dir="${dest.dir}" token="$${year}" value="${YEAR}"/>
    <replace dir="${dest.dir}" token="$${vcs.shortrevision}" value="${vcs.shortrevision}"/>
    <replace dir="${dest.dir}" token="$${vcs.revision}" value="${vcs.revision}"/>
    <replace dir="${dest.dir}" token="$${vcs.date}" value="${vcs.date}"/>
    <replace dir="${dest.dir}" token="$${vcs.date}_unix" value="${vcs.date_unix}"/>
    <replace dir="${dest.dir}" token="$${release.version}" value="${release.version}"/>
    <replace dir="${dest.dir}" token="$${xsdfu.schemaver}" value="${xsdfu.schemaver}"/>

    <!-- copy resources to classes folder -->
    <copy todir="${classes.dir}" preservelastmodified="true">
      <fileset dir="${dest.dir}" excludes="${component.source}"/>
    </copy>
  </target>

  <target name="generate-source" depends="init-title"/>

  <target name="copy-generated-source" depends="init,generate-source">
    <if>
      <available file="${gensrc.dir}" type="dir"/>
      <then>
	<!-- copy binary resources -->
	<copy todir="${dest.dir}" preservelastmodified="true">
	  <!--
	      include (none) to prevent problems if component.resources-bin is empty
	  -->
	  <fileset dir="${gensrc.dir}" includes="(none) ${component.resources-bin}"/>
	</copy>
	<!-- copy source files and text resources with filtering -->
	<copy todir="${dest.dir}" preservelastmodified="true">
	  <fileset dir="${gensrc.dir}"
		   includes="${component.source} ${component.resources-text}"/>
  </copy>

  <replace dir="${dest.dir}" token="$${date}" value="${DATE}"/>
  <replace dir="${dest.dir}" token="$${year}" value="${YEAR}"/>
  <replace dir="${dest.dir}" token="$${vcs.shortrevision}" value="${vcs.shortrevision}"/>
  <replace dir="${dest.dir}" token="$${vcs.revision}" value="${vcs.revision}"/>
  <replace dir="${dest.dir}" token="$${vcs.date}" value="${vcs.date}"/>
  <replace dir="${dest.dir}" token="$${release.version}" value="${release.version}"/>
	<!-- copy resources to classes folder -->
	<copy todir="${classes.dir}" preservelastmodified="true">
	  <fileset dir="${dest.dir}" excludes="${component.source}"/>
	</copy>
      </then>
    </if>
  </target>

  <target name="copy-test-source" depends="init" if="doTests">
    <copy todir="${test.dir}" preservelastmodified="true">
      <fileset dir="${tests.dir}" includes="(none) ${component.resources-bin}"/>
    </copy>

    <copy todir="${test.dir}" preservelastmodified="true">
      <fileset dir="${tests.dir}" includes="${component.source} ${component.resources-text}"/>
    </copy>

    <mkdir dir="${test-classes.dir}"/>
    <copy todir="${test-classes.dir}" preservelastmodified="true">
      <fileset dir="${tests.dir}" excludes="${component.source}"/>
    </copy>
  </target>

</project>
