{% def indexes_string(indexes) %}${", ".join(map(lambda x: lang.index_string(x),indexes))}{% end %}\
\
{% def index_string(name) %}\
{% choose %}\
{% when name[:2].isupper()%}int ${name}Index{% end %}\
{% otherwise %}int ${name[:1].lower()}${name[1:]}Index{% end %}\
{% end %}\
{% end %}\
\
{% def setter(parent, obj, prop, indexes) %}\
{% choose %}\
{% when len(indexes) > 0 and prop.maxOccurs > 1 %}\
{% if debug %}\
	// MARKER [A-GET]
{% end debug %}\
	/**
         * Set the ${prop.name} property of ${o.name}.
         *
         * @param ${prop.argumentName} ${prop.name} to set.
{% for param in indexes %}\
         * @param ${param['argname']} the ${param['type']} index.
{% end for %}\
         * @param ${lang.index_signature(prop.name, 0, 0)['argname']} ${prop.name} index (unused).
         */
	void set{% if is_multi_path[o.name] %}${parent}{% end %}${obj.name}${prop.name}(${prop.metadataStoreArgType} ${prop.argumentName}, ${indexes_string(indexes)}, ${index_string(prop.name)});\
{% end %}\
{% when len(indexes) > 0 %}\
{% if debug %}\
	// MARKER [B-GET]
{% end debug %}\
	/**
         * Set the ${prop.name} property of ${o.name}.
         *
         * @param ${prop.argumentName} ${prop.name} to set.
{% for param in indexes %}\
         * @param ${param['argname']} the ${param['type']} index.
{% end for %}\
         */
	void set{% if is_multi_path[o.name] %}${parent}{% end %}${obj.name}${prop.name}(${prop.metadataStoreArgType} ${prop.argumentName}, ${indexes_string(indexes)});\
{% end %}\
{% otherwise %}\
{% if debug %}\
	// MARKER [C-GET]
{% end debug %}\
	/**
         * Set the ${prop.name} property of ${o.name}.
         *
         * @param ${prop.argumentName} ${prop.name} to set.
         */
	void set{% if is_multi_path[o.name] %}${parent}{% end %}${obj.name}${prop.name}(${prop.metadataStoreArgType} ${prop.argumentName});\
{% end %}\
{% end %}\
{% end %}\
\
{% python
	def is_abstract(name):
		o = model.getObjectByName(name)
		if o is not None and \
		   (o.isAbstract):
			return True
		return False

	def sorted_properties(o):
		return sorted(o.properties.values() + o.baseObjectProperties, lambda x, y: cmp(x.name, y.name))
%}\
\
\
/*
 * #%L
 * OME-XML Java library for working with OME-XML metadata structures.
 * %%
 * Copyright (C) 2006 - 2015 Open Microscopy Environment:
 *   - Massachusetts Institute of Technology
 *   - National Institutes of Health
 *   - University of Dundee
 *   - Board of Regents of the University of Wisconsin-Madison
 *   - Glencoe Software, Inc.
 * %%
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice,
 *    this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDERS OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 *
 * The views and conclusions contained in the software and documentation are
 * those of the authors and should not be interpreted as representing official
 * policies, either expressed or implied, of any organization.
 * #L%
 */

/*-----------------------------------------------------------------------------
 *
 * THIS IS AUTOMATICALLY GENERATED CODE.  DO NOT MODIFY.
 *
 *-----------------------------------------------------------------------------
 */

package ${lang.metadata_package};

import ${lang.omexml_model_package}.*;
import ${lang.omexml_model_enums_package}.*;
import ${lang.omexml_model_package}.primitives.*;

import ${lang.units_package}.quantity.Angle;
import ${lang.units_package}.quantity.ElectricPotential;
import ${lang.units_package}.quantity.Frequency;
import ${lang.units_package}.quantity.Length;
import ${lang.units_package}.quantity.Power;
import ${lang.units_package}.quantity.Pressure;
import ${lang.units_package}.quantity.Temperature;
import ${lang.units_package}.quantity.${lang.typeToUnitsType("UnitsTime")};
import ${lang.units_package}.unit.Unit;

import java.util.Map;

/**
 * A proxy whose responsibility it is to marshal biological image data into a
 * particular storage medium.
 *
 * <p>The <code>MetadataStore</code> interface encompasses the metadata that
 * any specific storage medium (file, relational database, etc.) should be
 * expected to store into its backing data model.
 *
 * <p>The <code>MetadataStore</code> interface goes hand in hand with the
 * <code>MetadataRetrieve</code> interface. Essentially,
 * <code>MetadataRetrieve</code> provides the "getter" methods for a storage
 * medium, and <code>MetadataStore</code> provides the "setter" methods.
 *
 * <p>Since it often makes sense for a storage medium to implement both
 * interfaces, there is also an {@link IMetadata} interface encompassing
 * both <code>MetadataStore</code> and <code>MetadataRetrieve</code>, which
 * reduces the need to cast between object types.
 *
 * <p>See {@link ${lang.omexml_metadata_package}.OMEXMLMetadata} for an example
 * implementation.
 *
 * <p><b>Important note:</b> It is strongly recommended that applications
 * (e.g., file format readers) using <code>MetadataStore</code> populate
 * information in a linear order. Specifically, iterating over entities
 * from "leftmost" index to "rightmost" index is required for certain
 * <code>MetadataStore</code> implementations such as OMERO's
 * <code>OMEROMetadataStore</code>. For example, when populating Image, Pixels
 * and Plane information, an outer loop should iterate across
 * <code>imageIndex</code>, an inner loop should iterate across
 * <code>pixelsIndex</code>, and an innermost loop should handle
 * <code>planeIndex</code>. For an illustration of the ideal traversal order,
 * see {@link loci.formats.meta.MetadataConverter#convertMetadata}.</p>
 *
 * @author Chris Allan callan at blackcat.ca
 * @author Curtis Rueden ctrueden at wisc.edu
 */
public interface MetadataStore extends BaseMetadata
{
        /**
         * Create root node.  The action taken here is specific to the
         * concrete metadata implementation.
         */
	void createRoot();

        /**
         * Get the root node of the metadata.  Note that the root node
         * type will be specific to the concrete metadata
         * implementation.
         *
         * @return the root node.
         */
	MetadataRoot getRoot();

        /**
         * Set the root node of the metadata.  Note that the root node
         * type will be specific to the concrete metadata
         * implementation.  An exception will be thrown if the root
         * node is of an incompatible type.
         *
         * @param root the root node.
         */
	void setRoot(MetadataRoot root);

	// -- Entity storage (manual definitions) --

        /**
         * Set the BinData property of Mask.
         *
         * @param binData the BinData to set.
         * @param ROIIndex the ROI index.
         * @param maskIndex the Mask index.
         */
	void setMaskBinData(byte[] binData, int ROIIndex, int maskIndex);

        /**
         * Set the values of a MapAnnotation.
         *
         * @param value the MapAnnotation values to set.
         * @param mapAnnotationIndex the MapAnnotation index.
         */
	void setMapAnnotationValue(java.util.List<ome.xml.model.MapPair> value, int mapAnnotationIndex);

        /**
         * Set the MapAnnotation values of a GenericExcitationSource.
         *
         * @param map the MapAnnotation values to set.
         * @param instrumentIndex the Instrument index.
         */
	void setGenericExcitationSourceMap(java.util.List<ome.xml.model.MapPair> map, int instrumentIndex, int lightSourceIndex);

        /**
         * Set the MapAnnotation values of an ImagingEnvironment.
         *
         * @param map the MapAnnotation values to set.
         * @param imageIndex the Image index.
         */
	void setImagingEnvironmentMap(java.util.List<ome.xml.model.MapPair> map, int imageIndex);

	// -- Entity storage (code generated definitions) --

	/**
         * Set the UUID associated with this collection of metadata.
         *
         * @param uuid the UUID to set.
         */
	void setUUID(String uuid);

{% for o in sorted(model.objects.values(), lambda x, y: cmp(x.name, y.name)) %}\
{% if o.name not in fu.METADATA_OBJECT_IGNORE %}\
{% if o.langBaseType != 'Object' %}\
{% if debug %}\
	// Element's text data
	// ${repr(indexes[o.name])}
{% end debug %}\
	/**
         * Set the text value of ${o.name}.
         *
         * @param value text value.
{% for param in indexes[o.name].items()[0][1] %}\
         * @param ${param['argname']} the ${param['type']} index.
{% end for %}\
         */
	void set${o.name}Value(${o.langBaseType} value, ${indexes_string(indexes[o.name].items()[0][1])});

{% end %}\
{% if parents[o.name] is not None and not o.isAbstract %}\
{% if debug %}\
	// MARKER [EEE]
	//
	// ${o.name} property storage
	//
	// ${repr(parents[o.name])}
	// Is multi path? ${is_multi_path[o.name]}
{% end debug %}\

{% choose %}\
{% when o.isReference %}\
{% for prop in sorted(o.properties.values() + o.baseObjectProperties, lambda x, y: cmp(x.name, y.name)) %}\
{% if debug %}\
	// ${prop.minOccurs}:${prop.maxOccurs}
	// Is multi path? ${is_multi_path[o.name]}
	// Ignoring ${prop.name} property of reference ${o.name}

{% end debug %}\
{% end %}\
{% end %}\
{% otherwise %}\
\
{% for k, v in indexes[o.name].items() %}\
{% if is_abstract(k) %}\
{% for prop in sorted_properties(model.getObjectByName(k)) %}\
{% choose %}\
{% when not prop.isPrimitive and prop.isChoice %}\
{% if debug %}\
	// MARKER [CCC]
{% end debug %}\
{% if debug %}\
	// Ignoring ${prop.name} of parent abstract type
{% end debug %}\
{% end %}\
{% otherwise %}\
{% for parent_k, parent_v in indexes[k].items() %}\
{% if debug %}\
	// MARKER [DDD]
{% end debug %}\
{% if not prop.isBackReference and not prop.isUnitsEnumeration %}\
{% if debug %}\
	// MARKER [AAA] - isUnitsEnumeration ${prop.isUnitsEnumeration}
{% end debug %}\

{% end %}\
{% end %}\
{% end %}\
{% end %}\
{% end %}\
{% end %}\
{% end %}\
\
{% for prop in sorted(o.properties.values() + o.baseObjectProperties, lambda x, y: cmp(x.name, y.name)) %}\
{% choose %}\
{% when prop.isBackReference %}\
{% if debug %}\
	// Ignoring ${prop.name} back reference
{% end debug %}\
{% end %}\
{% when not prop.isReference and not prop.isAttribute and prop.isComplex() and (not prop.name in fu.SHAPE_OVERRIDE)%}\
{% if debug %}\
	// Ignoring ${prop.name} element, complex property
{% end debug %}\
{% end %}\
{% when prop.isUnitsEnumeration %}\
{% if debug %}\
	// MARKER [FFF]
{% end debug %}\
{% if debug %}\
	// Ignoring ${prop.name} element, unit enumeration property
{% end debug %}\
{% end %}\
{% otherwise %}\
{% for k, v in indexes[o.name].items() %}\
{% if debug %}\
	// MARKER [BBB]
{% end debug %}\
${setter(k, o, prop, v)}

{% end %}\
{% end %}\
{% end %}\
{% end %}\
{% end %}\
{% end %}\
{% end %}\
{% end %}\
{% end %}\
}
