{% def indexes_string(indexes) %}${", ".join(map(lambda x: lang.index_string(x),indexes))}{% end %}\
\
{% def index_name_string(name) %}\
{% choose %}\
{% when name[:2].isupper()%}${name}Index{% end %}\
{% otherwise %}${name[:1].lower()}${name[1:]}Index{% end %}\
{% end %}\
{% end %}\
\
{% def index_string(name) %}int ${index_name_string(name)}{% end %}\
\
{% def counter(parent, obj, indexes) %}\
	public int get{% if is_multi_path[o.name] %}${parent}{% end %}${obj.name}Count(${indexes_string(indexes[:-1])})
	{
{% if debug %}\
		// MARKER [A-IMP]
{% end debug %}\
		// Parents: ${repr(parents[obj.name])}
{% if obj.isReference %}\
		// ${obj.name} is a reference
		return root.${".".join(accessor(obj.name, parent, obj.name)[:-1] + ["sizeOfLinked%sList()" % obj.name.replace('Ref', '')])};
{% end %}\
{% if not obj.isReference %}\
		// ${obj.name} is not a reference
		return root.${".".join(accessor(obj.name, parent, obj.name)[:-1] + ["sizeOf%sList()" % obj.name.replace('Ref', '')])};
{% end %}\
	}
{% end %}\
\
{% def getter(parent, obj, prop, indexes) %}\
{% choose %}\
{% when len(indexes) > 0 and prop.maxOccurs > 1 %}\
	public ${prop.metadataStoreRetType} get{% if is_multi_path[o.name] %}${parent}{% end %}${obj.name}${prop.name}(${indexes_string(indexes)}, ${index_string(prop.name)})
{% end %}\
{% when len(indexes) > 0 %}\
	public ${prop.metadataStoreRetType} get{% if is_multi_path[o.name] %}${parent}{% end %}${obj.name}${prop.name}(${indexes_string(indexes)})
{% end %}\
{% otherwise %}\
	public ${prop.metadataStoreRetType} get{% if is_multi_path[o.name] %}${parent}{% end %}${obj.name}${prop.name}()
{% end %}\
{% end %}\
	{
{% if debug %}\
		// MARKER [B-IMP]
{% end debug %}\
		// Parents: ${repr(parents[obj.name])}
{% choose %}\
{% when is_abstract(parent) and prop.isReference and prop.maxOccurs > 1 %}\
		// ${parent} is abstract proprietary, is reference and occurs more than once
		${obj.name} o = (${obj.name}) root.${".".join(accessor(obj.name, parent, prop)[:-1])};
		return o.getLinked${prop.methodName}(${index_name_string(prop.name)}).getID();
{% end %}\
{% when is_abstract(parent) and prop.isReference %}\
		// ${parent} is abstract proprietary
		${obj.name} o = (${obj.name}) root.${".".join(accessor(obj.name, parent, prop)[:-1])};
		return o.getLinked${prop.methodName}().getID();
{% end %}\
{% when is_abstract(parent) %}\
		// ${parent} is abstract proprietary and not a reference
		${obj.name} o = (${obj.name}) root.${".".join(accessor(obj.name, parent, prop)[:-1])};
		return o.get${prop.methodName}();
{% end %}\
{% when prop.isReference and prop.maxOccurs > 1 %}\
		// ${prop.name} is reference and occurs more than once
		return root.${".".join(accessor(obj.name, parent, prop))}.getLinked${prop.methodName}(${index_name_string(prop.name)}).getID();
{% end %}\
{% when prop.isReference %}\
		// ${prop.name} is reference and occurs only once
		return root.${".".join(accessor(obj.name, parent, prop))}.getLinked${prop.methodName}().getID();
{% end %}\
{% otherwise %}\
		// ${prop.name} is not a reference
		return root.${".".join(accessor(obj.name, parent, prop))}.get${prop.methodName}();
{% end %}\
{% end %}\
	}
{% end %}\
\
{% def setter(parent, obj, prop, indexes) %}\
{% choose %}\
{% when len(indexes) > 0 and prop.maxOccurs > 1 %}\
	public void set{% if is_multi_path[o.name] %}${parent}{% end %}${obj.name}${prop.name}(${prop.metadataStoreArgType} ${prop.argumentName}, ${indexes_string(indexes)}, ${index_string(prop.name)})
{% end %}\
{% when len(indexes) > 0 %}\
	public void set{% if is_multi_path[o.name] %}${parent}{% end %}${obj.name}${prop.name}(${prop.metadataStoreArgType} ${prop.argumentName}, ${indexes_string(indexes)})
{% end %}\
{% otherwise %}\
	public void set{% if is_multi_path[o.name] %}${parent}{% end %}${obj.name}${prop.name}(${prop.metadataStoreArgType} ${prop.argumentName})
{% end %}\
{% end %}\
	{
{% if debug %}\
		// MARKER [C-IMP]
{% end debug %}\
		// Parents: ${repr(parents[obj.name])}
{% choose %}\
{% when is_abstract(parent) and prop.isReference %}\
		// ${prop.name} is abstract proprietary and is a reference
		${prop.name} ${prop.instanceVariableName}_reference = new ${prop.name}();
		${prop.instanceVariableName}_reference.setID(${prop.argumentName});
		model.addReference(
				root.${".".join(accessor(obj.name, parent, prop)[:-1])},
				${prop.instanceVariableName}_reference);
		// ${parent} is abstract proprietary
{% end %}\
{% when is_abstract(parent) %}\
		// ${parent} is abstract proprietary and not a reference
		OME o0 = root;
{% for i, v in enumerate(accessor(obj.name, parent, prop, accessor_string_complex)[:-1]) %}\
{% choose %}\
{% when v['level'] == 2 %}\
		if (o${i}.sizeOf${v['name']}List() == ${index_name_string(v['name'])})
		{
			o${i}.add${v['name']}(new ${obj.name}());
		}
{% end %}\
{% when v['max_occurs'] > 1 %}\
		if (o${i}.sizeOf${v['name']}List() == ${index_name_string(v['name'])})
		{
			o${i}.add${v['name']}(new ${v['name']}());
		}
{% end %}\
{% when v['max_occurs'] == 1 %}\
		if (o${i}.${v['accessor']} == null)
		{
			o${i}.set${v['name']}(new ${v['name']}());
		}
{% end %}\
{% end %}\
		${v['name']} o${i + 1} = o${i}.${v['accessor']};
{% if v['level'] == 2 %}\
{% if "ID" == prop.name %}\
		model.addModelObject(${prop.argumentName}, o${i + 1});
{% end %}\
		((${obj.name})o${i + 1}).set${prop.methodName}(${prop.argumentName});
{% end %}\
{% end %}\
{% end %}\
{% when prop.isReference %}\
		// ${prop.name} is reference and occurs more than once
		${prop.name} ${prop.instanceVariableName}_reference = new ${prop.name}();
		${prop.instanceVariableName}_reference.setID(${prop.argumentName});
		model.addReference(
				root.${".".join(accessor(obj.name, parent, prop))},
				${prop.instanceVariableName}_reference);
{% end %}\
{% otherwise %}\
		// ${prop.name} is not a reference
		OME o0 = root;
{% for i, v in enumerate(accessor(obj.name, parent, prop, accessor_string_complex)) %}\
{% choose %}\
{% when v['max_occurs'] > 1 %}\
		if (o${i}.sizeOf${v['name']}List() == ${index_name_string(v['name'])})
		{
			o${i}.add${v['name']}(new ${v['name']}());
		}
{% end %}\
{% when v['max_occurs'] == 1 %}\
		if (o${i}.${v['accessor']} == null)
		{
			o${i}.set${v['name']}(new ${v['name']}());
		}
{% end %}\
{% end %}\
		${v['name']} o${i + 1} = o${i}.${v['accessor']};
{% if v['level'] == 1 %}\
{% if "ID" == prop.name %}\
		model.addModelObject(${prop.argumentName}, o${i + 1});
{% end %}\
		o${i + 1}.set${prop.methodName}(${prop.argumentName});
{% end %}\
{% end %}\
{% end %}\
{% end %}\
{% if obj.name in customContent and prop.name in customContent[obj.name] %}\
{% if debug %}\
		// Custom content from ${obj.name} ${prop.name} template
{% end debug %}\
${customContent[obj.name][prop.name]}
{% end %}\
	}
{% end %}\
\
{% python
	def is_abstract(name):
		o = model.getObjectByName(name)
		if o is not None and \
		   (o.isAbstract or o.isAbstractProprietary):
			return True
		return False

	def sorted_properties(o):
		return sorted(o.properties.values() + o.baseObjectProperties, lambda x, y: cmp(x.name, y.name))

	def accessor_string(name, max_occurs, level):
		"""Makes a Java method accessor string from an index name."""
		return accessor_string_complex(name, max_occurs, level)['accessor']

	def accessor_string_complex(name, max_occurs, level):
		"""Makes a Java method accessor string from an index name."""
		to_return = {'level': level, 'name': name, 'max_occurs': max_occurs}
		if max_occurs == 1:
			to_return['accessor'] = "get%s()" % (name)
			return to_return
		if name[:2].isupper():
			to_return['accessor'] = "get%s(%sIndex)" % (name, name)
			return to_return
		to_return['accessor'] = "get%s(%s%sIndex)" % (name, name[:1].lower(), name[1:])
		return to_return

	def accessor(name, parent, prop, func=accessor_string):
		results = dict()
		fu.resolve_hierarchy(results, model, {name: parents[name]}, func, min_occurs=1)
		if parent not in results.keys():
			raise Exception("Invalid KEY No accessor for: name:%s parent:%s prop:%s === %s" % (name, parent, prop, results))
		if len(results.keys()) == 0:
			raise Exception("Zero KEYS No accessor for: name:%s parent:%s prop:%s === %s" % (name, parent, prop, results))
		return results[parent]
%}\
\
\
/*
 * #%L
 * OME-XML Java library for working with OME-XML metadata structures.
 * %%
 * Copyright (C) 2006 - 2014 Open Microscopy Environment:
 *   - Massachusetts Institute of Technology
 *   - National Institutes of Health
 *   - University of Dundee
 *   - Board of Regents of the University of Wisconsin-Madison
 *   - Glencoe Software, Inc.
 * %%
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice,
 *    this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDERS OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 *
 * The views and conclusions contained in the software and documentation are
 * those of the authors and should not be interpreted as representing official
 * policies, either expressed or implied, of any organization.
 * #L%
 */

/*-----------------------------------------------------------------------------
 *
 * THIS IS AUTOMATICALLY GENERATED CODE.  DO NOT MODIFY.
 *
 *-----------------------------------------------------------------------------
 */

package ${lang.omexml_metadata_package};

import ${lang.omexml_model_package}.*;
import ${lang.omexml_model_enums_package}.*;
import ${lang.omexml_model_package}.primitives.*;

import ${lang.units_package}.quantity.Angle;
import ${lang.units_package}.quantity.ElectricPotential;
import ${lang.units_package}.quantity.Frequency;
import ${lang.units_package}.quantity.Length;
import ${lang.units_package}.quantity.Power;
import ${lang.units_package}.quantity.Pressure;
import ${lang.units_package}.quantity.Temperature;
import ${lang.units_package}.quantity.${lang.typeToUnitsType("UnitsTime")};
import ${lang.units_package}.unit.Unit;

/**
 * A metadata store implementation for constructing and manipulating OME-XML
 * DOMs for the current version of OME-XML.
 *
 * @author Curtis Rueden ctrueden at wisc.edu
 * @author Melissa Linkert linkert at wisc.edu
 */
public class OMEXMLMetadataImpl extends AbstractOMEXMLMetadata
{
	private OMEXMLMetadataRoot root; // OME

	private OMEModel model;

	public OMEXMLMetadataImpl()
	{
		createRoot();
	}

	public void createRoot()
	{
		root = new OMEXMLMetadataRoot();
		model = new OMEModelImpl();
	}

	public MetadataRoot getRoot()
	{
		return root;
	}

	public void setRoot(MetadataRoot root)
	{
		if (root instanceof OMEXMLMetadataRoot)
			this.root = (OMEXMLMetadataRoot) root;
		else
			throw new IllegalArgumentException("Expecting OMEXMLMetadataRoot class or subclass.");
		model = new OMEModelImpl();
	}

	@Deprecated
	public void setRoot(Object root)
	{
		if (root instanceof OMEXMLMetadataRoot)
			this.root = (OMEXMLMetadataRoot) root;
		else if (root instanceof OME)
			this.root = new OMEXMLMetadataRoot((OME) root);
		else
			throw new IllegalArgumentException("Expecting OMEXMLMetadataRoot class or subclass.");
		model = new OMEModelImpl();
	}

	public String dumpXML()
	{
		resolveReferences();
		return super.dumpXML();
	}

	public int resolveReferences()
	{
		return model.resolveReferences();
	}

	// -- Entity counting (manual definitions) --

	public int getPixelsBinDataCount(int imageIndex)
	{
		return root.getImage(imageIndex).getPixels().sizeOfBinDataList();
	}

  public int getBooleanAnnotationAnnotationCount(int booleanAnnotationIndex) {
    return root.getStructuredAnnotations().getBooleanAnnotation(booleanAnnotationIndex).sizeOfLinkedAnnotationList();
  }

  public int getCommentAnnotationAnnotationCount(int commentAnnotationIndex) {
    return root.getStructuredAnnotations().getCommentAnnotation(commentAnnotationIndex).sizeOfLinkedAnnotationList();
  }

  public int getDoubleAnnotationAnnotationCount(int doubleAnnotationIndex) {
    return root.getStructuredAnnotations().getDoubleAnnotation(doubleAnnotationIndex).sizeOfLinkedAnnotationList();
  }

  public int getFileAnnotationAnnotationCount(int fileAnnotationIndex) {
    return root.getStructuredAnnotations().getFileAnnotation(fileAnnotationIndex).sizeOfLinkedAnnotationList();
  }

  public int getListAnnotationAnnotationCount(int listAnnotationIndex) {
    return root.getStructuredAnnotations().getListAnnotation(listAnnotationIndex).sizeOfLinkedAnnotationList();
  }

  public int getLongAnnotationAnnotationCount(int longAnnotationIndex) {
    return root.getStructuredAnnotations().getLongAnnotation(longAnnotationIndex).sizeOfLinkedAnnotationList();
  }

  public int getMapAnnotationAnnotationCount(int mapAnnotationIndex) {
    return root.getStructuredAnnotations().getMapAnnotation(mapAnnotationIndex).sizeOfLinkedAnnotationList();
  }

  public int getTagAnnotationAnnotationCount(int tagAnnotationIndex) {
    return root.getStructuredAnnotations().getTagAnnotation(tagAnnotationIndex).sizeOfLinkedAnnotationList();
  }

  public int getTermAnnotationAnnotationCount(int termAnnotationIndex) {
    return root.getStructuredAnnotations().getTermAnnotation(termAnnotationIndex).sizeOfLinkedAnnotationList();
  }

  public int getTimestampAnnotationAnnotationCount(int timestampAnnotationIndex)
  {
    return root.getStructuredAnnotations().getTimestampAnnotation(timestampAnnotationIndex).sizeOfLinkedAnnotationList();
  }

  public int getXMLAnnotationAnnotationCount(int xmlAnnotationIndex) {
    return root.getStructuredAnnotations().getXMLAnnotation(xmlAnnotationIndex).sizeOfLinkedAnnotationList();
  }

	public String getLightSourceType(int instrumentIndex, int lightSourceIndex)
	{
		LightSource o = root.getInstrument(instrumentIndex).getLightSource(lightSourceIndex);
		String className = o.getClass().getName();
		return className.substring(
			className.lastIndexOf('.') + 1, className.length());
	}

  public String getShapeType(int roiIndex, int shapeIndex)
  {
    Shape o = root.getROI(roiIndex).getUnion().getShape(shapeIndex);
    String className = o.getClass().getName();
    return className.substring(
      className.lastIndexOf('.') + 1, className.length());
  }

	// -- Entity counting (code generated definitions) --

{% for o in sorted(model.objects.values(), lambda x, y: cmp(x.name, y.name)) %}\
{% if o.name not in fu.METADATA_OBJECT_IGNORE %}\
{% if o.langBaseType != 'Object' %}\
	// Element's text data
	// ${repr(indexes[o.name])}
	public void set${o.name}Value(${o.langBaseType} value, ${indexes_string(indexes[o.name].items()[0][1])})
	{
		OME o0 = root;
		if (o0.sizeOfImageList() == imageIndex)
		{
			o0.addImage(new Image());
		}
		Image o1 = o0.getImage(imageIndex);
		if (o1.getPixels() == null)
		{
			o1.setPixels(new Pixels());
		}
		Pixels o2 = o1.getPixels();
		if (o2.sizeOfTiffDataList() == tiffDataIndex)
		{
			o2.addTiffData(new TiffData());
		}
		TiffData o3 = o2.getTiffData(tiffDataIndex);
		if (o3.getUUID() == null)
		{
			o3.setUUID(new UUID());
		}
		UUID o4 = o3.getUUID();
		o4.setValue(value);
	}

	public ${o.langBaseType} get${o.name}Value(${indexes_string(indexes[o.name].items()[0][1])})
	{
		return root.getImage(imageIndex).getPixels().getTiffData(tiffDataIndex).getUUID().getValue();
	}

{% end %}\
{% if parents[o.name] is not None and not o.isAbstract %}\
	// ${o.name} entity counting
{% for k, v in indexes[o.name].items() %}\
{% if fu.max_occurs_under_parent(model, k, o.name) > 1 and (k not in fu.METADATA_COUNT_IGNORE or o.type not in fu.METADATA_COUNT_IGNORE[k]) %}\
${counter(k, o, v)}\

{% end %}\
{% end %}\
{% end %}\
{% end %}\
{% end %}\

	// -- Entity retrieval (manual definitions) --

	public Boolean getPixelsBinDataBigEndian(int imageIndex, int binDataIndex)
	{
    Boolean bigEndian = root.getImage(imageIndex).getPixels().getBigEndian();
    if (bigEndian != null) {
      return bigEndian;
    }
		return root.getImage(imageIndex).getPixels().getBinData(binDataIndex).getBigEndian();
	}

	/** Gets the UUID associated with this collection of metadata. */
	public String getUUID()
	{
		return root.getUUID();
	}

	/** Gets the Map value associated with this annotation */
	public java.util.Map<String, String> getMapAnnotationValue(int mapAnnotationIndex)
	{
		// The getValue returns an ${lang.omexml_model_package}.MapPairs, 
		// the getMap returns the java.util.Map holding the MapPairs
		return root.getStructuredAnnotations().getMapAnnotation(mapAnnotationIndex).getValue().getMap();
	}

	/** Gets the Map value associated with this generic light source */
	public java.util.Map<String, String> getGenericExcitationSourceMap(int instrumentIndex, int lightSourceIndex)
	{
		GenericExcitationSource o = (GenericExcitationSource) root.getInstrument(instrumentIndex).getLightSource(lightSourceIndex);
		// The first getMap returns an ${lang.omexml_model_package}.Map which
		// extends ${lang.omexml_model_package}.MapPairs, the second getMap returns
		// the java.util.Map holding the MapPairs
		return o.getMap().getMap();
	}

	/** Gets the Map value associated with this imaging environment */
	public java.util.Map<String, String> getImagingEnvironmentMap(int imageIndex)
	{
		// The first getMap returns an ${lang.omexml_model_package}.Map which
		// extends ${lang.omexml_model_package}.MapPairs, the second getMap returns
		// the java.util.Map holding the MapPairs
		return root.getImage(imageIndex).getImagingEnvironment().getMap().getMap();
	}

	// -- Entity retrieval (code generated definitions) --

{% for o in sorted(model.objects.values(), lambda x, y: cmp(x.name, y.name)) %}\
{% if o.name not in fu.METADATA_OBJECT_IGNORE %}\
{% if parents[o.name] is not None and not o.isAbstract and not o.isAbstractProprietary %}\
	//
	// ${o.name} property storage
	//
	// Indexes: ${repr(indexes[o.name])}
	// ${repr(parents[o.name])}
	// Is multi path? ${is_multi_path[o.name]}

{% choose %}\
{% when o.isReference %}\
{% for prop in sorted(o.properties.values() + o.baseObjectProperties, lambda x, y: cmp(x.name, y.name)) %}\
	// ${prop.minOccurs}:${prop.maxOccurs}
	// Is multi path? ${is_multi_path[o.name]}
	// Ignoring ${prop.name} property of reference ${o.name}

{% end %}\
{% end %}\
{% otherwise %}\
\
{% for k, v in indexes[o.name].items() %}\
{% if is_abstract(k) %}\
{% for prop in sorted_properties(model.getObjectByName(k)) %}\
{% choose %}\
{% when not prop.isPrimitive and prop.isChoice %}\
{% if debug %}\
	// Ignoring ${prop.name} of parent abstract type
{% end debug %}\
{% end %}\
{% otherwise %}\
{% for parent_k, parent_v in indexes[k].items() %}\
{% if not prop.isBackReference and not prop.isUnitsEnumeration %}\
	// ${prop.name} accessor from parent ${k}
${getter(k, o, prop, v)}\

{% end %}\
{% end %}\
{% end %}\
{% end %}\
{% end %}\
{% end %}\
{% end %}\
\
{% for prop in sorted(o.properties.values() + o.baseObjectProperties, lambda x, y: cmp(x.name, y.name)) %}\
{% choose %}\
{% when prop.isBackReference %}\
{% if debug %}\
	// Ignoring ${prop.name} back reference
{% end debug %}\
{% end %}\
{% when not prop.isReference and not prop.isAttribute and prop.isComplex() %}\
{% if debug %}\
	// Ignoring ${prop.name} element, complex property
{% end debug %}\
{% end %}\
{% when prop.isUnitsEnumeration %}\
{% if debug %}\
	// Ignoring ${prop.name} element, units enumeration
{% end debug %}\
{% end %}\
{% otherwise %}\
{% for k, v in indexes[o.name].items() %}\
${getter(k, o, prop, v)}\

{% end %}\
{% end %}\
{% end %}\
{% end %}\
{% end %}\
{% end %}\
{% end %}\
{% end %}\
{% end %}\

	// -- Entity storage (manual definitions) --

	public void setPixelsBinDataBigEndian(Boolean bigEndian, int imageIndex, int binDataIndex)
	{
		// Parents: {u'Image': {u'OME': None}}
		// Type is not a reference
		OME o0 = root;
		if (o0.sizeOfImageList() == imageIndex)
		{
			o0.addImage(new Image());
		}
		Image o1 = o0.getImage(imageIndex);
		if (o1.getPixels() == null)
		{
			o1.setPixels(new Pixels());
		}
		Pixels o2 = o1.getPixels();
		o2.setBigEndian(bigEndian);
	}

	public void setMaskBinData(byte[] binData, int ROIIndex, int shapeIndex)
	{
		// TODO: To implement
	}

	/** Sets the UUID associated with this collection of metadata. */
	public void setUUID(String uuid)
	{
		root.setUUID(uuid);
	}

	/** Sets the Map value associated with this annotation */
	public void setMapAnnotationValue(java.util.Map<String, String> value, int mapAnnotationIndex)
	{
		OME o0 = root;
		if (o0.getStructuredAnnotations() == null)
		{
			o0.setStructuredAnnotations(new StructuredAnnotations());
		}
		StructuredAnnotations o1 = o0.getStructuredAnnotations();
		if (o1.sizeOfMapAnnotationList() == mapAnnotationIndex)
		{
			o1.addMapAnnotation(new MapAnnotation());
		}
		MapAnnotation o2 = o1.getMapAnnotation(mapAnnotationIndex);
        ${lang.omexml_model_package}.MapPairs valueAsPairs = new ${lang.omexml_model_package}.MapPairs();
        valueAsPairs.setMap(value);
		o2.setValue(valueAsPairs);
	}

	/** Sets the Map value associated with this generic light source */
	public void setGenericExcitationSourceMap(java.util.Map<String, String> map, int instrumentIndex, int lightSourceIndex)
	{
		OME o0 = root;
		if (o0.sizeOfInstrumentList() == instrumentIndex)
		{
			o0.addInstrument(new Instrument());
		}
		Instrument o1 = o0.getInstrument(instrumentIndex);
		if (o1.sizeOfLightSourceList() == lightSourceIndex)
		{
			o1.addLightSource(new GenericExcitationSource());
		}
		LightSource o2 = o1.getLightSource(lightSourceIndex);
		${lang.omexml_model_package}.Map mapAsOmeMap = new ${lang.omexml_model_package}.Map();
		mapAsOmeMap.setMap(map);
		((GenericExcitationSource)o2).setMap(mapAsOmeMap);
	}

	/** Sets the Map value associated with this imaging environment */
	public void setImagingEnvironmentMap(java.util.Map<String, String> map, int imageIndex)
	{
		OME o0 = root;
		if (o0.sizeOfImageList() == imageIndex)
		{
			o0.addImage(new Image());
		}
		Image o1 = o0.getImage(imageIndex);
		if (o1.getImagingEnvironment() == null)
		{
			o1.setImagingEnvironment(new ImagingEnvironment());
		}
		ImagingEnvironment o2 = o1.getImagingEnvironment();
		${lang.omexml_model_package}.Map mapAsOmeMap = new ${lang.omexml_model_package}.Map();
		mapAsOmeMap.setMap(map);
		o2.setMap(mapAsOmeMap);
	}

	// -- Entity storage (code generated definitions) --

{% for o in sorted(model.objects.values(), lambda x, y: cmp(x.name, y.name)) %}\
{% if o.name not in fu.METADATA_OBJECT_IGNORE %}\
{% if parents[o.name] is not None and not o.isAbstract and not o.isAbstractProprietary %}\
	//
	// ${o.name} property storage
	//
	// ${repr(parents[o.name])}
	// Is multi path? ${is_multi_path[o.name]}

{% choose %}\
{% when o.isReference %}\
{% for prop in sorted(o.properties.values() + o.baseObjectProperties, lambda x, y: cmp(x.name, y.name)) %}\
	// ${prop.minOccurs}:${prop.maxOccurs}
	// Is multi path? ${is_multi_path[o.name]}
	// Ignoring ${prop.name} property of reference ${o.name}

{% end %}\
{% end %}\
{% otherwise %}\
\
{% for k, v in indexes[o.name].items() %}\
{% if is_abstract(k) %}\
{% for prop in sorted_properties(model.getObjectByName(k)) %}\
{% choose %}\
{% when not prop.isPrimitive and prop.isChoice %}\
{% if debug %}\
	// Ignoring ${prop.name} of parent abstract type
{% end debug %}\
{% end %}\
{% otherwise %}\
{% for parent_k, parent_v in indexes[k].items() %}\
{% if not prop.isBackReference and not prop.isUnitsEnumeration %}\
	// ${prop.name} accessor from parent ${k}
${setter(k, o, prop, v)}\

{% end %}\
{% end %}\
{% end %}\
{% end %}\
{% end %}\
{% end %}\
{% end %}\
\
{% for prop in sorted(o.properties.values() + o.baseObjectProperties, lambda x, y: cmp(x.name, y.name)) %}\
{% choose %}\
{% when prop.isBackReference %}\
{% if debug %}\
	// Ignoring ${prop.name} back reference
{% end debug %}\
{% end %}\
{% when not prop.isReference and not prop.isAttribute and prop.isComplex() %}\
{% if debug %}\
	// Ignoring ${prop.name} element, complex property
{% end debug %}\
{% end %}\
{% when prop.isUnitsEnumeration %}\
{% if debug %}\
	// Ignoring ${prop.name} element, units enumeration
{% end debug %}\
{% end %}\
{% otherwise %}\
{% for k, v in indexes[o.name].items() %}\
${setter(k, o, prop, v)}\

{% end %}\
{% end %}\
{% end %}\
{% end %}\
{% end %}\
{% end %}\
{% end %}\
{% end %}\
{% end %}\
}
