{% def indexes_string(indexes) %}${", ".join(indexes)}{% end %}\
\
{% def indexes_name_string(indexes) %}${", ".join([v.replace('int ', '') for v in indexes])}{% end %}\
\
{% def index_name_string(name) %}\
{% choose %}\
{% when name[:2].isupper()%}${name}Index{% end %}\
{% otherwise %}${name[:1].lower()}${name[1:]}Index{% end %}\
{% end %}\
{% end %}\
\
{% def index_string(name) %}int ${index_name_string(name)}{% end %}\
\
{% def counter(parent, obj, indexes) %}\
	public int get{% if is_multi_path[o.name] %}${parent}{% end %}${obj.name}Count(${indexes_string(indexes[:-1])})
	{
		for (Iterator iter = delegates.iterator(); iter.hasNext();)
		{
			Object o = iter.next();
			if (o instanceof MetadataRetrieve)
			{
				MetadataRetrieve retrieve = (MetadataRetrieve) o;
				int result = retrieve.get{% if is_multi_path[o.name] %}${parent}{% end %}${obj.name}Count(${indexes_name_string(indexes[:-1])});
				if (result >= 0) return result;
			}
		}
		return -1;
	}
{% end %}\
\
{% def getter(parent, obj, prop, indexes) %}\
{% choose %}\
{% when len(indexes) > 0 and prop.maxOccurs > 1 %}\
	public ${prop.metadataStoreType} get{% if is_multi_path[o.name] %}${parent}{% end %}${obj.name}${prop.name}(${indexes_string(indexes)}, ${index_string(prop.name)})
	{
		for (Iterator iter = delegates.iterator(); iter.hasNext();)
		{
			Object o = iter.next();
			if (o instanceof MetadataRetrieve)
			{
				MetadataRetrieve retrieve = (MetadataRetrieve) o;
				${prop.metadataStoreType} result = retrieve.get{% if is_multi_path[o.name] %}${parent}{% end %}${obj.name}${prop.name}(${indexes_name_string(indexes)}, ${index_name_string(prop.name)});
				if (result != null) return result;
			}
		}
		return null;
	}
{% end %}\
{% when len(indexes) > 0 %}\
	public ${prop.metadataStoreType} get{% if is_multi_path[o.name] %}${parent}{% end %}${obj.name}${prop.name}(${indexes_string(indexes)})
	{
		for (Iterator iter = delegates.iterator(); iter.hasNext();)
		{
			Object o = iter.next();
			if (o instanceof MetadataRetrieve)
			{
				MetadataRetrieve retrieve = (MetadataRetrieve) o;
				${prop.metadataStoreType} result = retrieve.get{% if is_multi_path[o.name] %}${parent}{% end %}${obj.name}${prop.name}(${indexes_name_string(indexes)});
				if (result != null) return result;
			}
		}
		return null;
	}
{% end %}\
{% otherwise %}\
	public ${prop.metadataStoreType} get{% if is_multi_path[o.name] %}${parent}{% end %}${obj.name}${prop.name}(${index_string(prop.name)})
	{
		for (Iterator iter = delegates.iterator(); iter.hasNext();)
		{
			Object o = iter.next();
			if (o instanceof MetadataRetrieve)
			{
				MetadataRetrieve retrieve = (MetadataRetrieve) o;
				${prop.metadataStoreType} result = retrieve.get{% if is_multi_path[o.name] %}${parent}{% end %}${obj.name}${prop.name}(${index_name_string(prop.name)});
				if (result != null) return result;
			}
		}
		return null;
	}
{% end %}\
{% end %}\
{% end %}\
\
{% def setter(parent, obj, prop, indexes) %}\
{% choose %}\
{% when len(indexes) > 0 and prop.maxOccurs > 1 %}\
	public void set{% if is_multi_path[o.name] %}${parent}{% end %}${obj.name}${prop.name}(${prop.metadataStoreType} ${prop.javaArgumentName}, ${indexes_string(indexes)}, ${index_string(prop.name)})
	{
		for (Iterator iter = delegates.iterator(); iter.hasNext();)
		{
			Object o = iter.next();
			if (o instanceof MetadataStore)
			{
				MetadataStore store = (MetadataStore) o;
				store.set{% if is_multi_path[o.name] %}${parent}{% end %}${obj.name}${prop.name}(${prop.javaArgumentName}, ${indexes_name_string(indexes)}, ${index_name_string(prop.name)});
			}
		}
	}
{% end %}\
{% when len(indexes) > 0 %}\
	public void set{% if is_multi_path[o.name] %}${parent}{% end %}${obj.name}${prop.name}(${prop.metadataStoreType} ${prop.javaArgumentName}, ${indexes_string(indexes)})
	{
		for (Iterator iter = delegates.iterator(); iter.hasNext();)
		{
			Object o = iter.next();
			if (o instanceof MetadataStore)
			{
				MetadataStore store = (MetadataStore) o;
				store.set{% if is_multi_path[o.name] %}${parent}{% end %}${obj.name}${prop.name}(${prop.javaArgumentName}, ${indexes_name_string(indexes)});
			}
		}
	}
{% end %}\
{% otherwise %}\
	public void set{% if is_multi_path[o.name] %}${parent}{% end %}${obj.name}${prop.name}(${prop.metadataStoreType} ${prop.javaArgumentName})
	{
		for (Iterator iter = delegates.iterator(); iter.hasNext();)
		{
			Object o = iter.next();
			if (o instanceof MetadataStore)
			{
				MetadataStore store = (MetadataStore) o;
				store.set{% if is_multi_path[o.name] %}${parent}{% end %}${obj.name}${prop.name}(${prop.javaArgumentName});
			}
		}
	}
{% end %}\
{% end %}\
{% end %}\
\
{% python
	def parent_object(name):
		return model.getObjectByName(parents[name].keys()[0])

	def is_abstract(name):
		o = model.getObjectByName(name)
		if o is not None and \
		   (o.isAbstract or o.isAbstractProprietary):
			return True
		return False

	def is_parent_abstract(name):
		parent = parent_object(name)
		if parent is not None and \
		   (parent.isAbstract or parent.isAbstractProprietary):
			return True
		return False

	def sorted_properties(o):
		return sorted(o.properties.values() + o.baseObjectProperties, lambda x, y: cmp(x.name, y.name))

	def accessor_string(name, max_occurs, level):
		"""Makes a Java method accessor string from an index name."""
		return accessor_string_complex(name, max_occurs, level)['accessor']

	def accessor_string_complex(name, max_occurs, level):
		"""Makes a Java method accessor string from an index name."""
		to_return = {'level': level, 'name': name, 'max_occurs': max_occurs}
		if max_occurs == 1:
			to_return['accessor'] = "get%s()" % (name)
			return to_return
		if name[:2].isupper():
			to_return['accessor'] = "get%s(%sIndex)" % (name, name)
			return to_return
		to_return['accessor'] = "get%s(%s%sIndex)" % (name, name[:1].lower(), name[1:])
		return to_return

	def accessor(name, parent, prop, func=accessor_string):
		results = dict()
		fu.resolve_hierarchy(results, model, {name: parents[name]}, func, min_occurs=1)
		if parent not in results.keys():
			raise Exception("Invalid KEY No accessor for: name:%s parent:%s prop:%s === %s" % (name, parent, prop, results))
		if len(results.keys()) == 0:
			raise Exception("Zero KEYS No accessor for: name:%s parent:%s prop:%s === %s" % (name, parent, prop, results))
		return results[parent]
%}\
\
\
/*
 * #%L
 * OME-XML Java library for working with OME-XML metadata structures.
 * %%
 * Copyright (C) 2006 - 2013 Open Microscopy Environment:
 *   - Massachusetts Institute of Technology
 *   - National Institutes of Health
 *   - University of Dundee
 *   - Board of Regents of the University of Wisconsin-Madison
 *   - Glencoe Software, Inc.
 * %%
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice,
 *    this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDERS OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 *
 * The views and conclusions contained in the software and documentation are
 * those of the authors and should not be interpreted as representing official
 * policies, either expressed or implied, of any organization.
 * #L%
 */

/*-----------------------------------------------------------------------------
 *
 * THIS IS AUTOMATICALLY GENERATED CODE.  DO NOT MODIFY.
 *
 *-----------------------------------------------------------------------------
 */

package loci.formats.meta;

import java.util.Iterator;
import java.util.List;

import ome.xml.model.*;
import ome.xml.model.enums.*;
import ome.xml.model.primitives.*;

/**
 * A metadata store which delegates the actual storage to one or more <i>sub</i>
 * metadata stores.
 *
 * <dl><dt><b>Source code:</b></dt>
 * <dd><a href="http://trac.openmicroscopy.org.uk/ome/browser/bioformats.git/components/bio-formats/src/loci/formats/meta/AggregateMetadata.java">Trac</a>,
 * <a href="http://git.openmicroscopy.org/?p=bioformats.git;a=blob;f=components/bio-formats/src/loci/formats/meta/AggregateMetadata.java;hb=HEAD">Gitweb</a></dd></dl>
 *
 * @author Chris Allan callan at blackcat.ca
 * @author Curtis Rueden ctrueden at wisc.edu
 */
public class AggregateMetadata implements IMetadata
{
	// -- Fields --

	/** The active metadata store delegates. */
	private List delegates;

	// -- Constructor --

	/**
	 * Creates a new instance.
	 * @param delegates of type {@link MetadataRetrieve}
	 *   and/or {@link MetadataStore}.
	 */
	public AggregateMetadata(List delegates)
	{
		this.delegates = delegates;
	}

	// -- MetadataStore API methods --

	/* @see MetadataStore#createRoot() */
	public void createRoot()
	{
		for (Iterator iter = delegates.iterator(); iter.hasNext();)
		{
			Object o = iter.next();
			if (o instanceof MetadataStore)
			{
				((MetadataStore) o).createRoot();
			}
		}
	}

	/**
	 * Unsupported with an AggregateMetadata.
	 * @throws RuntimeException Always.
	 */
	public Object getRoot()
	{
		throw new RuntimeException("Unsupported with AggregateMetadata. " +
		                           "Use getDelegates() and getRoot().");
	}

	/**
	 * Unsupported with an AggregateMetadata.
	 * @throws RuntimeException Always.
	 */
	public void setRoot(Object root)
	{
		throw new RuntimeException("Unsupported with AggregateMetadata. " +
	                               "Use getDelegates() and setRoot().");
	}


	// -- AggregateMetadata API methods --


	// -- Entity counting (manual definitions) --

	public int getPixelsBinDataCount(int imageIndex)
	{
		for (Iterator iter = delegates.iterator(); iter.hasNext();)
		{
			Object o = iter.next();
			if (o instanceof MetadataRetrieve)
			{
				MetadataRetrieve retrieve = (MetadataRetrieve) o;
				int result = retrieve.getPixelsBinDataCount(imageIndex);
				if (result >= 0) return result;
			}
		}
		return -1;
	}

  public int getBooleanAnnotationAnnotationCount(int booleanAnnotationIndex) {
    for (Iterator iter = delegates.iterator(); iter.hasNext();) {
      Object o = iter.next();
      if (o instanceof MetadataRetrieve) {
        MetadataRetrieve retrieve = (MetadataRetrieve) o;
        int result =
          retrieve.getBooleanAnnotationAnnotationCount(booleanAnnotationIndex);
        if (result >= 0) return result;
      }
    }
    return -1;
  }

  public int getCommentAnnotationAnnotationCount(int commentAnnotationIndex) {
    for (Iterator iter = delegates.iterator(); iter.hasNext();) {
      Object o = iter.next();
      if (o instanceof MetadataRetrieve) {
        MetadataRetrieve retrieve = (MetadataRetrieve) o;
        int result =
          retrieve.getCommentAnnotationAnnotationCount(commentAnnotationIndex);
        if (result >= 0) return result;
      }
    }
    return -1;
  }

  public int getDoubleAnnotationAnnotationCount(int doubleAnnotationIndex) {
    for (Iterator iter = delegates.iterator(); iter.hasNext();) {
      Object o = iter.next();
      if (o instanceof MetadataRetrieve) {
        MetadataRetrieve retrieve = (MetadataRetrieve) o;
        int result =
          retrieve.getDoubleAnnotationAnnotationCount(doubleAnnotationIndex);
        if (result >= 0) return result;
      }
    }
    return -1;
  }

  public int getFileAnnotationAnnotationCount(int fileAnnotationIndex) {
    for (Iterator iter = delegates.iterator(); iter.hasNext();) {
      Object o = iter.next();
      if (o instanceof MetadataRetrieve) {
        MetadataRetrieve retrieve = (MetadataRetrieve) o;
        int result =
          retrieve.getFileAnnotationAnnotationCount(fileAnnotationIndex);
        if (result >= 0) return result;
      }
    }
    return -1;
  }

  public int getListAnnotationAnnotationCount(int listAnnotationIndex) {
    for (Iterator iter = delegates.iterator(); iter.hasNext();) {
      Object o = iter.next();
      if (o instanceof MetadataRetrieve) {
        MetadataRetrieve retrieve = (MetadataRetrieve) o;
        int result =
          retrieve.getListAnnotationAnnotationCount(listAnnotationIndex);
        if (result >= 0) return result;
      }
    }
    return -1;
  }

  public int getLongAnnotationAnnotationCount(int longAnnotationIndex) {
    for (Iterator iter = delegates.iterator(); iter.hasNext();) {
      Object o = iter.next();
      if (o instanceof MetadataRetrieve) {
        MetadataRetrieve retrieve = (MetadataRetrieve) o;
        int result =
          retrieve.getLongAnnotationAnnotationCount(longAnnotationIndex);
        if (result >= 0) return result;
      }
    }
    return -1;
  }

  public int getTagAnnotationAnnotationCount(int tagAnnotationIndex) {
    for (Iterator iter = delegates.iterator(); iter.hasNext();) {
      Object o = iter.next();
      if (o instanceof MetadataRetrieve) {
        MetadataRetrieve retrieve = (MetadataRetrieve) o;
        int result =
          retrieve.getTagAnnotationAnnotationCount(tagAnnotationIndex);
        if (result >= 0) return result;
      }
    }
    return -1;
  }

  public int getTermAnnotationAnnotationCount(int termAnnotationIndex) {
    for (Iterator iter = delegates.iterator(); iter.hasNext();) {
      Object o = iter.next();
      if (o instanceof MetadataRetrieve) {
        MetadataRetrieve retrieve = (MetadataRetrieve) o;
        int result =
          retrieve.getTermAnnotationAnnotationCount(termAnnotationIndex);
        if (result >= 0) return result;
      }
    }
    return -1;
  }

  public int getTimestampAnnotationAnnotationCount(int timestampAnnotationIndex)
  {
    for (Iterator iter = delegates.iterator(); iter.hasNext();) {
      Object o = iter.next();
      if (o instanceof MetadataRetrieve) {
        MetadataRetrieve retrieve = (MetadataRetrieve) o;
        int result = retrieve.getTimestampAnnotationAnnotationCount(
          timestampAnnotationIndex);
        if (result >= 0) return result;
      }
    }
    return -1;
  }

  public int getXMLAnnotationAnnotationCount(int xmlAnnotationIndex) {
    for (Iterator iter = delegates.iterator(); iter.hasNext();) {
      Object o = iter.next();
      if (o instanceof MetadataRetrieve) {
        MetadataRetrieve retrieve = (MetadataRetrieve) o;
        int result =
          retrieve.getXMLAnnotationAnnotationCount(xmlAnnotationIndex);
        if (result >= 0) return result;
      }
    }
    return -1;
  }

	public String getLightSourceType(int instrumentIndex, int lightSourceIndex)
	{
		for (Iterator iter = delegates.iterator(); iter.hasNext();)
		{
			Object o = iter.next();
			if (o instanceof MetadataRetrieve)
			{
				MetadataRetrieve retrieve = (MetadataRetrieve) o;
				return retrieve.getLightSourceType(instrumentIndex, lightSourceIndex);
			}
		}
		return null;
	}

  public String getShapeType(int roiIndex, int shapeIndex)
  {
    for (Iterator iter = delegates.iterator(); iter.hasNext();)
    {
      Object o = iter.next();
      if (o instanceof MetadataRetrieve)
      {
        MetadataRetrieve retrieve = (MetadataRetrieve) o;
        return retrieve.getShapeType(roiIndex, shapeIndex);
      }
    }
    return null;
  }

	// -- Entity counting (code generated definitions) --

{% for o in sorted(model.objects.values(), lambda x, y: cmp(x.name, y.name)) %}\
{% if o.name not in fu.METADATA_OBJECT_IGNORE %}\
{% if o.javaType != 'Object' %}\
	// Element's text data
	// ${repr(indexes[o.name])}
	public void set${o.name}Value(${o.javaType} value, ${indexes_string(indexes[o.name].items()[0][1])})
	{
		for (Iterator iter = delegates.iterator(); iter.hasNext();)
		{
			Object o = iter.next();
			if (o instanceof MetadataStore)
			{
				((MetadataStore) o).set${o.name}Value(value, ${indexes_name_string(indexes[o.name].items()[0][1])});
			}
		}
	}

	public ${o.javaType} get${o.name}Value(${indexes_string(indexes[o.name].items()[0][1])})
	{
		for (Iterator iter = delegates.iterator(); iter.hasNext();)
		{
			Object o = iter.next();
			if (o instanceof MetadataRetrieve)
			{
				${o.javaType} result = ((MetadataRetrieve) o).get${o.name}Value(${indexes_name_string(indexes[o.name].items()[0][1])});
				if (result != null)
				{
					return result;
				}
			}
		}
		return null;
	}

{% end %}\
{% if parents[o.name] is not None and not o.isAbstract %}\
	// ${o.name} entity counting
{% for k, v in indexes[o.name].items() %}\
{% if fu.max_occurs_under_parent(model, k, o.name) > 1 \
      and (k not in fu.METADATA_COUNT_IGNORE or o.type not in fu.METADATA_COUNT_IGNORE[k]) %}\
${counter(k, o, v)}\

{% end %}\
{% end %}\
{% end %}\
{% end %}\
{% end %}\

	// -- Entity retrieval (manual definitions) --

	public Boolean getPixelsBinDataBigEndian(int imageIndex, int binDataIndex)
	{
		for (Iterator iter = delegates.iterator(); iter.hasNext();)
		{
			Object o = iter.next();
			if (o instanceof MetadataRetrieve)
			{
				MetadataRetrieve retrieve = (MetadataRetrieve) o;
				Boolean result = retrieve.getPixelsBinDataBigEndian(imageIndex, binDataIndex);
				if (result != null) return result;
			}
		}
		return null;
	}

	// -- Entity retrieval (code generated definitions) --

	/** Gets the UUID associated with this collection of metadata. */
	public String getUUID()
	{
		for (Iterator iter = delegates.iterator(); iter.hasNext();)
		{
			Object o = iter.next();
			if (o instanceof MetadataRetrieve)
			{
				MetadataRetrieve retrieve = (MetadataRetrieve) o;
				String result = retrieve.getUUID();
				if (result != null) return result;
			}
		}
		return null;
	}

{% for o in sorted(model.objects.values(), lambda x, y: cmp(x.name, y.name)) %}\
{% if o.name not in fu.METADATA_OBJECT_IGNORE %}\
{% if parents[o.name] is not None and not o.isAbstract and not o.isAbstractProprietary %}\
	//
	// ${o.name} property storage
	//
	// Indexes: ${repr(indexes[o.name])}
	// ${repr(parents[o.name])}
	// Is multi path? ${is_multi_path[o.name]}

{% choose %}\
{% when o.isReference %}\
{% for prop in sorted(o.properties.values() + o.baseObjectProperties, lambda x, y: cmp(x.name, y.name)) %}\
	// ${prop.minOccurs}:${prop.maxOccurs}
	// Is multi path? ${is_multi_path[o.name]}
	// Ignoring ${prop.name} property of reference ${o.name}

{% end %}\
{% end %}\
{% otherwise %}\
\
{% for k, v in indexes[o.name].items() %}\
{% if is_abstract(k) %}\
{% for prop in sorted_properties(model.getObjectByName(k)) %}\
{% choose %}\
{% when not prop.isPrimitive and prop.isChoice %}\
	// Ignoring ${prop.name} of parent abstract type
{% end %}\
{% otherwise %}\
{% for parent_k, parent_v in indexes[k].items() %}\
{% if not prop.isBackReference %}\
	// ${prop.name} accessor from parent ${k}
${getter(k, o, prop, v)}\

{% end %}\
{% end %}\
{% end %}\
{% end %}\
{% end %}\
{% end %}\
{% end %}\
\
{% for prop in sorted(o.properties.values() + o.baseObjectProperties, lambda x, y: cmp(x.name, y.name)) %}\
{% choose %}\
{% when prop.isBackReference %}\
	// Ignoring ${prop.name} back reference
{% end %}\
{% when not prop.isReference and not prop.isAttribute and prop.isComplex() %}\
	// Ignoring ${prop.name} element, complex property
{% end %}\
{% otherwise %}\
{% for k, v in indexes[o.name].items() %}\
${getter(k, o, prop, v)}\

{% end %}\
{% end %}\
{% end %}\
{% end %}\
{% end %}\
{% end %}\
{% end %}\
{% end %}\
{% end %}\

	// -- Entity storage (manual definitions) --

	public void setPixelsBinDataBigEndian(Boolean bigEndian, int imageIndex, int binDataIndex)
	{
		for (Iterator iter = delegates.iterator(); iter.hasNext();)
		{
			Object o = iter.next();
			if (o instanceof MetadataStore)
			{
				MetadataStore store = (MetadataStore) o;
				store.setPixelsBinDataBigEndian(bigEndian, imageIndex, binDataIndex);
			}
		}
	}

	public void setMaskBinData(byte[] binData, int ROIIndex, int shapeIndex)
	{
		for (Iterator iter = delegates.iterator(); iter.hasNext();)
		{
			Object o = iter.next();
			if (o instanceof MetadataStore)
			{
				MetadataStore store = (MetadataStore) o;
				store.setMaskBinData(binData, ROIIndex, shapeIndex);
			}
		}
	}

	// -- Entity storage (code generated definitions) --

	/** Sets the UUID associated with this collection of metadata. */
	public void setUUID(String uuid)
	{
		for (Iterator iter = delegates.iterator(); iter.hasNext();)
		{
			Object o = iter.next();
			if (o instanceof MetadataStore)
			{
				((MetadataStore) o).setUUID(uuid);
			}
		}
	}

{% for o in sorted(model.objects.values(), lambda x, y: cmp(x.name, y.name)) %}\
{% if o.name not in fu.METADATA_OBJECT_IGNORE %}\
{% if parents[o.name] is not None and not o.isAbstract and not o.isAbstractProprietary %}\
	//
	// ${o.name} property storage
	//
	// ${repr(parents[o.name])}
	// Is multi path? ${is_multi_path[o.name]}

{% choose %}\
{% when o.isReference %}\
{% for prop in sorted(o.properties.values() + o.baseObjectProperties, lambda x, y: cmp(x.name, y.name)) %}\
	// ${prop.minOccurs}:${prop.maxOccurs}
	// Is multi path? ${is_multi_path[o.name]}
	// Ignoring ${prop.name} property of reference ${o.name}

{% end %}\
{% end %}\
{% otherwise %}\
\
{% for k, v in indexes[o.name].items() %}\
{% if is_abstract(k) %}\
{% for prop in sorted_properties(model.getObjectByName(k)) %}\
{% choose %}\
{% when not prop.isPrimitive and prop.isChoice %}\
	// Ignoring ${prop.name} of parent abstract type
{% end %}\
{% otherwise %}\
{% for parent_k, parent_v in indexes[k].items() %}\
{% if not prop.isBackReference %}\
	// ${prop.name} accessor from parent ${k}
${setter(k, o, prop, v)}\

{% end %}\
{% end %}\
{% end %}\
{% end %}\
{% end %}\
{% end %}\
{% end %}\
\
{% for prop in sorted(o.properties.values() + o.baseObjectProperties, lambda x, y: cmp(x.name, y.name)) %}\
{% choose %}\
{% when prop.isBackReference %}\
	// Ignoring ${prop.name} back reference
{% end %}\
{% when not prop.isReference and not prop.isAttribute and prop.isComplex() %}\
	// Ignoring ${prop.name} element, complex property
{% end %}\
{% otherwise %}\
{% for k, v in indexes[o.name].items() %}\
${setter(k, o, prop, v)}\

{% end %}\
{% end %}\
{% end %}\
{% end %}\
{% end %}\
{% end %}\
{% end %}\
{% end %}\
{% end %}\
}
