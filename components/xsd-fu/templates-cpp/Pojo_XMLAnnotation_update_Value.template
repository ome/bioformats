	std::vector<xerces::dom::element> Value_nodeList = getChildrenByTagName(element, "Value");
        if (Value_nodeList.size() > 1)
	  {
	    // TODO: Should be its own Exception
            // TODO: Include size informtion.
	    throw std::runtime_error("${klass.name} Value node list size != 1");
	  }
	else if (Value_nodeList.size() != 0)
	  {
            // TODO: Does this need implementing in C++?  What is its purpose?
            // May just be to convert the child nodes to string; but if so why need a transform?
	    // Element property Value which is not complex (has no
	    // sub-elements)
	    // java.io.StringWriter sw = new java.io.StringWriter();
	    // javax.xml.transform.stream.StreamResult sr =
	    //   new javax.xml.transform.stream.StreamResult(sw);
	    // javax.xml.transform.TransformerFactory tf =
	    //   javax.xml.transform.TransformerFactory.newInstance();

	    // try
	    //   {
	    //     javax.xml.transform.Transformer t = tf.newTransformer(
	    //     						      new javax.xml.transform.stream.StreamSource(
	    //     												  this.getClass().getResourceAsStream("StripWhitespace.xsl")));
	    //     t.setOutputProperty(
	    //     		    javax.xml.transform.OutputKeys.OMIT_XML_DECLARATION, "yes");
	    //     t.setOutputProperty(
	    //     		    javax.xml.transform.OutputKeys.INDENT, "no");
	    //     NodeList childNodeList = Value_nodeList.get(0).getChildNodes();
	    //     for (int i = 0; i < childNodeList.getLength(); i++)
	    //       {
	    //         try {
	    //           t.transform(new javax.xml.transform.dom.DOMSource(
	    //     							childNodeList.item(i)), sr);
	    //         }
	    //         catch (javax.xml.transform.TransformerException te) {
	    //           LOGGER.warn("Failed to transform node #" + i, te);
	    //         }
	    //       }
	    //     setValue(sw.toString().trim());
	    //   }
	    // catch (Exception e)
	    //   {
	    //     throw new RuntimeException(e);
	    //   }
	  }
