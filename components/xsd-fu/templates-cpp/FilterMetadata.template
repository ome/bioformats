{% def indexes_string(indexes) %}${", ".join(map(lambda x: lang.index_string(x),indexes))}{% end %}\
\
{% def indexes_name_string(indexes) %}${", ".join(map(lambda x: lang.index_argname(x),indexes))}{% end %}\
\
{% def index_name_string(name) %}\
{% choose %}\
{% when name[:2].isupper()%}${name}Index{% end %}\
{% otherwise %}${name[:1].lower()}${name[1:]}Index{% end %}\
{% end %}\
{% end %}\
\
{% def index_string(name) %}index_type ${index_name_string(name)}{% end %}\
\
{% def setter(parent, obj, prop, indexes) %}\
{% choose %}\
{% when len(indexes) > 0 and prop.maxOccurs > 1 %}\
{% if fu.SOURCE_TYPE == "header" %}\
        // Documented in base class.
	void
        set{% if is_multi_path[o.name] %}${parent}{% end %}${obj.name}${prop.name}(${prop.metadataStoreArgType} ${prop.argumentName}, ${indexes_string(indexes)}, ${index_string(prop.name)});
{% end header %}\
{% if fu.SOURCE_TYPE == "source" %}\
      void
      FilterMetadata::set{% if is_multi_path[o.name] %}${parent}{% end %}${obj.name}${prop.name}(${prop.metadataStoreArgType} ${prop.argumentName}, ${indexes_string(indexes)}, ${index_string(prop.name)})
      {
{% if prop.langType == "std::string" %}\
        /// @todo Implement DataTools.sanitize if needed for C++
        // ${prop.argumentName} = filter? DataTools.sanitize(${prop.argumentName}) : ${prop.argumentName};
{% end %}\
        store->set{% if is_multi_path[o.name] %}${parent}{% end %}${obj.name}${prop.name}(${prop.argumentName}, ${indexes_name_string(indexes)}, ${index_name_string(prop.name)});
      }
{% end source %}\
{% end %}\
{% when len(indexes) > 0 %}\
{% if fu.SOURCE_TYPE == "header" %}\
        // Documented in base class.
	void
        set{% if is_multi_path[o.name] %}${parent}{% end %}${obj.name}${prop.name}(${prop.metadataStoreArgType} ${prop.argumentName}, ${indexes_string(indexes)});
{% end header %}\
{% if fu.SOURCE_TYPE == "source" %}\
      void
      FilterMetadata::set{% if is_multi_path[o.name] %}${parent}{% end %}${obj.name}${prop.name}(${prop.metadataStoreArgType} ${prop.argumentName}, ${indexes_string(indexes)})
      {
{% if prop.langType == "std::string" %}\
        /// @todo: Implement DataTools.sanitize if needed for C++
        // ${prop.argumentName} = filter? DataTools.sanitize(${prop.argumentName}) : ${prop.argumentName};
{% end %}\
        store->set{% if is_multi_path[o.name] %}${parent}{% end %}${obj.name}${prop.name}(${prop.argumentName}, ${indexes_name_string(indexes)});
      }
{% end source %}\
{% end %}\
{% otherwise %}\
{% if fu.SOURCE_TYPE == "header" %}\
        // Documented in base class.
	void
        set{% if is_multi_path[o.name] %}${parent}{% end %}${obj.name}${prop.name}(${prop.metadataStoreArgType} ${prop.argumentName});
{% end header %}\
{% if fu.SOURCE_TYPE == "source" %}\
      void
      FilterMetadata::set{% if is_multi_path[o.name] %}${parent}{% end %}${obj.name}${prop.name}(${prop.metadataStoreArgType} ${prop.argumentName})
      {
{% if prop.langType == "String" %}\
        // TODO: Implement DataTools.sanitize if needed for C++
        // ${prop.argumentName} = filter? DataTools.sanitize(${prop.argumentName}) : ${prop.argumentName};
{% end %}\
        store->set{% if is_multi_path[o.name] %}${parent}{% end %}${obj.name}${prop.name}(${prop.argumentName});
      }
{% end source %}\
{% end %}\
{% end %}\

{% end %}\
\
{% python
	def is_abstract(name):
		o = model.getObjectByName(name)
		if o is not None and \
		   (o.isAbstract or o.isAbstractProprietary):
			return True
		return False

	def sorted_properties(o):
		return sorted(o.properties.values() + o.baseObjectProperties, lambda x, y: cmp(x.name, y.name))

	def accessor_string(name, max_occurs, level):
		"""Makes a Java method accessor string from an index name."""
		return accessor_string_complex(name, max_occurs, level)['accessor']

	def accessor_string_complex(name, max_occurs, level):
		"""Makes a Java method accessor string from an index name."""
		to_return = {'level': level, 'name': name, 'max_occurs': max_occurs}
		if max_occurs == 1:
			to_return['accessor'] = "get%s()" % (name)
			return to_return
		if name[:2].isupper():
			to_return['accessor'] = "get%s(%sIndex)" % (name, name)
			return to_return
		to_return['accessor'] = "get%s(%s%sIndex)" % (name, name[:1].lower(), name[1:])
		return to_return

	def accessor(name, parent, prop, func=accessor_string):
		results = dict()
		fu.resolve_hierarchy(results, model, {name: parents[name]}, func, min_occurs=1)
		if parent not in results.keys():
			raise Exception("Invalid KEY No accessor for: name:%s parent:%s prop:%s === %s" % (name, parent, prop, results))
		if len(results.keys()) == 0:
			raise Exception("Zero KEYS No accessor for: name:%s parent:%s prop:%s === %s" % (name, parent, prop, results))
		return results[parent]
%}\
\
\
/*
 * #%L
 * OME-BIOFORMATS C++ library for image IO.
 * %%
 * Copyright © 2006 - 2014 Open Microscopy Environment:
 *   - Massachusetts Institute of Technology
 *   - National Institutes of Health
 *   - University of Dundee
 *   - Board of Regents of the University of Wisconsin-Madison
 *   - Glencoe Software, Inc.
 * %%
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice,
 *    this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDERS OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 *
 * The views and conclusions contained in the software and documentation are
 * those of the authors and should not be interpreted as representing official
 * policies, either expressed or implied, of any organization.
 * #L%
 */

/*─────────────────────────────────────────────────────────────────────────────
 *
 * THIS IS AUTOMATICALLY GENERATED CODE.  DO NOT MODIFY.
 *
 *─────────────────────────────────────────────────────────────────────────────
 */

{% if fu.SOURCE_TYPE == "header" %}\
#ifndef ${fu.GUARD}
#define ${fu.GUARD}

#include <ome/xml/meta/MetadataStore.h>
{% end header%}\
{% if fu.SOURCE_TYPE == "source" %}\
#include <ome/xml/meta/FilterMetadata.h>

{% for include in model.header_dependencies %}\
#include <${include}>
{% end for%}\
{% end source%}\

namespace ome
{
  namespace xml
  {
    namespace meta
    {

{% if fu.SOURCE_TYPE == "header" %}\
      /**
       * Filtered metadata store.
       *
       * An implementation of MetadataStore which removes unprintable
       * characters from metadata values before storing them in a delegate
       * MetadataStore.
       */
      class FilterMetadata : virtual public MetadataStore
      {
      private:
        /// The wrapped metadata store.
	std::shared_ptr<MetadataStore> store;
        /// Is filtering enabled?
	bool filter;

      public:
        /**
         * Constructor.
         *
         * @param store the metadata store to wrap.
         * @param filter @c true to enable filtering, @c false to
         * disable.
         */
        FilterMetadata(std::shared_ptr<MetadataStore>& store,
                       bool filter);
{% end header %}\
{% if fu.SOURCE_TYPE == "source" %}\
      FilterMetadata::FilterMetadata(std::shared_ptr<MetadataStore>& store,
                                     bool filter):
        store(store),
        filter(filter)
      {
      }
{% end source %}\

{% if fu.SOURCE_TYPE == "header" %}\
        /// Destructor.
        virtual
        ~FilterMetadata();
{% end header %}\
{% if fu.SOURCE_TYPE == "source" %}\
      FilterMetadata::~FilterMetadata()
      {
      }
{% end source %}\

{% if fu.SOURCE_TYPE == "header" %}\
        // Documented in base class.
	void
        createRoot();
{% end header %}\
{% if fu.SOURCE_TYPE == "source" %}\
      void
      FilterMetadata::createRoot()
      {
        store->createRoot();
      }
{% end source %}\

{% if fu.SOURCE_TYPE == "header" %}\
        // Documented in base class.
        std::shared_ptr<MetadataRoot>&
	getRoot();
{% end header %}\
{% if fu.SOURCE_TYPE == "source" %}\
      std::shared_ptr<MetadataRoot>&
      FilterMetadata::getRoot()
      {
        return store->getRoot();
      }
{% end source %}\

{% if fu.SOURCE_TYPE == "header" %}\
        // Documented in base class.
	void
        setRoot(std::shared_ptr<MetadataRoot>& root);
{% end header %}\
{% if fu.SOURCE_TYPE == "source" %}\
      void
      FilterMetadata::setRoot(std::shared_ptr<MetadataRoot>& root)
      {
        store->setRoot(root);
      }
{% end source %}\

{% if fu.SOURCE_TYPE == "header" %}\
        // Documented in base class.
	void
        setUUID(const std::string& uuid);
{% end header %}\
{% if fu.SOURCE_TYPE == "source" %}\
      void
      FilterMetadata::setUUID(const std::string& uuid)
      {
        store->setUUID(uuid);
      }
{% end source %}\

{% if debug %}\
	// -- Entity storage (manual definitions) --

{% end debug %}\
{% if fu.SOURCE_TYPE == "header" %}\
        // Documented in base class.
	void
        setPixelsBinDataBigEndian(bool bigEndian,
                                  index_type imageIndex,
                                  index_type binDataIndex);
{% end header %}\
{% if fu.SOURCE_TYPE == "source" %}\
      void
      FilterMetadata::setPixelsBinDataBigEndian(bool bigEndian,
                                                index_type imageIndex,
                                                index_type binDataIndex)
      {
        store->setPixelsBinDataBigEndian(bigEndian, imageIndex, binDataIndex);
      }
{% end source %}\

{% if fu.SOURCE_TYPE == "header" %}\
        // Documented in base class.
        void
        setMapAnnotationValue(const ::${lang.omexml_model_package}::MapPairs::map_type& map,
                              index_type mapAnnotationIndex);
{% end header %}\
{% if fu.SOURCE_TYPE == "source" %}\
      void
      FilterMetadata::setMapAnnotationValue(const ::${lang.omexml_model_package}::MapPairs::map_type& map,
                                            index_type mapAnnotationIndex)
      {
        store->setMapAnnotationValue(map, mapAnnotationIndex);
      }
{% end source %}\

{% if fu.SOURCE_TYPE == "header" %}\
        // Documented in base class.
        void
        setGenericExcitationSourceMap(const ::${lang.omexml_model_package}::MapPairs::map_type& map,
                                      index_type instrumentIndex,
                                      index_type lightSourceIndex);
{% end header %}\
{% if fu.SOURCE_TYPE == "source" %}\
      void
      FilterMetadata::setGenericExcitationSourceMap(const ::${lang.omexml_model_package}::MapPairs::map_type& map,
                                                    index_type instrumentIndex,
                                                    index_type lightSourceIndex)
      {
        store->setGenericExcitationSourceMap(map, instrumentIndex, lightSourceIndex);
      }
{% end source %}\

{% if fu.SOURCE_TYPE == "header" %}\
        // Documented in base class.
        void
        setImagingEnvironmentMap(const ::${lang.omexml_model_package}::MapPairs::map_type& map,
                                 index_type imageIndex);
{% end header %}\
{% if fu.SOURCE_TYPE == "source" %}\
      void
      FilterMetadata::setImagingEnvironmentMap(const ::${lang.omexml_model_package}::MapPairs::map_type& map,
                                               index_type imageIndex)
      {
        store->setImagingEnvironmentMap(map, imageIndex);
      }
{% end source %}\

{% if debug %}\
	// -- Entity storage (code generated definitions) --

{% end debug %}\
{% for o in sorted(model.objects.values(), lambda x, y: cmp(x.name, y.name)) %}\
{% if o.name not in fu.METADATA_OBJECT_IGNORE %}\
{% if o.langBaseType is not None %}\
{% if fu.SOURCE_TYPE == "header" %}\
{% if debug %}\
	// Element's text data
	// ${repr(indexes[o.name])}
{% end debug %}\
        // Documented in base class.
	void
        set${o.name}Value(${o.langBaseType} value, ${indexes_string(indexes[o.name].items()[0][1])});
{% end header %}\
{% if fu.SOURCE_TYPE == "source" %}\
      void
      FilterMetadata::set${o.name}Value(${o.langBaseType} value, ${indexes_string(indexes[o.name].items()[0][1])})
      {
{% if o.langBaseType == "std::string" %}\
        // TODO: Implement DataTools.sanitize if needed for C++
        // value = filter? DataTools.sanitize(value) : value;
{% end %}\
        store->set${o.name}Value(value, ${indexes_name_string(indexes[o.name].items()[0][1])});
      }
{% end source %}\

{% end %}\
{% if parents[o.name] is not None and not o.isAbstract and not o.isAbstractProprietary %}\
{% if debug %}\
	//
	// ${o.name} property storage
	//
	// ${repr(parents[o.name])}
	// Is multi path? ${is_multi_path[o.name]}

{% end debug %}\
{% choose %}\
{% when o.isReference %}\
{% for prop in sorted(o.properties.values() + o.baseObjectProperties, lambda x, y: cmp(x.name, y.name)) %}\
{% if debug %}\
	// ${prop.minOccurs}:${prop.maxOccurs}
	// Is multi path? ${is_multi_path[o.name]}
	// Ignoring ${prop.name} property of reference ${o.name}

{% end debug %}\
{% end %}\
{% end %}\
{% otherwise %}\
\
{% for k, v in indexes[o.name].items() %}\
{% if is_abstract(k) %}\
{% for prop in sorted_properties(model.getObjectByName(k)) %}\
{% choose %}\
{% when not prop.isPrimitive and prop.isChoice %}\
{% if debug %}\
	// Ignoring ${prop.name} of parent abstract type
{% end debug %}\
{% end %}\
{% otherwise %}\
{% for parent_k, parent_v in indexes[k].items() %}\
{% if not prop.isBackReference %}\
{% if debug %}\
	// ${prop.name} accessor from parent ${k}
{% end debug %}\
${setter(k, o, prop, v)}\
{% end %}\
{% end %}\
{% end %}\
{% end %}\
{% end %}\
{% end %}\
{% end %}\
\
{% for prop in sorted(o.properties.values() + o.baseObjectProperties, lambda x, y: cmp(x.name, y.name)) %}\
{% choose %}\
{% when prop.isBackReference %}\
{% if debug %}\
	// Ignoring ${prop.name} back reference
{% end debug %}\
{% end %}\
{% when not prop.isReference and not prop.isAttribute and prop.isComplex() %}\
{% if debug %}\
	// Ignoring ${prop.name} element, complex property
{% end debug %}\
{% end %}\
{% otherwise %}\
{% for k, v in indexes[o.name].items() %}\
${setter(k, o, prop, v)}\
{% end %}\
{% end %}\
{% end %}\
{% end %}\
{% end %}\
{% end %}\
{% end %}\
{% end %}\
{% end %}\
{% if fu.SOURCE_TYPE == "header" %}\
      };

{% end header%}\
    }
  }
}
{% if fu.SOURCE_TYPE == "header" %}\

#endif // ${fu.GUARD}

/*
 * Local Variables:
 * mode:C++
 * End:
 */
{% end header%}\
