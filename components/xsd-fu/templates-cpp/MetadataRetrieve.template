{% def indexes_string(indexes) %}${", ".join(map(lambda x: lang.index_string(x),indexes))}{% end %}\
\
{% def index_string(name) %}\
{% choose %}\
{% when name[:2].isupper()%}index_type ${name}Index{% end %}\
{% otherwise %}index_type ${name[:1].lower()}${name[1:]}Index{% end %}\
{% end %}\
{% end %}\
\
{% def getter(parent, obj, prop, indexes) %}\
{% choose %}\
{% when len(indexes) > 0 and prop.maxOccurs > 1 %}\
{% if fu.SOURCE_TYPE == "header" %}\
        /**
         * Get the ${prop.name} property of ${o.name}.
         *
{% for param in indexes %}\
         * @param ${param['argname']} the ${param['type']} index.
{% end for %}\
         * @param ${lang.index_signature(prop.name, 0, 0)['argname']} ${prop.name} index.
         * @returns the ${prop.name} property.
         */
        virtual ${prop.metadataStoreRetType}
        get{% if is_multi_path[o.name] %}${parent}{% end %}${obj.name}${prop.name}(${indexes_string(indexes)}, ${index_string(prop.name)}) const = 0;

{% end header%}\
{% end %}\
{% when len(indexes) > 0 %}\
{% if fu.SOURCE_TYPE == "header" %}\
        /**
         * Get the ${prop.name} property of ${o.name}.
         *
{% for param in indexes %}\
         * @param ${param['argname']} the ${param['type']} index.
{% end for %}\
         * @returns the ${prop.name} property.
         */
        virtual ${prop.metadataStoreRetType}
        get{% if is_multi_path[o.name] %}${parent}{% end %}${obj.name}${prop.name}(${indexes_string(indexes)}) const = 0;

{% end header%}\
{% end %}\
{% otherwise %}\
{% if fu.SOURCE_TYPE == "header" %}\
        /**
         * Get the ${prop.name} property of ${o.name}.
         *
         * @returns the ${prop.name} property.
         */
        virtual ${prop.metadataStoreRetType}
        get{% if is_multi_path[o.name] %}${parent}{% end %}${obj.name}${prop.name}() const = 0;

{% end header%}\
{% end %}\
{% end %}\
{% end %}\
\
{% python
        def is_abstract(name):
                o = model.getObjectByName(name)
                if o is not None and \
                   (o.isAbstract):
                        return True
                return False

        def sorted_properties(o):
                return sorted(o.properties.values() + o.baseObjectProperties, lambda x, y: cmp(x.name, y.name))
%}\
\
\
/*
 * #%L
 * OME-BIOFORMATS C++ library for image IO.
 * %%
 * Copyright © 2006 - 2015 Open Microscopy Environment:
 *   - Massachusetts Institute of Technology
 *   - National Institutes of Health
 *   - University of Dundee
 *   - Board of Regents of the University of Wisconsin-Madison
 *   - Glencoe Software, Inc.
 * %%
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice,
 *    this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDERS OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 *
 * The views and conclusions contained in the software and documentation are
 * those of the authors and should not be interpreted as representing official
 * policies, either expressed or implied, of any organization.
 * #L%
 */

/*─────────────────────────────────────────────────────────────────────────────
 *
 * THIS IS AUTOMATICALLY GENERATED CODE.  DO NOT MODIFY.
 *
 *─────────────────────────────────────────────────────────────────────────────
 */

{% if fu.SOURCE_TYPE == "header" %}\
#ifndef ${fu.GUARD}
#define ${fu.GUARD}

#include <string>

#include <ome/compat/memory.h>

#include <ome/xml/meta/BaseMetadata.h>
#include <ome/xml/model/AffineTransform.h>

{% for include in model.getEnumHeaders() %}\
#include <${include}>
{% end for%}\

#include <ome/xml/model/primitives/Color.h>
#include <ome/xml/model/primitives/ConstrainedNumeric.h>
#include <ome/xml/model/primitives/NonNegativeFloat.h>
#include <ome/xml/model/primitives/NonNegativeInteger.h>
#include <ome/xml/model/primitives/NonNegativeLong.h>
#include <ome/xml/model/primitives/NumericConstraints.h>
#include <ome/xml/model/primitives/PercentFraction.h>
#include <ome/xml/model/primitives/PositiveFloat.h>
#include <ome/xml/model/primitives/PositiveInteger.h>
#include <ome/xml/model/primitives/PositiveLong.h>
#include <ome/xml/model/primitives/Timestamp.h>
{% end header%}\
{% if fu.SOURCE_TYPE == "source" %}\
#include <ome/xml/meta/MetadataRetrieve.h>
{% end source%}\

namespace ome
{
  namespace xml
  {
    namespace meta
    {

{% if fu.SOURCE_TYPE == "header" %}\
      /**
       * Metadata retrieval interface.
       *
       * MetadataRetrieve is a proxy whose responsibility it is to
       * extract biological image data from a particular storage
       * medium.  This interface encompasses the metadata that any
       * specific storage medium (file, relational database, etc.)
       * should be expected to access from its backing data model.
       *
       * The MetadataRetrieve interface goes hand in hand with the
       * MetadataStore interface. Essentially, MetadataRetrieve
       * provides the "getter" methods for a storage medium, and
       * MetadataStore provides the "setter" methods.  Since it often
       * makes sense for a storage medium to implement both
       * interfaces, there is also an Metadata interface encompassing
       * both MetadataStore and MetadataRetrieve, which reduces the
       * need to cast between object types.
       *
       * See ${lang.omexml_metadata_package}::OMEXMLMetadata for an
       * example implementation.
       *
       * @sa MetadataStore, Metadata,
       * ${lang.omexml_metadata_package}::OMEXMLMetadata.
       */
      class MetadataRetrieve : virtual public BaseMetadata
      {
      protected:
{% end header%}\
{% if fu.SOURCE_TYPE == "header" %}\
        /// Constructor.
        MetadataRetrieve()
        {}

      public:
        /// Destructor.
        virtual
        ~MetadataRetrieve()
        {}

      private:
        /// Copy constructor (deleted).
        MetadataRetrieve (const MetadataRetrieve&);

        /// Assignment operator (deleted).
        MetadataRetrieve&
        operator= (const MetadataRetrieve&);

      public:
{% if debug %}\
        // -- Entity counting (manual definitions) --

{% end debug %}\
        /**
         * Get the number of links to a BooleanAnnotation.
         *
         * This method returns the number of references to the
         * specified BooleanAnnotation held by all model objects.
         *
         * @param booleanAnnotationIndex the BooleanAnnotation index.
         * @returns the number of BooleanAnnotation links.
         */
        virtual index_type
        getBooleanAnnotationAnnotationCount(index_type booleanAnnotationIndex) const = 0;

        /**
         * Get the number of links to a CommentAnnotation.
         *
         * This method returns the number of references to the
         * specified CommentAnnotation held by all model objects.
         *
         * @param commentAnnotationIndex the CommentAnnotation index.
         * @returns the number of CommentAnnotation links.
         */
        virtual index_type
        getCommentAnnotationAnnotationCount(index_type commentAnnotationIndex) const = 0;

        /**
         * Get the number of links to a DoubleAnnotation.
         *
         * This method returns the number of references to the
         * specified DoubleAnnotation held by all model objects.
         *
         * @param doubleAnnotationIndex the DoubleAnnotation index.
         * @returns the number of DoubleAnnotation links.
         */
        virtual index_type
        getDoubleAnnotationAnnotationCount(index_type doubleAnnotationIndex) const = 0;

        /**
         * Get the number of links to a FileAnnotation.
         *
         * This method returns the number of references to the
         * specified FileAnnotation held by all model objects.
         *
         * @param fileAnnotationIndex the FileAnnotation index.
         * @returns the number of FileAnnotation links.
         */
        virtual index_type
        getFileAnnotationAnnotationCount(index_type fileAnnotationIndex) const = 0;

        /**
         * Get the number of links to a ListAnnotation.
         *
         * This method returns the number of references to the
         * specified ListAnnotation held by all model objects.
         *
         * @param listAnnotationIndex the ListAnnotation index.
         * @returns the number of ListAnnotation links.
         */
        virtual index_type
        getListAnnotationAnnotationCount(index_type listAnnotationIndex) const = 0;

        /**
         * Get the number of links to a LongAnnotation.
         *
         * This method returns the number of references to the
         * specified LongAnnotation held by all model objects.
         *
         * @param longAnnotationIndex the LongAnnotation index.
         * @returns the number of LongAnnotation links.
         */
        virtual index_type
        getLongAnnotationAnnotationCount(index_type longAnnotationIndex) const = 0;

        /**
         * Get the number of links to a TagAnnotation.
         *
         * This method returns the number of references to the
         * specified TagAnnotation held by all model objects.
         *
         * @param tagAnnotationIndex the TagAnnotation index.
         * @returns the number of TagAnnotation links.
         */
        virtual index_type
        getTagAnnotationAnnotationCount(index_type tagAnnotationIndex) const = 0;

        /**
         * Get the number of links to a TermAnnotation.
         *
         * This method returns the number of references to the
         * specified TermAnnotation held by all model objects.
         *
         * @param termAnnotationIndex the TermAnnotation index.
         * @returns the number of TermAnnotation links.
         */
        virtual index_type
        getTermAnnotationAnnotationCount(index_type termAnnotationIndex) const = 0;

        /**
         * Get the number of links to a TimestampAnnotation.
         *
         * This method returns the number of references to the
         * specified TimestampAnnotation held by all model objects.
         *
         * @param timestampAnnotationIndex the TimestampAnnotation index.
         * @returns the number of TimestampAnnotation links.
         */
        virtual index_type
        getTimestampAnnotationAnnotationCount(index_type timestampAnnotationIndex) const = 0;

        /**
         * Get the number of links to an XMLAnnotation.
         *
         * This method returns the number of references to the
         * specified XMLAnnotation held by all model objects.
         *
         * @param xmlAnnotationIndex the XMLAnnotation index.
         * @returns the number of XMLAnnotation links.
         */
        virtual index_type
        getXMLAnnotationAnnotationCount(index_type xmlAnnotationIndex) const = 0;
        
        /**
         * Get the number of links to a Line.
         *
         * This method returns the number of references to the
         * specified Line held by all model objects.
         *
         * @param roiIndex the ROI index.
         * @param lineIndex the Line index.
         * @returns the number of Line links.
         */
        virtual index_type
        getLineAnnotationCount(index_type roiIndex, index_type lineIndex) const = 0;
        
        /**
         * Get the number of links to a Rectangle.
         *
         * This method returns the number of references to the
         * specified Rectangle held by all model objects.
         *
         * @param roiIndex the ROI index.
         * @param rectangleIndex the Rectangle index.
         * @returns the number of Rectangle links.
         */
        virtual index_type
        getRectangleAnnotationCount(index_type roiIndex, index_type rectangleIndex) const = 0;
        
        /**
         * Get the number of links to a Mask.
         *
         * This method returns the number of references to the
         * specified Mask held by all model objects.
         *
         * @param roiIndex the ROI index.
         * @param maskIndex the Mask index.
         * @returns the number of Mask links.
         */
        virtual index_type
        getMaskAnnotationCount(index_type roiIndex, index_type maskIndex) const = 0;
        
        /**
         * Get the number of links to a Ellipse.
         *
         * This method returns the number of references to the
         * specified Ellipse held by all model objects.
         *
         * @param roiIndex the ROI index.
         * @param ellipseIndex the Ellipse index.
         * @returns the number of Ellipse links.
         */
        virtual index_type
        getEllipseAnnotationCount(index_type roiIndex, index_type ellipseIndex) const = 0;
        
        /**
         * Get the number of links to a Point.
         *
         * This method returns the number of references to the
         * specified Point held by all model objects.
         *
         * @param roiIndex the ROI index.
         * @param pointIndex the Point index.
         * @returns the number of Point links.
         */
        virtual index_type
        getPointAnnotationCount(index_type roiIndex, index_type pointIndex) const = 0;
        
        /**
         * Get the number of links to a Polygon.
         *
         * This method returns the number of references to the
         * specified Polygon held by all model objects.
         *
         * @param roiIndex the ROI index.
         * @param polygonIndex the Polygon index.
         * @returns the number of Polygon links.
         */
        virtual index_type
        getPolygonAnnotationCount(index_type roiIndex, index_type polygonIndex) const = 0;
        
        /**
         * Get the number of links to a Polyline.
         *
         * This method returns the number of references to the
         * specified Polyline held by all model objects.
         *
         * @param roiIndex the ROI index.
         * @param polylineIndex the Polyline index.
         * @returns the number of Polyline links.
         */
        virtual index_type
        getPolylineAnnotationCount(index_type roiIndex, index_type polylineIndex) const = 0;
        
        /**
         * Get the number of links to a Label.
         *
         * This method returns the number of references to the
         * specified Label held by all model objects.
         *
         * @param roiIndex the ROI index.
         * @param labelIndex the Label index.
         * @returns the number of Label links.
         */
        virtual index_type
        getLabelAnnotationCount(index_type roiIndex, index_type labelIndex) const = 0;
        
        /**
         * Get the number of links to a Arc.
         *
         * This method returns the number of references to the
         * specified Arc held by all model objects.
         *
         * @param instrumentIndex the Instrument index.
         * @param arcIndex the Arc index.
         * @returns the number of Arc links.
         */
        virtual index_type
        getArcAnnotationCount(index_type instrumentIndex, index_type arcIndex) const = 0;
        
        /**
         * Get the number of links to a Filament.
         *
         * This method returns the number of references to the
         * specified Filament held by all model objects.
         *
         * @param instrumentIndex the Instrument index.
         * @param filamentIndex the Filament index.
         * @returns the number of Filament links.
         */
        virtual index_type
        getFilamentAnnotationCount(index_type instrumentIndex, index_type filamentIndex) const = 0;      
        
        /**
         * Get the number of links to a Laser.
         *
         * This method returns the number of references to the
         * specified Laser held by all model objects.
         *
         * @param instrumentIndex the Instrument index.
         * @param laserIndex the Laser index.
         * @returns the number of Laser links.
         */
        virtual index_type
        getLaserAnnotationCount(index_type instrumentIndex, index_type laserIndex) const = 0;
        
        /**
         * Get the number of links to a LightEmittingDiode.
         *
         * This method returns the number of references to the
         * specified LightEmittingDiode held by all model objects.
         *
         * @param instrumentIndex the Instrument index.
         * @param lightEmittingDiodeIndex the LightEmittingDiode index.
         * @returns the number of LightEmittingDiode links.
         */
        virtual index_type
        getLightEmittingDiodeAnnotationCount(index_type instrumentIndex, index_type lightEmittingDiodeIndex) const = 0;
        
        /**
         * Get the number of links to a GenericExcitationSource.
         *
         * This method returns the number of references to the
         * specified GenericExcitationSource held by all model objects.
         *
         * @param instrumentIndex the Instrument index.
         * @param genericExcitationSourceIndex the GenericExcitationSource index.
         * @returns the number of GenericExcitationSource links.
         */
        virtual index_type
        getGenericExcitationSourceAnnotationCount(index_type instrumentIndex, index_type genericExcitationSourceIndex) const = 0;


{% end header%}\
{% if debug %}\
        // -- Entity counting (code generated definitions) --

{% end debug %}\
{% for o in sorted(model.objects.values(), lambda x, y: cmp(x.name, y.name)) %}\
{% if o.name not in fu.METADATA_OBJECT_IGNORE %}\
{% if o.langBaseType is not None %}\
{% if fu.SOURCE_TYPE == "header" %}\
{% if debug %}\
        // Element's text data
        // ${repr(indexes[o.name])}
{% end debug %}\
        /**
         * Get the text value of ${o.name}.
         *
{% for param in indexes[o.name].items()[0][1] %}\
         * @param ${param['argname']} the ${param['type']} index.
{% end for %}\
         * @returns the text value.
         */
        virtual ${o.langBaseType}
        get${o.name}Value(${indexes_string(indexes[o.name].items()[0][1])}) const = 0;

{% end header%}\
{% end %}\
{% if parents[o.name] is not None and not o.isAbstract %}\
{% if debug %}\
        // ${o.name} entity counting
{% end debug %}\
{% for k, v in indexes[o.name].items() %}\
{% if fu.max_occurs_under_parent(model, k, o.name) > 1 and (k not in fu.METADATA_COUNT_IGNORE or o.type not in fu.METADATA_COUNT_IGNORE[k]) %}\
{% if fu.SOURCE_TYPE == "header" %}\
        /**
         * Get the number of ${o.name} elements{% if is_multi_path[o.name] %} in ${k}{% end %}.
         *
{% for param in v[:-1] %}\
         * @param ${param['argname']} the ${param['type']} index.
{% end for %}\
         * @returns the number of ${o.name} elements.
         */
        virtual index_type
        get{% if is_multi_path[o.name] %}${k}{% end %}${o.name}Count(${indexes_string(v[:-1])}) const = 0;

{% end header%}\
{% end %}\
{% end %}\
{% end %}\
{% end %}\
{% end %}\
{% if fu.SOURCE_TYPE == "header" %}\
{% if debug %}\
        // -- Entity retrieval (manual definitions) --

{% end debug %}\

{% if debug %}\
        // -- Entity retrieval (code generated definitions) --

{% end debug %}\
        /**
         * Get the UUID associated with this collection of metadata.
         *
         * @returns the UUID.
         *
         * @todo Can this be a const reference?
         */
        virtual const std::string&
        getUUID() const = 0;

{% end header%}\
{% for o in sorted(model.objects.values(), lambda x, y: cmp(x.name, y.name)) %}\
{% if o.name not in fu.METADATA_OBJECT_IGNORE %}\
{% if parents[o.name] is not None and not o.isAbstract %}\
{% if debug %}\
        //
        // ${o.name} property storage
        //
        // ${repr(parents[o.name])}
        // Is multi path? ${is_multi_path[o.name]}

{% end debug %}\
{% choose %}\
{% when o.isReference %}\
{% for prop in sorted(o.properties.values() + o.baseObjectProperties, lambda x, y: cmp(x.name, y.name)) %}\
{% if debug %}\
        // ${prop.minOccurs}:${prop.maxOccurs}
        // Is multi path? ${is_multi_path[o.name]}
        // Ignoring ${prop.name} property of reference ${o.name}

{% end debug %}\
{% end %}\
{% end %}\
{% otherwise %}\
\
{% for k, v in indexes[o.name].items() %}\
{% if is_abstract(k) %}\
{% for prop in sorted_properties(model.getObjectByName(k)) %}\
{% choose %}\
{% when not prop.isPrimitive and prop.isChoice %}\
{% if debug %}\
        // Ignoring ${prop.name} of parent abstract type
{% end debug %}\
{% end %}\
{% otherwise %}\
{% for parent_k, parent_v in indexes[k].items() %}\
{% if not prop.isBackReference %}\
{% if debug %}\
        // ${prop.name} accessor from parent ${k}
{% end debug %}\

{% end %}\
{% end %}\
{% end %}\
{% end %}\
{% end %}\
{% end %}\
{% end %}\
\
{% for prop in sorted(o.properties.values() + o.baseObjectProperties, lambda x, y: cmp(x.name, y.name)) %}\
{% choose %}\
{% when prop.isBackReference %}\
{% if debug %}\
        // Ignoring ${prop.name} back reference
{% end debug %}\
{% end %}\
{% when not prop.isReference and not prop.isAttribute and prop.isComplex() and (not prop.name in fu.SHAPE_OVERRIDE) %}\
{% if debug %}\
        // Ignoring ${prop.name} element, complex property
{% end debug %}\
{% end %}\
{% otherwise %}\
{% for k, v in indexes[o.name].items() %}\
${getter(k, o, prop, v)}\
{% end %}\
{% end %}\
{% end %}\
{% end %}\
{% end %}\
{% end %}\
{% end %}\
{% end %}\
{% end %}\
{% if fu.SOURCE_TYPE == "header" %}\
      };

{% end header%}\
    }
  }
}
{% if fu.SOURCE_TYPE == "header" %}\

#endif // ${fu.GUARD}

/*
 * Local Variables:
 * mode:C++
 * End:
 */
{% end header%}\
