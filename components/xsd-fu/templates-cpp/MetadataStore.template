{% def indexes_string(indexes) %}${", ".join(map(lambda x: lang.index_string(x),indexes))}{% end %}\
{% def setter(parent, obj, prop, indexes) %}\
{% choose %}\
{% when len(indexes) > 0 and prop.maxOccurs > 1 %}\
{% if fu.SOURCE_TYPE == "header" %}\
	/**
         * Set the ${prop.name} property of ${o.name}.
         *
         * @param ${prop.argumentName} ${prop.name} to set.
{% for param in indexes %}\
         * @param ${param['argname']} the ${param['type']} index.
{% end for %}\
         * @param ${lang.index_signature(prop.name, 0, 0)['argname']} ${prop.name} index (unused).
         */
	virtual void
        set{% if is_multi_path[o.name] %}${parent}{% end %}${obj.name}${prop.name}(${prop.metadataStoreArgType} ${prop.argumentName}, ${indexes_string(indexes)}, ${lang.index_string(lang.index_signature(prop.name, 0, 0))} = 0) = 0;

{% end header%}\
{% end %}\
{% when len(indexes) > 0 %}\
{% if fu.SOURCE_TYPE == "header" %}\
	/**
         * Set the ${prop.name} property of ${o.name}.
         *
         * @param ${prop.argumentName} ${prop.name} to set.
{% for param in indexes %}\
         * @param ${param['argname']} the ${param['type']} index.
{% end for %}\
         */
	virtual void
        set{% if is_multi_path[o.name] %}${parent}{% end %}${obj.name}${prop.name}(${prop.metadataStoreArgType} ${prop.argumentName}, ${indexes_string(indexes)}) = 0;

{% end header%}\
{% end %}\
{% otherwise %}\
{% if fu.SOURCE_TYPE == "header" %}\
	/**
         * Set the ${prop.name} property of ${o.name}.
         *
         * @param ${prop.argumentName} ${prop.name} to set.
         */
	virtual void
        set{% if is_multi_path[o.name] %}${parent}{% end %}${obj.name}${prop.name}(${prop.metadataStoreArgType} ${prop.argumentName}) = 0;

{% end header%}\
{% end %}\
{% end %}\
{% end %}\
\
{% python
	def is_abstract(name):
		o = model.getObjectByName(name)
		if o is not None and \
		   (o.isAbstract or o.isAbstractProprietary):
			return True
		return False

	def sorted_properties(o):
		return sorted(o.properties.values() + o.baseObjectProperties, lambda x, y: cmp(x.name, y.name))
%}\
\
\
/*
 * #%L
 * OME-BIOFORMATS C++ library for image IO.
 * %%
 * Copyright © 2006 - 2014 Open Microscopy Environment:
 *   - Massachusetts Institute of Technology
 *   - National Institutes of Health
 *   - University of Dundee
 *   - Board of Regents of the University of Wisconsin-Madison
 *   - Glencoe Software, Inc.
 * %%
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice,
 *    this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDERS OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 *
 * The views and conclusions contained in the software and documentation are
 * those of the authors and should not be interpreted as representing official
 * policies, either expressed or implied, of any organization.
 * #L%
 */

/*─────────────────────────────────────────────────────────────────────────────
 *
 * THIS IS AUTOMATICALLY GENERATED CODE.  DO NOT MODIFY.
 *
 *─────────────────────────────────────────────────────────────────────────────
 */

{% if fu.SOURCE_TYPE == "header" %}\
#ifndef ${fu.GUARD}
#define ${fu.GUARD}

#include <string>

#include <ome/compat/memory.h>

#include <ome/xml/meta/BaseMetadata.h>
#include <ome/xml/meta/MetadataRoot.h>
#include <ome/xml/model/AffineTransform.h>
#include <ome/xml/model/MapPairs.h>

{% for include in model.getEnumHeaders() %}\
#include <${include}>
{% end for%}\

#include <ome/xml/model/primitives/Color.h>
#include <ome/xml/model/primitives/ConstrainedNumeric.h>
#include <ome/xml/model/primitives/NonNegativeFloat.h>
#include <ome/xml/model/primitives/NonNegativeInteger.h>
#include <ome/xml/model/primitives/NonNegativeLong.h>
#include <ome/xml/model/primitives/NumericConstraints.h>
#include <ome/xml/model/primitives/PercentFraction.h>
#include <ome/xml/model/primitives/PositiveFloat.h>
#include <ome/xml/model/primitives/PositiveInteger.h>
#include <ome/xml/model/primitives/PositiveLong.h>
#include <ome/xml/model/primitives/Timestamp.h>
{% end header%}\
{% if fu.SOURCE_TYPE == "source" %}\
#include <ome/xml/meta/MetadataStore.h>
{% end source%}\

namespace ome
{
  namespace xml
  {
    namespace meta
    {

{% if fu.SOURCE_TYPE == "header" %}\
      /**
       * Metadata storage interface.
       *
       * MetadataStore is a proxy whose responsibility it is to
       * marshal biological image data into a particular storage
       * medium.  This interface encompasses the metadata that any
       * specific storage medium (file, relational database, etc.)
       * should be expected to store into its backing data model.
       *
       * The MetadataStore interface goes hand in hand with the
       * MetadataRetrieve interface. Essentially, MetadataRetrieve
       * provides the "getter" methods for a storage medium, and
       * MetadataStore provides the "setter" methods.  Since it often
       * makes sense for a storage medium to implement both
       * interfaces, there is also an Metadata interface encompassing
       * both MetadataStore and MetadataRetrieve, which reduces the
       * need to cast between object types.
       *
       * See ${lang.metadata_package}::OMEXMLMetadata for an
       * example implementation.
       *
       * @note It is strongly recommended that applications (e.g.,
       * file format readers) using MetadataStore fill it with
       * information in a linear order. Specifically, iterating over
       * entities from "leftmost" index to "rightmost" index is
       * required for certain implementations such as OMERO's
       * OMEROMetadataStore. For example, when filling
       * ::${lang.omexml_model_package}::Image, ::${lang.omexml_model_package}::Pixels and
       * ::${lang.omexml_model_package}::Plane information, an outer loop should
       * iterate across @c imageIndex, an inner loop should iterate
       * across @c pixelsIndex, and an innermost loop should handle @c
       * planeIndex. For an illustration of the ideal traversal order,
       * see MetadataConverter.
       *
       * @sa MetadataRetrieve, Metadata,
       * ${lang.metadata_package}::OMEXMLMetadata.
       */
      class MetadataStore : virtual public BaseMetadata
      {
      protected:
        /// Constructor.
        MetadataStore()
        {}

      public:
        /// Destructor.
        virtual
        ~MetadataStore()
        {}

      private:
        /// Copy constructor (deleted).
        MetadataStore (const MetadataStore&);

        /// Assignment operator (deleted).
        MetadataStore&
        operator= (const MetadataStore&);

      public:
        /**
         * Create root node.  The action taken here is specific to the
         * concrete metadata implementation.
         */
        virtual void
        createRoot() = 0;

        /**
         * Get the root node of the metadata.  Note that the root node
         * type will be specific to the concrete metadata
         * implementation.
         *
         * @returns a pointer to the root node.
         *
         * @todo should this be a reference or shared_ptr?
         */
        virtual std::shared_ptr<MetadataRoot>&
        getRoot() = 0;

        /**
         * Set the root node of the metadata.  Note that the root node
         * type will be specific to the concrete metadata
         * implementation.  An exception will be thrown if the root
         * node is of an incompatible type.
         *
         * @param root a pointer to the root node.
         *
         * @todo should this be a reference or shared_ptr?
         */
        virtual void
        setRoot(std::shared_ptr<MetadataRoot>& root) = 0;

{% if debug %}\
        // -- Entity storage (manual definitions) --

{% end debug %}\
        /**
         * Set the BigEndian property of Pixels.
         *
         * @param bigEndian @c true if big endian, or @c false if little endian.
         * @param imageIndex the Image index.
         * @param binDataIndex BinData index (unused).
         */
        virtual void
        setPixelsBinDataBigEndian(bool bigEndian,
                                  index_type imageIndex,
                                  index_type binDataIndex = 0) = 0;

	/**
         * Set the Map value of MapAnnotation.
         *
         * @param map Map value.
         * @param mapAnnotationIndex the MapAnnotation index.
         */
        virtual void
        setMapAnnotationValue(const ::${lang.omexml_model_package}::MapPairs::map_type& map,
                              index_type mapAnnotationIndex) = 0;

	/**
         * Set the Map property of GenericExcitationSource.
         *
         * @param map Map to set.
         * @param instrumentIndex the Instrument index.
         * @param lightSourceIndex the LightSource index.
         */
        virtual void
        setGenericExcitationSourceMap(const ::${lang.omexml_model_package}::MapPairs::map_type& map,
                                      index_type instrumentIndex,
                                      index_type lightSourceIndex) = 0;

	/**
         * Set the Map property of ImagingEnvironment.
         *
         * @param map Map to set.
         * @param imageIndex the Image index.
         */
        virtual void
        setImagingEnvironmentMap(const ::${lang.omexml_model_package}::MapPairs::map_type& map,
                                 index_type imageIndex) = 0;

{% if debug %}\
        // -- Entity storage (code generated definitions) --

{% end debug %}\
	/**
         * Set the UUID associated with this collection of metadata.
         *
         * @param uuid the UUID to set.
         */
	virtual void
        setUUID(const std::string& uuid) = 0;

{% end header%}\
{% for o in sorted(model.objects.values(), lambda x, y: cmp(x.name, y.name)) %}\
{% if o.name not in fu.METADATA_OBJECT_IGNORE %}\
{% if o.langBaseType is not None %}\
{% if fu.SOURCE_TYPE == "header" %}\
	/**
         * Set the text value of ${o.name}.
         *
         * @param value text value.
{% for param in indexes[o.name].items()[0][1] %}\
         * @param ${param['argname']} the ${param['type']} index.
{% end for %}\
         */
	virtual void
        set${o.name}Value(${o.langBaseType} value, ${indexes_string(indexes[o.name].items()[0][1])}) = 0;

{% end header%}\
{% end %}\
{% if parents[o.name] is not None and not o.isAbstract and not o.isAbstractProprietary %}\
{% if debug %}\
	//
	// ${o.name} property storage
	//
	// ${repr(parents[o.name])}
	// Is multi path? ${is_multi_path[o.name]}

{% end debug %}\
{% choose %}\
{% when o.isReference %}\
{% for prop in sorted(o.properties.values() + o.baseObjectProperties, lambda x, y: cmp(x.name, y.name)) %}\
{% if debug %}\
	// ${prop.minOccurs}:${prop.maxOccurs}
	// Is multi path? ${is_multi_path[o.name]}
	// Ignoring ${prop.name} property of reference ${o.name}

{% end debug %}\
{% end %}\
{% end %}\
{% otherwise %}\
\
{% for k, v in indexes[o.name].items() %}\
{% if is_abstract(k) %}\
{% for prop in sorted_properties(model.getObjectByName(k)) %}\
{% choose %}\
{% when not prop.isPrimitive and prop.isChoice %}\
{% if debug %}\
	// Ignoring ${prop.name} of parent abstract type
{% end debug %}\
{% end %}\
{% otherwise %}\
{% for parent_k, parent_v in indexes[k].items() %}\
{% if not prop.isBackReference %}\
{% if debug %}\
	// ${prop.name} accessor from parent ${k}
{% end debug %}\
${setter(k, o, prop, v)}\
{% end %}\
{% end %}\
{% end %}\
{% end %}\
{% end %}\
{% end %}\
{% end %}\
\
{% for prop in sorted(o.properties.values() + o.baseObjectProperties, lambda x, y: cmp(x.name, y.name)) %}\
{% choose %}\
{% when prop.isBackReference %}\
{% if debug %}\
	// Ignoring ${prop.name} back reference
{% end debug %}\
{% end %}\
{% when not prop.isReference and not prop.isAttribute and prop.isComplex() %}\
{% if debug %}\
	// Ignoring ${prop.name} element, complex property
{% end debug %}\
{% end %}\
{% otherwise %}\
{% for k, v in indexes[o.name].items() %}\
${setter(k, o, prop, v)}\
{% end %}\
{% end %}\
{% end %}\
{% end %}\
{% end %}\
{% end %}\
{% end %}\
{% end %}\
{% end %}\
{% end %}\
{% if fu.SOURCE_TYPE == "header" %}\
      };
{% end header%}\

    }
  }
}
{% if fu.SOURCE_TYPE == "header" %}\

#endif // ${fu.GUARD}

/*
 * Local Variables:
 * mode:C++
 * End:
 */
{% end header%}\
