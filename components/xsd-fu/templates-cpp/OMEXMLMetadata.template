{% def indexes_string(indexes) %}${", ".join(map(lambda x: lang.index_string(x),indexes))}{% end %}\
\
{% def index_name_string(name) %}\
{% choose %}\
{% when name[:2].isupper()%}${name}Index{% end %}\
{% otherwise %}${name[:1].lower()}${name[1:]}Index{% end %}\
{% end %}\
{% end %}\
\
{% def index_string(name) %}index_type ${index_name_string(name)}{% end %}\
{% def index_string_dummy(name) %}index_type /* ${index_name_string(name)} */{% end %}\
\
{% def counter(parent, obj, indexes) %}\
{% if fu.SOURCE_TYPE == "header" %}\
{% if debug %}\
        // ${obj.name} entity counting
{% end debug %}\
        // Documented in base class.
        index_type
        ${getCounterMethod(is_multi_path[o.name], parent, obj.name)}(${indexes_string(indexes[:-1])}) const;
{% end header %}\
{% if fu.SOURCE_TYPE == "source" %}\
      OMEXMLMetadata::index_type
      OMEXMLMetadata::${getCounterMethod(is_multi_path[o.name], parent, obj.name)}(${indexes_string(indexes[:-1])}) const
      {
        // Parents: ${repr(parents[obj.name])}
{% if obj.isReference %}\
        // ${obj.name} is a reference
        return ${safe_accessor(['root']+accessor(obj.name, parent, obj.name)[:-1] + ["sizeOfLinked%sList()" % obj.name.replace('Ref', '')], getCounterMethod(is_multi_path[o.name], parent, obj.name))};
{% end %}\
{% if not obj.isReference %}\
        // ${obj.name} is not a reference
        return ${safe_accessor(['root']+accessor(obj.name, parent, obj.name)[:-1] + ["sizeOf%sList()" % obj.name.replace('Ref', '')], getCounterMethod(is_multi_path[o.name], parent, obj.name))};
{% end %}\
      }
{% end source %}\
{% end %}\
\
{% def getter(parent, obj, prop, indexes) %}\
{% choose %}\
{% when len(indexes) > 0 and prop.maxOccurs > 1 %}\
{% if fu.SOURCE_TYPE == "header" %}\
        // Documented in base class.
        ${prop.metadataStoreRetType}
        ${getPropMethod(is_multi_path[o.name], parent, obj.name, prop.name)}(${indexes_string(indexes)}, ${index_string(prop.name)}) const;
{% end header %}\
{% if fu.SOURCE_TYPE == "source" %}\
      ${prop.metadataStoreRetType}
OMEXMLMetadata::${getPropMethod(is_multi_path[o.name], parent, obj.name, prop.name)}(${indexes_string(indexes)}, ${index_string(prop.name)}) const
{% end source %}\
{% end %}\
{% when len(indexes) > 0 %}\
{% if fu.SOURCE_TYPE == "header" %}\
        // Documented in base class.
        ${prop.metadataStoreRetType}
        ${getPropMethod(is_multi_path[o.name], parent, obj.name, prop.name)}(${indexes_string(indexes)}) const;
{% end header %}\
{% if fu.SOURCE_TYPE == "source" %}\
      ${prop.metadataStoreRetType}
      OMEXMLMetadata::${getPropMethod(is_multi_path[o.name], parent, obj.name, prop.name)}(${indexes_string(indexes)}) const
{% end source %}\
{% end %}\
{% otherwise %}\
{% if fu.SOURCE_TYPE == "header" %}\
        // Documented in base class.
        ${prop.metadataStoreRetType}
        ${getPropMethod(is_multi_path[o.name], parent, obj.name, prop.name)}() const;
{% end header %}\
{% if fu.SOURCE_TYPE == "source" %}\
      ${prop.metadataStoreRetType}
      OMEXMLMetadata::${getPropMethod(is_multi_path[o.name], parent, obj.name, prop.name)}() const
{% end source %}\
{% end %}\
{% end %}\
{% if fu.SOURCE_TYPE == "source" %}\
      {
        // Parents: ${repr(parents[obj.name])}
{% choose %}\
{% when is_abstract(parent) and prop.isReference and prop.maxOccurs > 1 %}\
        // ${parent} is abstract proprietary, is reference and occurs more than once
        // ${obj.name} o = (${obj.name}) root.${".".join(accessor(obj.name, parent, prop)[:-1])};
        // return o.getLinked${prop.methodName}(${index_name_string(prop.name)}).getID();
        // DUMMYLINE
        ome::compat::shared_ptr< ${obj.langTypeNS}> o = ome::compat::dynamic_pointer_cast< ${obj.langTypeNS}>(${safe_accessor(['root']+accessor(obj.name, parent, prop)[:-1], getPropMethod(is_multi_path[o.name], parent, obj.name, prop.name))});
        ${prop.assignableType[' const']} ret(o->getLinked${prop.methodName}(${index_name_string(prop.name)}).lock());
        if (ret)
          return ret->getID();
        throw MetadataException("OMEXMLMetadata", "get{% if is_multi_path[o.name] %}${parent}{% end %}${obj.name}${prop.name}",
                                "Internal metadata store inconsistency: null object");
{% end %}\
{% when is_abstract(parent) and prop.isReference %}\
        // ${parent} is abstract proprietary
        ome::compat::shared_ptr< ${obj.langTypeNS}> o = ome::compat::dynamic_pointer_cast< ${obj.langTypeNS}>(${safe_accessor(['root']+accessor(obj.name, parent, prop)[:-1], getPropMethod(is_multi_path[o.name], parent, obj.name, prop.name))});
        ${prop.assignableType[' const']} ret(o->getLinked${prop.methodName}().lock());
        if (ret)
          return ret->getID();
        throw MetadataException("OMEXMLMetadata", "get{% if is_multi_path[o.name] %}${parent}{% end %}${obj.name}${prop.name}",
                                "Internal metadata store inconsistency: null object");
{% end %}\
{% when is_abstract(parent) %}\
        // ${parent} is abstract proprietary and not a reference
        ome::compat::shared_ptr< ${obj.langTypeNS}> o = ome::compat::dynamic_pointer_cast< ${obj.langTypeNS}>(${safe_accessor(['root']+accessor(obj.name, parent, prop)[:-1], getPropMethod(is_multi_path[o.name], parent, obj.name, prop.name))});
{% if prop.minOccurs == 0 %}\
        ${prop.retType[' const']} ret = o->get${prop.methodName}();
        if (ret)
          return *ret;
{% if prop.maxOccurs != 1 or prop.defaultXsdValue is None %}\
        throw MetadataException("OMEXMLMetadata", "get{% if is_multi_path[o.name] %}${parent}{% end %}${obj.name}${prop.name}",
                                "Internal metadata store inconsistency: null object");
{% end %}\
{% if prop.maxOccurs == 1 and prop.defaultXsdValue is not None %}\
{% if prop.langType == 'std::string' or prop.isEnumeration %}\
        return "${prop.defaultXsdValue}";
{% end %}\
{% if prop.langType != 'std::string' and not prop.isEnumeration %}\
        return ${prop.defaultXsdValue};
{% end %}\
{% end %}\
{% end %}\
{% if prop.minOccurs == 1 %}\
        return o->get${prop.methodName}();
{% end %}\
{% end %}\
{% when prop.isReference and prop.maxOccurs > 1 %}\
        // ${prop.name} is reference and occurs more than once
        ome::compat::shared_ptr< ${prop.langTypeNS}> annotation(${safe_accessor(['root']+accessor(obj.name, parent, prop), getPropMethod(is_multi_path[o.name], parent, obj.name, prop.name))}->getLinked${prop.methodName}(${index_name_string(prop.name)}).lock());
        if (annotation)
          return annotation->getID();
        /// @todo: Need an exception for store inconsistency.
        throw MetadataException("OMEXMLMetadata", "get{% if is_multi_path[o.name] %}${parent}{% end %}${obj.name}${prop.name}",
                                "Internal metadata store inconsistency: null annotation");
{% end %}\
{% when prop.isReference %}\
        // ${prop.name} is reference and occurs only once
        ome::compat::shared_ptr< ${prop.langTypeNS}> annotation(${safe_accessor(['root']+accessor(obj.name, parent, prop), getPropMethod(is_multi_path[o.name], parent, obj.name, prop.name))}->getLinked${prop.methodName}().lock());
        if (annotation)
          return annotation->getID();
        throw MetadataException("OMEXMLMetadata", "get{% if is_multi_path[o.name] %}${parent}{% end %}${obj.name}${prop.name}",
                                "Internal metadata store inconsistency: null annotation");
{% end %}\
{% otherwise %}\
        // ${prop.name} is not a reference
{% if prop.minOccurs == 0 %}\
        ${prop.retType[' const']} ret = ${safe_accessor(['root']+accessor(obj.name, parent, prop), getPropMethod(is_multi_path[o.name], parent, obj.name, prop.name))}->get${prop.methodName}();
        if (ret)
          return *ret;
        throw MetadataException("OMEXMLMetadata", "get{% if is_multi_path[o.name] %}${parent}{% end %}${obj.name}${prop.name}",
                                "Internal metadata store inconsistency: null object");
{% end %}\
{% if prop.minOccurs == 1 %}\
        return ${safe_accessor(['root']+accessor(obj.name, parent, prop), getPropMethod(is_multi_path[o.name], parent, obj.name, prop.name))}->get${prop.methodName}();
{% end %}\
{% end %}\
{% end %}\
      }
{% end source %}\
{% end %}\
\
{% def setter(parent, obj, prop, indexes) %}\
{% choose %}\
{% when len(indexes) > 0 and prop.maxOccurs > 1 %}\
{% if fu.SOURCE_TYPE == "header" %}\
        // Documented in base class.
        void
        set{% if is_multi_path[o.name] %}${parent}{% end %}${obj.name}${prop.name}(${prop.metadataStoreArgType} ${prop.argumentName}, ${indexes_string(indexes)}, ${index_string(prop.name)});
{% end header %}\
{% if fu.SOURCE_TYPE == "source" %}\
      void
      OMEXMLMetadata::set{% if is_multi_path[o.name] %}${parent}{% end %}${obj.name}${prop.name}(${prop.metadataStoreArgType} ${prop.argumentName}, ${indexes_string(indexes)}, ${index_string_dummy(prop.name)})
{% end source %}\
{% end %}\
{% when len(indexes) > 0 %}\
{% if fu.SOURCE_TYPE == "header" %}\
        // Documented in base class.
        void
        set{% if is_multi_path[o.name] %}${parent}{% end %}${obj.name}${prop.name}(${prop.metadataStoreArgType} ${prop.argumentName}, ${indexes_string(indexes)});
{% end header %}\
{% if fu.SOURCE_TYPE == "source" %}\
      void
      OMEXMLMetadata::set{% if is_multi_path[o.name] %}${parent}{% end %}${obj.name}${prop.name}(${prop.metadataStoreArgType} ${prop.argumentName}, ${indexes_string(indexes)})
{% end source %}\
{% end %}\
{% otherwise %}\
{% if fu.SOURCE_TYPE == "header" %}\
        // Documented in base class.
        void
        ${setPropMethod(is_multi_path[o.name], parent, obj.name, prop.name)}(${prop.metadataStoreArgType} ${prop.argumentName});
{% end header %}\
{% if fu.SOURCE_TYPE == "source" %}\
      void
      OMEXMLMetadata::${setPropMethod(is_multi_path[o.name], parent, obj.name, prop.name)}(${prop.metadataStoreArgType} ${prop.argumentName})
{% end source %}\
{% end %}\
{% end %}\
{% if fu.SOURCE_TYPE == "source" %}\
      {
        // Parents: ${repr(parents[obj.name])}
{% choose %}\
{% when is_abstract(parent) and prop.isReference %}\
        // ${prop.name} is abstract proprietary and is a reference
        ome::compat::shared_ptr< ${prop.instanceTypeNS}> ${prop.instanceVariableName}_reference(ome::compat::make_shared< ${prop.instanceTypeNS}>());
        ${prop.instanceVariableName}_reference->setID(${prop.argumentName});
        ome::compat::shared_ptr< ::${lang.omexml_model_package}::OMEModelObject> o_base(ome::compat::static_pointer_cast< ::${lang.omexml_model_package}::OMEModelObject>(${safe_accessor(['root']+accessor(obj.name, parent, prop)[:-1], setPropMethod(is_multi_path[o.name], parent, obj.name, prop.name))}));
        ome::compat::shared_ptr< ::${lang.omexml_model_package}::Reference> ref(ome::compat::static_pointer_cast< ::${lang.omexml_model_package}::Reference>(${prop.instanceVariableName}_reference));

        model->addReference(o_base, ref);
        // ${parent} is abstract proprietary
{% end %}\
{% when is_abstract(parent) %}\
        // ${parent} is abstract proprietary and not a reference
{% for i, v in enumerate(accessor(obj.name, parent, prop, accessor_string_complex)[:-1]) %}\
{% choose %}\
{% when v['level'] == 2 %}\
{% if i == 0 %}\
        ome::compat::shared_ptr<OMEXMLMetadataRoot>& o0(root);
{% end %}\
        if (o${i}->sizeOf${v['name']}List() == ${index_name_string(v['name'])})
          {
            ome::compat::shared_ptr< ${v['type']}> value(ome::compat::make_shared< ${obj.langTypeNS}>());
            o${i}->add${v['name']}(value);
          }
{% end %}\
{% when v['max_occurs'] > 1 %}\
{% if i == 0 %}\
        ome::compat::shared_ptr<OMEXMLMetadataRoot>& o0(root);
{% end %}\
        if (o${i}->sizeOf${v['name']}List() == ${index_name_string(v['name'])})
          {
            ome::compat::shared_ptr< ${v['type']}> value(ome::compat::make_shared< ${v['type']}>());
            o${i}->add${v['name']}(value);
          }
{% end %}\
{% when v['max_occurs'] == 1 %}\
{% if i == 0 %}\
        ome::compat::shared_ptr<OMEXMLMetadataRoot>& o0(root);
{% end %}\
        if (!o${i}->${v['accessor']}) // null
          {
            ome::compat::shared_ptr< ${v['type']}> value(ome::compat::make_shared< ${v['type']}>());
            o${i}->set${v['name']}(value);
          }
{% end %}\
{% end %}\
        ome::compat::shared_ptr< ${v['type']}> o${i + 1} = o${i}->${v['accessor']};
{% if v['level'] == 2 %}\
{% if "ID" == prop.name %}\
        ome::compat::shared_ptr< ::${lang.omexml_model_package}::OMEModelObject> o${i + 1}_base(ome::compat::static_pointer_cast< ::${lang.omexml_model_package}::OMEModelObject>(o${i + 1}));
        model->addModelObject(${prop.argumentName}, o${i + 1}_base);
{% end %}\
        ome::compat::shared_ptr< ${obj.langTypeNS}> o${i + 1}_mostderived(ome::compat::static_pointer_cast< ${obj.langTypeNS}>(o${i + 1}));
        if (!o${i + 1}_mostderived)
          throw MetadataException("OMEXMLMetadata", "set{% if is_multi_path[o.name] %}${parent}{% end %}${obj.name}${prop.name}",
                                  "Internal metadata store inconsistency: null object");

{% if not prop.isShared %}\
        o${i + 1}_mostderived->set${prop.methodName}(${prop.argumentName});
{% end %}\
{% if prop.isShared %}\
        ${prop.instanceVariableType} newval(ome::compat::make_shared< ${prop.langTypeNS}>(${prop.argumentName}));
        o${i + 1}_mostderived->set${prop.methodName}(newval);
{% end %}\
{% end %}\
{% end %}\
{% end %}\
{% when prop.isReference %}\
        // ${prop.name} is reference and occurs more than once
        ome::compat::shared_ptr< ${prop.instanceTypeNS}> ${prop.instanceVariableName}_reference(ome::compat::make_shared< ${prop.instanceTypeNS}>());
        ${prop.instanceVariableName}_reference->setID(${prop.argumentName});
        ome::compat::shared_ptr< ::${lang.omexml_model_package}::OMEModelObject> modelObject(ome::compat::static_pointer_cast< ::${lang.omexml_model_package}::OMEModelObject>(${safe_accessor(['root']+accessor(obj.name, parent, prop), setPropMethod(is_multi_path[o.name], parent, obj.name, prop.name))}));
        ome::compat::shared_ptr< ::${lang.omexml_model_package}::Reference> ref(ome::compat::static_pointer_cast< ::${lang.omexml_model_package}::Reference>(${prop.instanceVariableName}_reference));

        model->addReference(modelObject, ref);
{% end %}\
{% otherwise %}\
        // ${prop.name} is not a reference
{% for i, v in enumerate(accessor(obj.name, parent, prop, accessor_string_complex)) %}\
{% choose %}\
{% when v['max_occurs'] > 1 %}\
{% if i == 0 %}\
        ome::compat::shared_ptr<OMEXMLMetadataRoot>& o0(root);
{% end %}\
        if (o${i}->sizeOf${v['name']}List() == ${index_name_string(v['name'])})
          {
            ome::compat::shared_ptr< ${v['type']}> value(ome::compat::make_shared< ${v['type']}>());
            o${i}->add${v['name']}(value);
          }
{% end %}\
{% when v['max_occurs'] == 1 %}\
{% if i == 0 %}\
        ome::compat::shared_ptr<OMEXMLMetadataRoot>& o0(root);
{% end %}\
        if (!o${i}->${v['accessor']}) // null
          {
            ome::compat::shared_ptr< ${v['type']}> value(ome::compat::make_shared< ${v['type']}>());
            o${i}->set${v['name']}(value);
          }
{% end %}\
{% end %}\
        ome::compat::shared_ptr< ${v['type']}> o${i + 1} = o${i}->${v['accessor']};
{% if v['level'] == 1 %}\
{% if "ID" == prop.name %}\
        ome::compat::shared_ptr< ::${lang.omexml_model_package}::OMEModelObject> o${i + 1}_base(ome::compat::static_pointer_cast< ::${lang.omexml_model_package}::OMEModelObject>(o${i + 1}));
        model->addModelObject(${prop.argumentName}, o${i + 1}_base);
{% end %}\
        ome::compat::shared_ptr< ${obj.langTypeNS}> o${i + 1}_mostderived(ome::compat::static_pointer_cast< ${obj.langTypeNS}>(o${i + 1}));
        if (!o${i + 1}_mostderived)
          throw MetadataException("OMEXMLMetadata", "set{% if is_multi_path[o.name] %}${parent}{% end %}${obj.name}${prop.name}",
                                  "Internal metadata store inconsistency: null object");

{% if not prop.isShared %}\
        o${i + 1}_mostderived->set${prop.methodName}(${prop.argumentName});
{% end %}\
{% if prop.isShared %}\
        ${prop.instanceVariableType} newval(ome::compat::make_shared< ${prop.langTypeNS}>(${prop.argumentName}));
        o${i + 1}_mostderived->set${prop.methodName}(newval);
{% end %}\
{% end %}\
{% end %}\
{% end %}\
{% end %}\
{% if obj.name in customContent and prop.name in customContent[obj.name] %}\
{% if debug %}\
          // Custom content from ${obj.name} ${prop.name} template
{% end debug %}\
${customContent[obj.name][prop.name]}
{% end %}\
      }
{% end source %}\
{% end %}\
\
{% python
        def is_abstract(name):
                o = model.getObjectByName(name)
                if o is not None and \
                   (o.isAbstract):
                        return True
                return False

        def sorted_properties(o):
                return sorted(o.properties.values() + o.baseObjectProperties, lambda x, y: cmp(x.name, y.name))

        def accessor_string(name, max_occurs, level):
                """Makes a C++ method accessor string from an index name."""
                return accessor_string_complex(name, max_occurs, level)['accessor']

        def accessor_string_complex(name, max_occurs, level):
                """Makes a C++ method accessor string from an index name."""
                to_return = {'level': level, 'name': name, 'type': model.getObjectByName(name).langTypeNS, 'max_occurs': max_occurs}
                if max_occurs == 1:
                        to_return['accessor'] = "get%s()" % (name)
                        return to_return
                if name[:2].isupper():
                        to_return['accessor'] = "get%s(%sIndex)" % (name, name)
                        return to_return
                to_return['accessor'] = "get%s(%s%sIndex)" % (name, name[:1].lower(), name[1:])
                return to_return

        def accessor(name, parent, prop, func=accessor_string):
                results = dict()
                fu.resolve_hierarchy(results, model, {name: parents[name]}, func, min_occurs=1)
                if parent not in results.keys():
                        raise Exception("Invalid KEY No accessor for: name:%s parent:%s prop:%s === %s" % (name, parent, prop, results))
                if len(results.keys()) == 0:
                        raise Exception("Zero KEYS No accessor for: name:%s parent:%s prop:%s === %s" % (name, parent, prop, results))
                return results[parent]

        def safe_accessor(calls, method):
                ret = None
                if len(calls) == 1:
                       ret = "safe_fetch(%s, \"%s [%s]\")" % (calls[0], method, calls[0])
                else:
                        for call in range(len(calls)):
                                if call == 0:
                                        ret = "safe_fetch(%s, \"%s [%s]\")" % (calls[call], method, calls[call])
                                else:
                                        ret = "safe_fetch(%s->%s, \"%s [%s]\")" % (ret, calls[call], method, calls[call])
                return ret

        def getCounterMethod(multipath, parent, name):
                if multipath:
                        return "get%s%sCount" % (parent, name)
                else:
                        return "get%sCount" % (name)

        def getPropMethod(multipath, parent, name, prop):
                if multipath:
                        return "get%s%s%s" % (parent, name, prop)
                else:
                        return "get%s%s" % (name, prop)

        def setPropMethod(multipath, parent, name, prop):
                if multipath:
                        return "set%s%s%s" % (parent, name, prop)
                else:
                        return "set%s%s" % (name, prop)
%}\
\
\
/*
 * #%L
 * OME-BIOFORMATS C++ library for image IO.
 * %%
 * Copyright © 2006 - 2015 Open Microscopy Environment:
 *   - Massachusetts Institute of Technology
 *   - National Institutes of Health
 *   - University of Dundee
 *   - Board of Regents of the University of Wisconsin-Madison
 *   - Glencoe Software, Inc.
 * %%
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice,
 *    this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDERS OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 *
 * The views and conclusions contained in the software and documentation are
 * those of the authors and should not be interpreted as representing official
 * policies, either expressed or implied, of any organization.
 * #L%
 */

/*─────────────────────────────────────────────────────────────────────────────
 *
 * THIS IS AUTOMATICALLY GENERATED CODE.  DO NOT MODIFY.
 *
 *─────────────────────────────────────────────────────────────────────────────
 */

{% if fu.SOURCE_TYPE == "header" %}\
#ifndef ${fu.GUARD}
#define ${fu.GUARD}

#include <ome/xml/meta/Metadata.h>
#include <ome/xml/meta/MetadataException.h>
#include <ome/xml/meta/OMEXMLMetadataRoot.h>
#include <ome/xml/model/detail/OMEModel.h>

{% end header%}\
{% if fu.SOURCE_TYPE == "source" %}\
#include <ome/internal/version.h>

#include <ome/common/xml/Platform.h>

#include <ome/internal/url.h>

#include <ome/xml/meta/OMEXMLMetadata.h>

{% for header in fu.OBJECT_HEADERS %}\
#include <${header}>
{% end %}\

namespace
{

  // Throw an exception if a pointer is invalid.
  template<typename T>
  ome::compat::shared_ptr<T>
  safe_fetch(ome::compat::shared_ptr<T> ptr,
             const char * const method)
  {
    if (!ptr)
      throw ome::xml::meta::MetadataException("OMEXMLMetadata", method,
                                              "Internal metadata store inconsistency: null object");
    return ptr;
  }

  // Throw an exception if a pointer is invalid.
  template<typename T>
  ome::compat::shared_ptr<T>
  safe_fetch(ome::compat::weak_ptr<T>   ptr,
             const char * const method)
  {
    ome::compat::shared_ptr<T> shared(ptr.lock());
    if (!shared)
      throw ome::xml::meta::MetadataException("OMEXMLMetadata", method,
                                              "Internal metadata store inconsistency: null weak reference");
    return shared;
  }

  // Pass through for value types.
  template<typename T>
  T
  safe_fetch(T                  value,
             const char * const /* method */)
  {
    return value;
  }

}

{% end source%}\

namespace ome
{
  namespace xml
  {
    namespace meta
    {

{% if fu.SOURCE_TYPE == "header" %}\
      /**
       * A metadata store implementation for constructing and
       * manipulating OME-XML DOMs for the current version of the
       * OME-XML schema.
       */
      class OMEXMLMetadata : virtual public Metadata
      {
      private:
        /// OME-XML root node.
        ome::compat::shared_ptr<OMEXMLMetadataRoot> root; // OME
        /// Generic root node.
        ome::compat::shared_ptr<MetadataRoot> genericRoot; // OME
        /// OME-XML model.
        ome::compat::shared_ptr< ::${lang.omexml_model_package}::OMEModel> model;

      public:
{% end header %}\
{% if fu.SOURCE_TYPE == "header" %}\
        /// Constructor.
        OMEXMLMetadata();
{% end header %}\
{% if fu.SOURCE_TYPE == "source" %}\
      OMEXMLMetadata::OMEXMLMetadata():
        root(),
        model()
      {
        createRoot();
      }
{% end source %}\

{% if fu.SOURCE_TYPE == "header" %}\
        /// Destructor.
        virtual
        ~OMEXMLMetadata();
{% end header %}\
{% if fu.SOURCE_TYPE == "source" %}\
      OMEXMLMetadata::~OMEXMLMetadata()
      {
      }
{% end source %}\

{% if fu.SOURCE_TYPE == "header" %}\
        // Documented in base class.
        void
        createRoot();
{% end header %}\
{% if fu.SOURCE_TYPE == "source" %}\
      void
      OMEXMLMetadata::createRoot()
      {
        ome::compat::shared_ptr<MetadataRoot> newroot(ome::compat::make_shared<OMEXMLMetadataRoot>());
        setRoot(newroot);
      }
{% end source %}\

{% if fu.SOURCE_TYPE == "header" %}\
        // Documented in base class.
        ome::compat::shared_ptr<MetadataRoot>&
        getRoot();
{% end header %}\
{% if fu.SOURCE_TYPE == "source" %}\
      ome::compat::shared_ptr<MetadataRoot>&
      OMEXMLMetadata::getRoot()
      {
        return this->genericRoot;
      }
{% end source %}\

{% if fu.SOURCE_TYPE == "header" %}\
{% if debug %}\
        // @copydoc only needed due to doxygen bug; should
        // automatically inherit base method documentation.
{% end debug %}\
        /**
         * @copydoc ::${lang.metadata_package}::MetadataStore::setRoot()
         */
        void
        setRoot(ome::compat::shared_ptr<MetadataRoot>& root);
{% end header %}\
{% if fu.SOURCE_TYPE == "source" %}\
      void
      OMEXMLMetadata::setRoot(ome::compat::shared_ptr<MetadataRoot>& root)
      {
        ome::compat::shared_ptr<OMEXMLMetadataRoot> newroot =
          ome::compat::dynamic_pointer_cast<OMEXMLMetadataRoot>(root);

        if (!newroot)
          throw MetadataException("OMEXMLMetadata", "setRoot",
                                  "root must be of type OMEXMLMetadataRoot");

        this->root = newroot;
        this->genericRoot = ome::compat::static_pointer_cast<MetadataRoot>(this->root);
        model = ome::compat::make_shared< ::${lang.omexml_model_package}::detail::OMEModel>();
      }
{% end source %}\

{% if fu.SOURCE_TYPE == "header" %}\
        /**
         * Dump metadata as OME-XML string.
         *
         * The OME XML model objects contained within this metadata
         * store are serialised to an XML text representation.
         *
         * @returns a string containing OME-XML.
         */
        std::string
        dumpXML();
{% end header %}\
{% if fu.SOURCE_TYPE == "source" %}\
      std::string
      OMEXMLMetadata::dumpXML()
      {
        ome::common::xml::Platform xmlplat;

        resolveReferences();

        ome::common::xml::dom::Document doc(ome::common::xml::dom::createEmptyDocument("${model.getObjectByName("OME").namespace}", "OME"));

        ome::common::xml::dom::Node comment
          (doc.createComment
           (" Warning: this comment is within an OME-XML metadata block, which "
            "contains crucial dimensional parameters and other important metadata. "
            "Please edit cautiously (if at all), and back up the original data "
            "before doing so. For more information, see the OME-TIFF web site: "
            URL_OME_TIFF " "));
        doc.getDocumentElement().appendChild(comment);

        ome::common::xml::dom::Element ome = root->asXMLElement(doc);

        std::string text;
        ome::common::xml::dom::writeDocument(doc, text);
        return text;
      }
{% end source %}\

{% if fu.SOURCE_TYPE == "header" %}\
        /**
         * Resolve all references.  Check for invalid references and
         * null model objects.
         *
         * @returns the number of unhandled references.
         *
         * @sa OMEModel::resolveReferences.
         */
        index_type
        resolveReferences();
{% end header %}\
{% if fu.SOURCE_TYPE == "source" %}\
      OMEXMLMetadata::index_type
      OMEXMLMetadata::resolveReferences()
      {
        return model->resolveReferences();
      }
{% end source %}\

{% if debug %}\
        // -- Entity counting (manual definitions) --

{% end debug %}\

{% if fu.SOURCE_TYPE == "header" %}\
        // Documented in base class.
        index_type
        getBooleanAnnotationAnnotationCount(index_type booleanAnnotationIndex) const;
{% end header %}\
{% if fu.SOURCE_TYPE == "source" %}\
      OMEXMLMetadata::index_type
      OMEXMLMetadata::getBooleanAnnotationAnnotationCount(index_type booleanAnnotationIndex) const
      {
        const char * const sa_method("getBooleanAnnotationAnnotationCount [getStructuredAnnotations]");
        const char * const annotation_method("getBooleanAnnotationAnnotationCount [getBooleanAnnotation]");
        return safe_fetch(safe_fetch(root->getStructuredAnnotations(), sa_method)->getBooleanAnnotation(booleanAnnotationIndex), annotation_method)->sizeOfLinkedAnnotationList();
      }
{% end source %}\

{% if fu.SOURCE_TYPE == "header" %}\
        // Documented in base class.
        index_type
        getCommentAnnotationAnnotationCount(index_type commentAnnotationIndex) const;
{% end header %}\
{% if fu.SOURCE_TYPE == "source" %}\
      OMEXMLMetadata::index_type
      OMEXMLMetadata::getCommentAnnotationAnnotationCount(index_type commentAnnotationIndex) const
      {
        const char * const sa_method("getCommentAnnotationAnnotationCount [getStructuredAnnotations]");
        const char * const annotation_method("getCommentAnnotationAnnotationCount [getCommentAnnotation]");
        return safe_fetch(safe_fetch(root->getStructuredAnnotations(), sa_method)->getCommentAnnotation(commentAnnotationIndex), annotation_method)->sizeOfLinkedAnnotationList();
      }
{% end source %}\

{% if fu.SOURCE_TYPE == "header" %}\
        // Documented in base class.
        index_type
        getDoubleAnnotationAnnotationCount(index_type doubleAnnotationIndex) const;
{% end header %}\
{% if fu.SOURCE_TYPE == "source" %}\
      OMEXMLMetadata::index_type
      OMEXMLMetadata::getDoubleAnnotationAnnotationCount(index_type doubleAnnotationIndex) const
      {
        const char * const sa_method("getDoubleAnnotationAnnotationCount [getStructuredAnnotations]");
        const char * const annotation_method("getDoubleAnnotationAnnotationCount [getDoubleAnnotation]");
        return safe_fetch(safe_fetch(root->getStructuredAnnotations(), sa_method)->getDoubleAnnotation(doubleAnnotationIndex), annotation_method)->sizeOfLinkedAnnotationList();
      }
{% end source %}\

{% if fu.SOURCE_TYPE == "header" %}\
        // Documented in base class.
        index_type
        getFileAnnotationAnnotationCount(index_type fileAnnotationIndex) const;
{% end header %}\
{% if fu.SOURCE_TYPE == "source" %}\
      OMEXMLMetadata::index_type
      OMEXMLMetadata::getFileAnnotationAnnotationCount(index_type fileAnnotationIndex) const
      {
        const char * const sa_method("getFileAnnotationAnnotationCount [getStructuredAnnotations]");
        const char * const annotation_method("getFileAnnotationAnnotationCount [getFileAnnotation]");
        return safe_fetch(safe_fetch(root->getStructuredAnnotations(), sa_method)->getFileAnnotation(fileAnnotationIndex), annotation_method)->sizeOfLinkedAnnotationList();
      }
{% end source %}\

{% if fu.SOURCE_TYPE == "header" %}\
        // Documented in base class.
        index_type
        getListAnnotationAnnotationCount(index_type listAnnotationIndex) const;
{% end header %}\
{% if fu.SOURCE_TYPE == "source" %}\
      OMEXMLMetadata::index_type
      OMEXMLMetadata::getListAnnotationAnnotationCount(index_type listAnnotationIndex) const
      {
        const char * const sa_method("getListAnnotationAnnotationCount [getStructuredAnnotations]");
        const char * const annotation_method("getListAnnotationAnnotationCount [getListAnnotation]");
        return safe_fetch(safe_fetch(root->getStructuredAnnotations(), sa_method)->getListAnnotation(listAnnotationIndex), annotation_method)->sizeOfLinkedAnnotationList();
      }
{% end source %}\

{% if fu.SOURCE_TYPE == "header" %}\
        // Documented in base class.
        index_type
        getLongAnnotationAnnotationCount(index_type longAnnotationIndex) const;
{% end header %}\
{% if fu.SOURCE_TYPE == "source" %}\
      OMEXMLMetadata::index_type
      OMEXMLMetadata::getLongAnnotationAnnotationCount(index_type longAnnotationIndex) const
      {
        const char * const sa_method("getLongAnnotationAnnotationCount [getStructuredAnnotations]");
        const char * const annotation_method("getLongAnnotationAnnotationCount [getLongAnnotation]");
        return safe_fetch(safe_fetch(root->getStructuredAnnotations(), sa_method)->getLongAnnotation(longAnnotationIndex), annotation_method)->sizeOfLinkedAnnotationList();
      }
{% end source %}\

{% if fu.SOURCE_TYPE == "header" %}\
        // Documented in base class.
        index_type
        getTagAnnotationAnnotationCount(index_type tagAnnotationIndex) const;
{% end header %}\
{% if fu.SOURCE_TYPE == "source" %}\
      OMEXMLMetadata::index_type
      OMEXMLMetadata::getTagAnnotationAnnotationCount(index_type tagAnnotationIndex) const
      {
        const char * const sa_method("getTagAnnotationAnnotationCount [getStructuredAnnotations]");
        const char * const annotation_method("getTagAnnotationAnnotationCount [getTagAnnotation]");
        return safe_fetch(safe_fetch(root->getStructuredAnnotations(), sa_method)->getTagAnnotation(tagAnnotationIndex), annotation_method)->sizeOfLinkedAnnotationList();
      }
{% end source %}\

{% if fu.SOURCE_TYPE == "header" %}\
        // Documented in base class.
        index_type
        getTermAnnotationAnnotationCount(index_type termAnnotationIndex) const;
{% end header %}\
{% if fu.SOURCE_TYPE == "source" %}\
      OMEXMLMetadata::index_type
      OMEXMLMetadata::getTermAnnotationAnnotationCount(index_type termAnnotationIndex) const
      {
        const char * const sa_method("getTermAnnotationAnnotationCount [getStructuredAnnotations]");
        const char * const annotation_method("getTermAnnotationAnnotationCount [getTermAnnotation]");
        return safe_fetch(safe_fetch(root->getStructuredAnnotations(), sa_method)->getTermAnnotation(termAnnotationIndex), annotation_method)->sizeOfLinkedAnnotationList();
      }
{% end source %}\

{% if fu.SOURCE_TYPE == "header" %}\
        // Documented in base class.
        index_type
        getTimestampAnnotationAnnotationCount(index_type timestampAnnotationIndex) const;
{% end header %}\
{% if fu.SOURCE_TYPE == "source" %}\
      OMEXMLMetadata::index_type
      OMEXMLMetadata::getTimestampAnnotationAnnotationCount(index_type timestampAnnotationIndex) const
      {
        const char * const sa_method("getTimestampAnnotationAnnotationCount [getStructuredAnnotations]");
        const char * const annotation_method("getTimestampAnnotationAnnotationCount [getTimestampAnnotation]");
        return safe_fetch(safe_fetch(root->getStructuredAnnotations(), sa_method)->getTimestampAnnotation(timestampAnnotationIndex), annotation_method)->sizeOfLinkedAnnotationList();
      }
{% end source %}\

{% if fu.SOURCE_TYPE == "header" %}\
        // Documented in base class.
        index_type
        getXMLAnnotationAnnotationCount(index_type xmlAnnotationIndex) const;
{% end header %}\
{% if fu.SOURCE_TYPE == "source" %}\
      OMEXMLMetadata::index_type
      OMEXMLMetadata::getXMLAnnotationAnnotationCount(index_type xmlAnnotationIndex) const
      {
        const char * const sa_method("getXMLAnnotationAnnotationCount [getStructuredAnnotations]");
        const char * const annotation_method("getXMLAnnotationAnnotationCount [getXMLAnnotation]");
        return safe_fetch(safe_fetch(root->getStructuredAnnotations(), sa_method)->getXMLAnnotation(xmlAnnotationIndex), annotation_method)->sizeOfLinkedAnnotationList();
      }
{% end source %}\

{% if fu.SOURCE_TYPE == "header" %}\
        // Documented in base class.
        index_type
        getLineAnnotationCount(index_type roiIndex, index_type lineIndex) const;
{% end header %}\
{% if fu.SOURCE_TYPE == "source" %}\
      OMEXMLMetadata::index_type
      OMEXMLMetadata::getLineAnnotationCount(index_type roiIndex, index_type lineIndex) const
      {
        const char * const roi_method("getLineAnnotationCount [getROI]");
        const char * const union_method("getLineAnnotationCount [getUnion]");
        const char * const shape_method("getLineAnnotationCount [getLine]");
        return safe_fetch(safe_fetch(safe_fetch(root->getROI(roiIndex), roi_method)->getUnion(), union_method)->getLine(lineIndex), shape_method)->sizeOfLinkedAnnotationList();
      }
{% end source %}\

{% if fu.SOURCE_TYPE == "header" %}\
        // Documented in base class.
        index_type
        getRectangleAnnotationCount(index_type roiIndex, index_type ractangleIndex) const;
{% end header %}\
{% if fu.SOURCE_TYPE == "source" %}\
      OMEXMLMetadata::index_type
      OMEXMLMetadata::getRectangleAnnotationCount(index_type roiIndex, index_type ractangleIndex) const
      {
        const char * const roi_method("getRectangleAnnotationCount [getROI]");
        const char * const union_method("getRectangleAnnotationCount [getUnion]");
        const char * const shape_method("getRectangleAnnotationCount [getRectangle]");
        return safe_fetch(safe_fetch(safe_fetch(root->getROI(roiIndex), roi_method)->getUnion(), union_method)->getRectangle(ractangleIndex), shape_method)->sizeOfLinkedAnnotationList();
      }
{% end source %}\

{% if fu.SOURCE_TYPE == "header" %}\
        // Documented in base class.
        index_type
        getMaskAnnotationCount(index_type roiIndex, index_type maskIndex) const;
{% end header %}\
{% if fu.SOURCE_TYPE == "source" %}\
      OMEXMLMetadata::index_type
      OMEXMLMetadata::getMaskAnnotationCount(index_type roiIndex, index_type maskIndex) const
      {
        const char * const roi_method("getMaskAnnotationCount [getROI]");
        const char * const union_method("getMaskAnnotationCount [getUnion]");
        const char * const shape_method("getMaskAnnotationCount [getMask]");
        return safe_fetch(safe_fetch(safe_fetch(root->getROI(roiIndex), roi_method)->getUnion(), union_method)->getMask(maskIndex), shape_method)->sizeOfLinkedAnnotationList();
      }
{% end source %}\

{% if fu.SOURCE_TYPE == "header" %}\
        // Documented in base class.
        index_type
        getEllipseAnnotationCount(index_type roiIndex, index_type ellipseIndex) const;
{% end header %}\
{% if fu.SOURCE_TYPE == "source" %}\
      OMEXMLMetadata::index_type
      OMEXMLMetadata::getEllipseAnnotationCount(index_type roiIndex, index_type ellipseIndex) const
      {
        const char * const roi_method("getEllipseAnnotationCount [getROI]");
        const char * const union_method("getEllipseAnnotationCount [getUnion]");
        const char * const shape_method("getEllipseAnnotationCount [getEllipse]");
        return safe_fetch(safe_fetch(safe_fetch(root->getROI(roiIndex), roi_method)->getUnion(), union_method)->getEllipse(ellipseIndex), shape_method)->sizeOfLinkedAnnotationList();
      }
{% end source %}\

{% if fu.SOURCE_TYPE == "header" %}\
        // Documented in base class.
        index_type
        getPointAnnotationCount(index_type roiIndex, index_type pointIndex) const;
{% end header %}\
{% if fu.SOURCE_TYPE == "source" %}\
      OMEXMLMetadata::index_type
      OMEXMLMetadata::getPointAnnotationCount(index_type roiIndex, index_type pointIndex) const
      {
        const char * const roi_method("getPointAnnotationCount [getROI]");
        const char * const union_method("getPointAnnotationCount [getUnion]");
        const char * const shape_method("getPointAnnotationCount [getPoint]");
        return safe_fetch(safe_fetch(safe_fetch(root->getROI(roiIndex), roi_method)->getUnion(), union_method)->getPoint(pointIndex), shape_method)->sizeOfLinkedAnnotationList();
      }
{% end source %}\

{% if fu.SOURCE_TYPE == "header" %}\
        // Documented in base class.
        index_type
        getPolygonAnnotationCount(index_type roiIndex, index_type polygonIndex) const;
{% end header %}\
{% if fu.SOURCE_TYPE == "source" %}\
      OMEXMLMetadata::index_type
      OMEXMLMetadata::getPolygonAnnotationCount(index_type roiIndex, index_type polygonIndex) const
      {
        const char * const roi_method("getPolygonAnnotationCount [getROI]");
        const char * const union_method("getPolygonAnnotationCount [getUnion]");
        const char * const shape_method("getPolygonAnnotationCount [getPolygon]");
        return safe_fetch(safe_fetch(safe_fetch(root->getROI(roiIndex), roi_method)->getUnion(), union_method)->getPolygon(polygonIndex), shape_method)->sizeOfLinkedAnnotationList();
      }
{% end source %}\

{% if fu.SOURCE_TYPE == "header" %}\
        // Documented in base class.
        index_type
        getPolylineAnnotationCount(index_type roiIndex, index_type polylineIndex) const;
{% end header %}\
{% if fu.SOURCE_TYPE == "source" %}\
      OMEXMLMetadata::index_type
      OMEXMLMetadata::getPolylineAnnotationCount(index_type roiIndex, index_type polylineIndex) const
      {
        const char * const roi_method("getPolylineAnnotationCount [getROI]");
        const char * const union_method("getPolylineAnnotationCount [getUnion]");
        const char * const shape_method("getPolylineAnnotationCount [getPolyline]");
        return safe_fetch(safe_fetch(safe_fetch(root->getROI(roiIndex), roi_method)->getUnion(), union_method)->getPolyline(polylineIndex), shape_method)->sizeOfLinkedAnnotationList();
      }
{% end source %}\

{% if fu.SOURCE_TYPE == "header" %}\
        // Documented in base class.
        index_type
        getLabelAnnotationCount(index_type roiIndex, index_type labelIndex) const;
{% end header %}\
{% if fu.SOURCE_TYPE == "source" %}\
      OMEXMLMetadata::index_type
      OMEXMLMetadata::getLabelAnnotationCount(index_type roiIndex, index_type labelIndex) const
      {
        const char * const roi_method("getLabelAnnotationCount [getROI]");
        const char * const union_method("getLabelAnnotationCount [getUnion]");
        const char * const shape_method("getLabelAnnotationCount [getLabel]");
        return safe_fetch(safe_fetch(safe_fetch(root->getROI(roiIndex), roi_method)->getUnion(), union_method)->getLabel(labelIndex), shape_method)->sizeOfLinkedAnnotationList();
      }
{% end source %}\

{% if fu.SOURCE_TYPE == "header" %}\
        // Documented in base class.
        index_type
        getArcAnnotationCount(index_type instrumentIndex, index_type arcIndex) const;
{% end header %}\
{% if fu.SOURCE_TYPE == "source" %}\
      OMEXMLMetadata::index_type
      OMEXMLMetadata::getArcAnnotationCount(index_type instrumentIndex, index_type arcIndex) const
      {
        const char * const instrument_method("getArcAnnotationCount [getInstrument]");
        const char * const lightsource_method("getArcAnnotationCount [getArc]");
        return safe_fetch(safe_fetch(root->getInstrument(instrumentIndex), instrument_method)->getArc(arcIndex), lightsource_method)->sizeOfLinkedAnnotationList();
      }
{% end source %}\

{% if fu.SOURCE_TYPE == "header" %}\
        // Documented in base class.
        index_type
        getFilamentAnnotationCount(index_type instrumentIndex, index_type filamentIndex) const;
{% end header %}\
{% if fu.SOURCE_TYPE == "source" %}\
      OMEXMLMetadata::index_type
      OMEXMLMetadata::getFilamentAnnotationCount(index_type instrumentIndex, index_type filamentIndex) const
      {
        const char * const instrument_method("getFilamentAnnotationCount [getInstrument]");
        const char * const lightsource_method("getFilamentAnnotationCount [getFilament]");
        return safe_fetch(safe_fetch(root->getInstrument(instrumentIndex), instrument_method)->getFilament(filamentIndex), lightsource_method)->sizeOfLinkedAnnotationList();
      }
{% end source %}\

{% if fu.SOURCE_TYPE == "header" %}\
        // Documented in base class.
        index_type
        getLaserAnnotationCount(index_type instrumentIndex, index_type laserIndex) const;
{% end header %}\
{% if fu.SOURCE_TYPE == "source" %}\
      OMEXMLMetadata::index_type
      OMEXMLMetadata::getLaserAnnotationCount(index_type instrumentIndex, index_type laserIndex) const
      {
        const char * const instrument_method("getLaserAnnotationCount [getInstrument]");
        const char * const lightsource_method("getLaserAnnotationCount [getLaser]");
        return safe_fetch(safe_fetch(root->getInstrument(instrumentIndex), instrument_method)->getLaser(laserIndex), lightsource_method)->sizeOfLinkedAnnotationList();
      }
{% end source %}\

{% if fu.SOURCE_TYPE == "header" %}\
        // Documented in base class.
        index_type
        getLightEmittingDiodeAnnotationCount(index_type instrumentIndex, index_type lightEmittingDiodeIndex) const;
{% end header %}\
{% if fu.SOURCE_TYPE == "source" %}\
      OMEXMLMetadata::index_type
      OMEXMLMetadata::getLightEmittingDiodeAnnotationCount(index_type instrumentIndex, index_type lightEmittingDiodeIndex) const
      {
        const char * const instrument_method("getLightEmittingDiodeAnnotationCount [getInstrument]");
        const char * const lightsource_method("getLightEmittingDiodeAnnotationCount [getLightEmittingDiode]");
        return safe_fetch(safe_fetch(root->getInstrument(instrumentIndex), instrument_method)->getLightEmittingDiode(lightEmittingDiodeIndex), lightsource_method)->sizeOfLinkedAnnotationList();
      }
{% end source %}\

{% if fu.SOURCE_TYPE == "header" %}\
        // Documented in base class.
        index_type
        getGenericExcitationSourceAnnotationCount(index_type instrumentIndex, index_type genericExcitationSourceIndex) const;
{% end header %}\
{% if fu.SOURCE_TYPE == "source" %}\
      OMEXMLMetadata::index_type
      OMEXMLMetadata::getGenericExcitationSourceAnnotationCount(index_type instrumentIndex, index_type genericExcitationSourceIndex) const
      {
        const char * const instrument_method("getGenericExcitationSourceAnnotationCount [getInstrument]");
        const char * const lightsource_method("getGenericExcitationSourceAnnotationCount [getGenericExcitationSource]");
        return safe_fetch(safe_fetch(root->getInstrument(instrumentIndex), instrument_method)->getGenericExcitationSource(genericExcitationSourceIndex), lightsource_method)->sizeOfLinkedAnnotationList();
      }
{% end source %}\

{% if fu.SOURCE_TYPE == "header" %}\
{% if debug %}\
        // -- Entity counting (code generated definitions) --

{% end debug %}\
{% end header %}\

{% for o in sorted(model.objects.values(), lambda x, y: cmp(x.name, y.name)) %}\
{% if o.name not in fu.METADATA_OBJECT_IGNORE %}\
{% if o.langBaseType is not None %}\
{% if fu.SOURCE_TYPE == "header" %}\
{% if debug %}\
        // Element's text data
        // ${repr(indexes[o.name])}
{% end debug %}\
        // Documented in base class.
        void
        set${o.name}Value(${o.langBaseType} value, ${indexes_string(indexes[o.name].items()[0][1])});
{% end header %}\
{% if fu.SOURCE_TYPE == "source" %}\
      void
      OMEXMLMetadata::set${o.name}Value(${o.langBaseType} value, ${indexes_string(indexes[o.name].items()[0][1])})
      {
        if (root->sizeOfImageList() == imageIndex)
          {
            ome::compat::shared_ptr< ::${lang.omexml_model_package}::Image> newImage(ome::compat::make_shared< ::${lang.omexml_model_package}::Image>());
            root->addImage(newImage);
          }
        ome::compat::shared_ptr< ::${lang.omexml_model_package}::Image> o1 = root->getImage(imageIndex);
        if (!o1->getPixels()) // null
          {
            ome::compat::shared_ptr< ::${lang.omexml_model_package}::Pixels> newPixels(ome::compat::make_shared< ::${lang.omexml_model_package}::Pixels>());
            o1->setPixels(newPixels);
          }
        ome::compat::shared_ptr< ::${lang.omexml_model_package}::Pixels> o2 = o1->getPixels();
        if (o2->sizeOfTiffDataList() == tiffDataIndex)
          {
            ome::compat::shared_ptr< ::${lang.omexml_model_package}::TiffData> newTiffData(ome::compat::make_shared< ::${lang.omexml_model_package}::TiffData>());
            o2->addTiffData(newTiffData);
          }
        ome::compat::shared_ptr< ::${lang.omexml_model_package}::TiffData> o3 = o2->getTiffData(tiffDataIndex);
        if (!o3->getUUID()) // null
          {
            ome::compat::shared_ptr< ::${lang.omexml_model_package}::UUID> newUUID(ome::compat::make_shared< ::${lang.omexml_model_package}::UUID>());
            o3->setUUID(newUUID);
          }
        ome::compat::shared_ptr< ::${lang.omexml_model_package}::UUID> o4 = o3->getUUID();
        o4->setValue(value);
      }
{% end source %}\

{% if fu.SOURCE_TYPE == "header" %}\
        // Documented in base class.
        ${o.langBaseType}
        get${o.name}Value(${indexes_string(indexes[o.name].items()[0][1])}) const;
{% end header %}\
{% if fu.SOURCE_TYPE == "source" %}\
      ${o.langBaseType}
      OMEXMLMetadata::get${o.name}Value(${indexes_string(indexes[o.name].items()[0][1])}) const
      {
        const char * const image_method("get${o.name}Value [getImage]");
        const char * const pixels_method("get${o.name}Value [getPixels]");
        const char * const tiffdata_method("get${o.name}Value [getTiffData]");
        const char * const uuid_method("get${o.name}Value [getUUID]");
        return safe_fetch(safe_fetch(safe_fetch(safe_fetch(root->getImage(imageIndex), image_method)->getPixels(), pixels_method)->getTiffData(tiffDataIndex), tiffdata_method)->getUUID(), uuid_method)->getValue();
      }
{% end source %}\

{% end %}\
{% if parents[o.name] is not None and not o.isAbstract %}\
{% for k, v in indexes[o.name].items() %}\
{% if fu.max_occurs_under_parent(model, k, o.name) > 1 and (k not in fu.METADATA_COUNT_IGNORE or o.type not in fu.METADATA_COUNT_IGNORE[k]) %}\
${counter(k, o, v)}\

{% end %}\
{% end %}\
{% end %}\
{% end %}\
{% end %}\

{% if debug %}\
        // -- Entity retrieval (manual definitions) --

{% end debug %}\

{% if fu.SOURCE_TYPE == "header" %}\
{% if debug %}\
        // -- Entity retrieval (code generated definitions) --

{% end debug %}\
        // Documented in base class.
        const std::string&
        getUUID() const;
{% end header %}\
{% if fu.SOURCE_TYPE == "source" %}\
      const std::string&
      OMEXMLMetadata::getUUID() const
      {
        ome::compat::shared_ptr<const std::string> uuid = root->getUUID();
        if (uuid)
          return *root->getUUID();
        else
          throw MetadataException("OMEXMLMetadata", "getUUID",
                                  "Internal metadata store inconsistency: null object");
      }
{% end source %}\

{% for o in sorted(model.objects.values(), lambda x, y: cmp(x.name, y.name)) %}\
{% if o.name not in fu.METADATA_OBJECT_IGNORE %}\
{% if parents[o.name] is not None and not o.isAbstract %}\
{% if fu.SOURCE_TYPE == "header" %}\
{% if debug %}\
        //
        // ${o.name} property storage
        //
        // Indexes: ${repr(indexes[o.name])}
        // ${repr(parents[o.name])}
        // Is multi path? ${is_multi_path[o.name]}

{% end debug %}\
{% end header %}\
{% choose %}\
{% when o.isReference %}\
{% for prop in sorted(o.properties.values() + o.baseObjectProperties, lambda x, y: cmp(x.name, y.name)) %}\
{% if fu.SOURCE_TYPE == "header" %}\
{% if debug %}\
        // ${prop.minOccurs}:${prop.maxOccurs}
        // Is multi path? ${is_multi_path[o.name]}
        // Ignoring ${prop.name} property of reference ${o.name}

{% end debug %}\
{% end header %}\
{% end %}\
{% end %}\
{% otherwise %}\
\
{% for k, v in indexes[o.name].items() %}\
{% if is_abstract(k) %}\
{% for prop in sorted_properties(model.getObjectByName(k)) %}\
{% choose %}\
{% when not prop.isPrimitive and prop.isChoice %}\
{% if debug %}\
        // Ignoring ${prop.name} of parent abstract type
{% end debug %}\
{% end %}\
{% otherwise %}\
{% for parent_k, parent_v in indexes[k].items() %}\
{% if not prop.isBackReference %}\
{% if fu.SOURCE_TYPE == "header" %}\
{% if debug %}\
        // ${prop.name} accessor from parent ${k}
{% end debug %}\
{% end header %}\

{% end %}\
{% end %}\
{% end %}\
{% end %}\
{% end %}\
{% end %}\
{% end %}\
\
{% for prop in sorted(o.properties.values() + o.baseObjectProperties, lambda x, y: cmp(x.name, y.name)) %}\
{% choose %}\
{% when prop.isBackReference %}\
{% if debug %}\
        // Ignoring ${prop.name} back reference
{% end debug %}\
{% end %}\
{% when not prop.isReference and not prop.isAttribute and prop.isComplex() and (not prop.name in fu.SHAPE_OVERRIDE) %}\
{% if debug %}\
        // Ignoring ${prop.name} element, complex property
{% end debug %}\
{% end %}\
{% otherwise %}\
{% for k, v in indexes[o.name].items() %}\
${getter(k, o, prop, v)}\

{% end %}\
{% end %}\
{% end %}\
{% end %}\
{% end %}\
{% end %}\
{% end %}\
{% end %}\
{% end %}\

{% if debug %}\
        // -- Entity storage (manual definitions) --

{% end debug %}\

{% if fu.SOURCE_TYPE == "header" %}\
{% if debug %}\
        // -- Entity storage (code generated definitions) --

{% end debug %}\
        // Documented in base class.
        void
        setUUID(const std::string& uuid);
{% end header %}\
{% if fu.SOURCE_TYPE == "source" %}\
      void
      OMEXMLMetadata::setUUID(const std::string& uuid)
      {
        ome::compat::shared_ptr<std::string> newString(ome::compat::make_shared<std::string>(uuid));
        root->setUUID(newString);
      }
{% end source %}\

{% for o in sorted(model.objects.values(), lambda x, y: cmp(x.name, y.name)) %}\
{% if o.name not in fu.METADATA_OBJECT_IGNORE %}\
{% if parents[o.name] is not None and not o.isAbstract %}\
{% if fu.SOURCE_TYPE == "header" %}\
{% if debug %}\
        //
        // ${o.name} property storage
        //
        // ${repr(parents[o.name])}
        // Is multi path? ${is_multi_path[o.name]}
{% end debug %}\
{% end header %}\
{% choose %}\
{% when o.isReference %}\
{% for prop in sorted(o.properties.values() + o.baseObjectProperties, lambda x, y: cmp(x.name, y.name)) %}\
{% if fu.SOURCE_TYPE == "header" %}\
{% if debug %}\
        // ${prop.minOccurs}:${prop.maxOccurs}
        // Is multi path? ${is_multi_path[o.name]}
        // Ignoring ${prop.name} property of reference ${o.name}
{% end debug %}\
{% end header %}\
{% end %}\
{% end %}\
{% otherwise %}\
\
{% for k, v in indexes[o.name].items() %}\
{% if is_abstract(k) %}\
{% for prop in sorted_properties(model.getObjectByName(k)) %}\
{% choose %}\
{% when not prop.isPrimitive and prop.isChoice %}\
{% if debug %}\
        // Ignoring ${prop.name} of parent abstract type
{% end debug %}\
{% end %}\
{% otherwise %}\
{% for parent_k, parent_v in indexes[k].items() %}\
{% if not prop.isBackReference %}\
{% if fu.SOURCE_TYPE == "header" %}\
{% if debug %}\
        // ${prop.name} accessor from parent ${k}
{% end debug %}\
{% end header %}\

{% end %}\
{% end %}\
{% end %}\
{% end %}\
{% end %}\
{% end %}\
{% end %}\
\
{% for prop in sorted(o.properties.values() + o.baseObjectProperties, lambda x, y: cmp(x.name, y.name)) %}\
{% choose %}\
{% when prop.isBackReference %}\
{% if debug %}\
        // Ignoring ${prop.name} back reference
{% end debug %}\
{% end %}\
{% when not prop.isReference and not prop.isAttribute and prop.isComplex() and (not prop.name in fu.SHAPE_OVERRIDE) %}\
{% if debug %}\
        // Ignoring ${prop.name} element, complex property
{% end debug %}\
{% end %}\
{% otherwise %}\
{% for k, v in indexes[o.name].items() %}\
${setter(k, o, prop, v)}\

{% end %}\
{% end %}\
{% end %}\
{% end %}\
{% end %}\
{% end %}\
{% end %}\
{% end %}\
{% end %}\
{% if fu.SOURCE_TYPE == "header" %}\
      };

{% end header%}\
    }
  }
}
{% if fu.SOURCE_TYPE == "header" %}\

#endif // ${fu.GUARD}

/*
 * Local Variables:
 * mode:C++
 * End:
 */
{% end header%}\
