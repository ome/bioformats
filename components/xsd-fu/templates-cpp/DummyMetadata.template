{% def indexes_string(indexes) %}${", ".join(map(lambda x: lang.index_string(x, dummy=False),indexes))}{% end %}\
{% def indexes_string_dummy(indexes) %}${", ".join(map(lambda x: lang.index_string(x, dummy=True),indexes))}{% end %}\
\
{% def indexes_name_string(indexes) %}${", ".join(map(lambda x: lang.index_argname(x),indexes))}{% end %}\
\
{% def index_name_string(name) %}\
{% choose %}\
{% when name[:2].isupper()%}${name}Index{% end %}\
{% otherwise %}${name[:1].lower()}${name[1:]}Index{% end %}\
{% end %}\
{% end %}\
\
{% def index_string(name) %}index_type ${index_name_string(name)}{% end %}\
{% def index_string_dummy(name) %}index_type{% end %}\
\
{% def counter(parent, obj, indexes) %}\
{% if fu.SOURCE_TYPE == "header" %}\
        // Documented in base class.
        index_type
        get{% if is_multi_path[o.name] %}${parent}{% end %}${obj.name}Count(${indexes_string(indexes[:-1])}) const;
{% end header %}\
{% if fu.SOURCE_TYPE == "source" %}\
      BaseMetadata::index_type
      DummyMetadata::get{% if is_multi_path[o.name] %}${parent}{% end %}${obj.name}Count(${indexes_string_dummy(indexes[:-1])}) const
      {
        throw std::runtime_error("DummyMetadata: No metadata methods implemented");
      }
{% end source %}\
{% end %}\
\
{% def getter(parent, obj, prop, indexes) %}\
{% choose %}\
{% when len(indexes) > 0 and prop.maxOccurs > 1 %}\
{% if fu.SOURCE_TYPE == "header" %}\
        // Documented in base class.
        ${prop.metadataStoreRetType}
        get{% if is_multi_path[o.name] %}${parent}{% end %}${obj.name}${prop.name}(${indexes_string(indexes)}, ${index_string(prop.name)}) const;
{% end header %}\
{% if fu.SOURCE_TYPE == "source" %}\
      ${prop.metadataStoreRetType}
      DummyMetadata::get{% if is_multi_path[o.name] %}${parent}{% end %}${obj.name}${prop.name}(${indexes_string_dummy(indexes)}, ${index_string_dummy(prop.name)}) const
{% end source %}\
{% end %}\
{% when len(indexes) > 0 %}\
{% if fu.SOURCE_TYPE == "header" %}\
        // Documented in base class.
        ${prop.metadataStoreRetType}
        get{% if is_multi_path[o.name] %}${parent}{% end %}${obj.name}${prop.name}(${indexes_string(indexes)}) const;
{% end header %}\
{% if fu.SOURCE_TYPE == "source" %}\
      ${prop.metadataStoreRetType}
      DummyMetadata::get{% if is_multi_path[o.name] %}${parent}{% end %}${obj.name}${prop.name}(${indexes_string_dummy(indexes)}) const
{% end source %}\
{% end %}\
{% otherwise %}\
{% if fu.SOURCE_TYPE == "header" %}\
        // Documented in base class.
        ${prop.metadataStoreRetType}
        get{% if is_multi_path[o.name] %}${parent}{% end %}${obj.name}${prop.name}() const;
{% end header %}\
{% if fu.SOURCE_TYPE == "source" %}\
      ${prop.metadataStoreRetType}
      DummyMetadata::get{% if is_multi_path[o.name] %}${parent}{% end %}${obj.name}${prop.name}() const
{% end source %}\
{% end %}\
{% end %}\
{% if fu.SOURCE_TYPE == "source" %}\
      {
        throw std::runtime_error("DummyMetadata: No metadata methods implemented");
      }
{% end source %}\
{% end %}\
\
{% def setter(parent, obj, prop, indexes) %}\
{% choose %}\
{% when len(indexes) > 0 and prop.maxOccurs > 1 %}\
{% if fu.SOURCE_TYPE == "header" %}\
        // Documented in base class.
        void
        set{% if is_multi_path[o.name] %}${parent}{% end %}${obj.name}${prop.name}(${prop.metadataStoreArgType} ${prop.argumentName}, ${indexes_string(indexes)}, ${index_string(prop.name)});
{% end header %}\
{% if fu.SOURCE_TYPE == "source" %}\
      void
      DummyMetadata::set{% if is_multi_path[o.name] %}${parent}{% end %}${obj.name}${prop.name}(${prop.metadataStoreArgType}, ${indexes_string_dummy(indexes)}, ${index_string_dummy(prop.name)})
{% end source %}\
{% end %}\
{% when len(indexes) > 0 %}\
{% if fu.SOURCE_TYPE == "header" %}\
        // Documented in base class.
        void
        set{% if is_multi_path[o.name] %}${parent}{% end %}${obj.name}${prop.name}(${prop.metadataStoreArgType} ${prop.argumentName}, ${indexes_string(indexes)});
{% end header %}\
{% if fu.SOURCE_TYPE == "source" %}\
      void
      DummyMetadata::set{% if is_multi_path[o.name] %}${parent}{% end %}${obj.name}${prop.name}(${prop.metadataStoreArgType}, ${indexes_string_dummy(indexes)})
{% end source %}\
{% end %}\
{% otherwise %}\
{% if fu.SOURCE_TYPE == "header" %}\
        // Documented in base class.
        void
        set{% if is_multi_path[o.name] %}${parent}{% end %}${obj.name}${prop.name}(${prop.metadataStoreArgType} ${prop.argumentName});
{% end header %}\
{% if fu.SOURCE_TYPE == "source" %}\
      void
      DummyMetadata::set{% if is_multi_path[o.name] %}${parent}{% end %}${obj.name}${prop.name}(${prop.metadataStoreArgType} /* ${prop.argumentName} */)
{% end source %}\
{% end %}\
{% end %}\
{% if fu.SOURCE_TYPE == "source" %}\
      {
      }
{% end source %}\
{% end %}\
\
{% python
        def is_abstract(name):
                o = model.getObjectByName(name)
                if o is not None and \
                   (o.isAbstract or o.isAbstractProprietary):
                        return True
                return False

        def sorted_properties(o):
                return sorted(o.properties.values() + o.baseObjectProperties, lambda x, y: cmp(x.name, y.name))

        def accessor_string(name, max_occurs, level):
                """Makes a Java method accessor string from an index name."""
                return accessor_string_complex(name, max_occurs, level)['accessor']

        def accessor_string_complex(name, max_occurs, level):
                """Makes a Java method accessor string from an index name."""
                to_return = {'level': level, 'name': name, 'max_occurs': max_occurs}
                if max_occurs == 1:
                        to_return['accessor'] = "get%s()" % (name)
                        return to_return
                if name[:2].isupper():
                        to_return['accessor'] = "get%s(%sIndex)" % (name, name)
                        return to_return
                to_return['accessor'] = "get%s(%s%sIndex)" % (name, name[:1].lower(), name[1:])
                return to_return

        def accessor(name, parent, prop, func=accessor_string):
                results = dict()
                fu.resolve_hierarchy(results, model, {name: parents[name]}, func, min_occurs=1)
                if parent not in results.keys():
                        raise Exception("Invalid KEY No accessor for: name:%s parent:%s prop:%s === %s" % (name, parent, prop, results))
                if len(results.keys()) == 0:
                        raise Exception("Zero KEYS No accessor for: name:%s parent:%s prop:%s === %s" % (name, parent, prop, results))
                return results[parent]
%}\
\
\
/*
 * #%L
 * OME-BIOFORMATS C++ library for image IO.
 * %%
 * Copyright © 2006 - 2014 Open Microscopy Environment:
 *   - Massachusetts Institute of Technology
 *   - National Institutes of Health
 *   - University of Dundee
 *   - Board of Regents of the University of Wisconsin-Madison
 *   - Glencoe Software, Inc.
 * %%
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice,
 *    this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDERS OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 *
 * The views and conclusions contained in the software and documentation are
 * those of the authors and should not be interpreted as representing official
 * policies, either expressed or implied, of any organization.
 * #L%
 */

/*─────────────────────────────────────────────────────────────────────────────
 *
 * THIS IS AUTOMATICALLY GENERATED CODE.  DO NOT MODIFY.
 *
 *─────────────────────────────────────────────────────────────────────────────
 */

{% if fu.SOURCE_TYPE == "header" %}\
#ifndef ${fu.GUARD}
#define ${fu.GUARD}

#include <ome/xml/meta/Metadata.h>
{% end header%}\
{% if fu.SOURCE_TYPE == "source" %}\
#include <ome/xml/meta/DummyMetadata.h>
{% end source%}\

namespace ome
{
  namespace xml
  {
    namespace meta
    {

{% if fu.SOURCE_TYPE == "header" %}\
      /**
       * Dummy metadata store.
       *
       * A dummy implementation of MetadataStore and MetadataRetrieve,
       * which may be used when no other metadata implementations are
       * available.  All set methods are no-ops with no side-effects.
       * All get methods will throw an exception, since no valid data
       * exists to return.
       */
      class DummyMetadata : virtual public Metadata
      {
      public:
{% end header %}\
{% if fu.SOURCE_TYPE == "header" %}\
        /// Constructor.
        DummyMetadata();
{% end header %}\
{% if fu.SOURCE_TYPE == "source" %}\
      DummyMetadata::DummyMetadata():
        Metadata()
      {
      }
{% end source %}\

{% if fu.SOURCE_TYPE == "header" %}\
        /// Destructor.
        virtual
        ~DummyMetadata();
{% end header %}\
{% if fu.SOURCE_TYPE == "source" %}\
      DummyMetadata::~DummyMetadata()
      {
      }
{% end source %}\

{% if fu.SOURCE_TYPE == "header" %}\
        // Documented in base class.
        void
        createRoot();
{% end header %}\
{% if fu.SOURCE_TYPE == "source" %}\
      void
      DummyMetadata::createRoot()
      {
      }
{% end source %}\

{% if fu.SOURCE_TYPE == "header" %}\
        // Documented in base class.
        std::shared_ptr<MetadataRoot>&
        getRoot();
{% end header %}\
{% if fu.SOURCE_TYPE == "source" %}\
      std::shared_ptr<MetadataRoot>&
      DummyMetadata::getRoot()
      {
        throw std::runtime_error("DummyMetadata: No metadata methods implemented");
      }
{% end source %}\

{% if fu.SOURCE_TYPE == "header" %}\
        // Documented in base class.
        void
        setRoot(std::shared_ptr<MetadataRoot>& root);
{% end header %}\
{% if fu.SOURCE_TYPE == "source" %}\
      void
      DummyMetadata::setRoot(std::shared_ptr<MetadataRoot>& /* root */)
      {
      }
{% end source %}\

{% if debug %}\
        // -- Entity counting (manual definitions) --

{% end debug %}\
{% if fu.SOURCE_TYPE == "header" %}\
        // Documented in base class.
        index_type
        getPixelsBinDataCount(index_type imageIndex) const;
{% end header %}\
{% if fu.SOURCE_TYPE == "source" %}\
      BaseMetadata::index_type
      DummyMetadata::getPixelsBinDataCount(index_type /* imageIndex */) const
      {
        throw std::runtime_error("DummyMetadata: No metadata methods implemented");
      }
{% end source %}\

{% if fu.SOURCE_TYPE == "header" %}\
        // Documented in base class.
        index_type
        getBooleanAnnotationAnnotationCount(index_type booleanAnnotationIndex) const;
{% end header %}\
{% if fu.SOURCE_TYPE == "source" %}\
      BaseMetadata::index_type
      DummyMetadata::getBooleanAnnotationAnnotationCount(index_type /* booleanAnnotationIndex */) const
      {
        throw std::runtime_error("DummyMetadata: No metadata methods implemented");
      }
{% end source %}\

{% if fu.SOURCE_TYPE == "header" %}\
        // Documented in base class.
        index_type
        getCommentAnnotationAnnotationCount(index_type commentAnnotationIndex) const;
{% end header %}\
{% if fu.SOURCE_TYPE == "source" %}\
      BaseMetadata::index_type
      DummyMetadata::getCommentAnnotationAnnotationCount(index_type /* commentAnnotationIndex */) const
      {
        throw std::runtime_error("DummyMetadata: No metadata methods implemented");
      }
{% end source %}\

{% if fu.SOURCE_TYPE == "header" %}\
        // Documented in base class.
        index_type
        getDoubleAnnotationAnnotationCount(index_type doubleAnnotationIndex) const;
{% end header %}\
{% if fu.SOURCE_TYPE == "source" %}\
      BaseMetadata::index_type
      DummyMetadata::getDoubleAnnotationAnnotationCount(index_type /* doubleAnnotationIndex */) const
      {
        throw std::runtime_error("DummyMetadata: No metadata methods implemented");
      }
{% end source %}\

{% if fu.SOURCE_TYPE == "header" %}\
        // Documented in base class.
        index_type
        getFileAnnotationAnnotationCount(index_type fileAnnotationIndex) const;
{% end header %}\
{% if fu.SOURCE_TYPE == "source" %}\
      BaseMetadata::index_type
      DummyMetadata::getFileAnnotationAnnotationCount(index_type /* fileAnnotationIndex */) const
      {
        throw std::runtime_error("DummyMetadata: No metadata methods implemented");
      }
{% end source %}\

{% if fu.SOURCE_TYPE == "header" %}\
        // Documented in base class.
        index_type
        getListAnnotationAnnotationCount(index_type listAnnotationIndex) const;
{% end header %}\
{% if fu.SOURCE_TYPE == "source" %}\
      BaseMetadata::index_type
      DummyMetadata::getListAnnotationAnnotationCount(index_type /* listAnnotationIndex */) const
      {
        throw std::runtime_error("DummyMetadata: No metadata methods implemented");
      }
{% end source %}\

{% if fu.SOURCE_TYPE == "header" %}\
        // Documented in base class.
        index_type
        getLongAnnotationAnnotationCount(index_type longAnnotationIndex) const;
{% end header %}\
{% if fu.SOURCE_TYPE == "source" %}\
      BaseMetadata::index_type
      DummyMetadata::getLongAnnotationAnnotationCount(index_type /* longAnnotationIndex */) const
      {
        throw std::runtime_error("DummyMetadata: No metadata methods implemented");
      }
{% end source %}\

{% if fu.SOURCE_TYPE == "header" %}\
        // Documented in base class.
        index_type
        getMapAnnotationAnnotationCount(index_type mapAnnotationIndex) const;
{% end header %}\
{% if fu.SOURCE_TYPE == "source" %}\
      BaseMetadata::index_type
      DummyMetadata::getMapAnnotationAnnotationCount(index_type /* mapAnnotationIndex */) const
      {
        throw std::runtime_error("DummyMetadata: No metadata methods implemented");
      }
{% end source %}\

{% if fu.SOURCE_TYPE == "header" %}\
        // Documented in base class.
        index_type
        getTagAnnotationAnnotationCount(index_type tagAnnotationIndex) const;
{% end header %}\
{% if fu.SOURCE_TYPE == "source" %}\
      BaseMetadata::index_type
      DummyMetadata::getTagAnnotationAnnotationCount(index_type /* tagAnnotationIndex */) const
      {
        throw std::runtime_error("DummyMetadata: No metadata methods implemented");
      }
{% end source %}\

{% if fu.SOURCE_TYPE == "header" %}\
        // Documented in base class.
        index_type
        getTermAnnotationAnnotationCount(index_type termAnnotationIndex) const;
{% end header %}\
{% if fu.SOURCE_TYPE == "source" %}\
      BaseMetadata::index_type
      DummyMetadata::getTermAnnotationAnnotationCount(index_type /* termAnnotationIndex */) const
      {
        throw std::runtime_error("DummyMetadata: No metadata methods implemented");
      }
{% end source %}\

{% if fu.SOURCE_TYPE == "header" %}\
        // Documented in base class.
        index_type
        getTimestampAnnotationAnnotationCount(index_type timestampAnnotationIndex) const;
{% end header %}\
{% if fu.SOURCE_TYPE == "source" %}\
      BaseMetadata::index_type
      DummyMetadata::getTimestampAnnotationAnnotationCount(index_type /* timestampAnnotationIndex */) const
      {
        throw std::runtime_error("DummyMetadata: No metadata methods implemented");
      }
{% end source %}\

{% if fu.SOURCE_TYPE == "header" %}\
        // Documented in base class.
        index_type
        getXMLAnnotationAnnotationCount(index_type xmlAnnotationIndex) const;
{% end header %}\
{% if fu.SOURCE_TYPE == "source" %}\
      BaseMetadata::index_type
      DummyMetadata::getXMLAnnotationAnnotationCount(index_type /* xmlAnnotationIndex */) const
      {
        throw std::runtime_error("DummyMetadata: No metadata methods implemented");
      }
{% end source %}\

{% if fu.SOURCE_TYPE == "header" %}\
        // Documented in base class.
        const std::string&
        getLightSourceType(index_type instrumentIndex,
                           index_type lightSourceIndex) const;
{% end header %}\
{% if fu.SOURCE_TYPE == "source" %}\
      const std::string&
      DummyMetadata::getLightSourceType(index_type /* instrumentIndex */,
                                        index_type /* lightSourceIndex */) const
      {
        throw std::runtime_error("DummyMetadata: No metadata methods implemented");
      }
{% end source %}\

{% if fu.SOURCE_TYPE == "header" %}\
        // Documented in base class.
        const std::string&
        getShapeType(index_type roiIndex,
                     index_type shapeIndex) const;
{% end header %}\
{% if fu.SOURCE_TYPE == "source" %}\
      const std::string&
      DummyMetadata::getShapeType(index_type /* roiIndex */,
                                  index_type /* shapeIndex */) const
      {
        throw std::runtime_error("DummyMetadata: No metadata methods implemented");
      }
{% end source %}\

{% if debug %}\
        // -- Entity counting (code generated definitions) --

{% end debug %}\
{% for o in sorted(model.objects.values(), lambda x, y: cmp(x.name, y.name)) %}\
{% if o.name not in fu.METADATA_OBJECT_IGNORE %}\
{% if o.langBaseType is not None %}\
{% if fu.SOURCE_TYPE == "header" %}\
{% if debug %}\
        // Element's text data
        // ${repr(indexes[o.name])}
{% end debug %}\
        // Documented in base class.
        void
        set${o.name}Value(${o.langBaseType} value, ${indexes_string(indexes[o.name].items()[0][1])});
{% end header %}\
{% if fu.SOURCE_TYPE == "source" %}\
      void
      DummyMetadata::set${o.name}Value(${o.langBaseType}, ${indexes_string_dummy(indexes[o.name].items()[0][1])})
      {
      }
{% end source %}\

{% if fu.SOURCE_TYPE == "header" %}\
        // Documented in base class.
        ${o.langBaseType}
        get${o.name}Value(${indexes_string(indexes[o.name].items()[0][1])}) const;
{% end header %}\
{% if fu.SOURCE_TYPE == "source" %}\
      ${o.langBaseType}
      DummyMetadata::get${o.name}Value(${indexes_string_dummy(indexes[o.name].items()[0][1])}) const
      {
        throw std::runtime_error("DummyMetadata: No metadata methods implemented");
      }
{% end source %}\

{% end %}\
{% if parents[o.name] is not None and not o.isAbstract %}\
{% if debug %}\
        // ${o.name} entity counting
{% end debug %}\
{% for k, v in indexes[o.name].items() %}\
{% if fu.max_occurs_under_parent(model, k, o.name) > 1 and (k not in fu.METADATA_COUNT_IGNORE or o.type not in fu.METADATA_COUNT_IGNORE[k]) %}\
${counter(k, o, v)}\

{% end %}\
{% end %}\
{% end %}\
{% end %}\
{% end %}\

{% if debug %}\
        // -- Entity retrieval (manual definitions) --

{% end debug %}\
{% if fu.SOURCE_TYPE == "header" %}\
        // Documented in base class.
        bool
        getPixelsBinDataBigEndian(index_type imageIndex,
                                  index_type binDataIndex) const;
{% end header %}\
{% if fu.SOURCE_TYPE == "source" %}\
      bool
      DummyMetadata::getPixelsBinDataBigEndian(index_type /* imageIndex */,
                                               index_type /* binDataIndex */) const
      {
        throw std::runtime_error("DummyMetadata: No metadata methods implemented");
      }
{% end source %}\

{% if fu.SOURCE_TYPE == "header" %}\
        // Documented in base class.
        const ::${lang.omexml_model_package}::MapPairs::map_type&
        getMapAnnotationValue(index_type mapAnnotationIndex) const;
{% end header %}\
{% if fu.SOURCE_TYPE == "source" %}\
      const ::${lang.omexml_model_package}::MapPairs::map_type&
      DummyMetadata::getMapAnnotationValue(index_type /* mapAnnotationIndex */) const
      {
        throw std::runtime_error("DummyMetadata: No metadata methods implemented");
      }
{% end source %}\

{% if fu.SOURCE_TYPE == "header" %}\
        // Documented in base class.
        const ::${lang.omexml_model_package}::MapPairs::map_type&
        getGenericExcitationSourceMap(index_type instrumentIndex,
                                      index_type lightSourceIndex) const;
{% end header %}\
{% if fu.SOURCE_TYPE == "source" %}\
      const ::${lang.omexml_model_package}::MapPairs::map_type&
      DummyMetadata::getGenericExcitationSourceMap(index_type /* instrumentIndex */,
                                                   index_type /* lightSourceIndex */) const
      {
        throw std::runtime_error("DummyMetadata: No metadata methods implemented");
      }
{% end source %}\

{% if fu.SOURCE_TYPE == "header" %}\
        // Documented in base class.
        const ::${lang.omexml_model_package}::MapPairs::map_type&
        getImagingEnvironmentMap(index_type imageIndex) const;
{% end header %}\
{% if fu.SOURCE_TYPE == "source" %}\
      const ::${lang.omexml_model_package}::MapPairs::map_type&
      DummyMetadata::getImagingEnvironmentMap(index_type /* imageIndex */) const
      {
        throw std::runtime_error("DummyMetadata: No metadata methods implemented");
      }
{% end source %}\

{% if debug %}\
        // -- Entity retrieval (code generated definitions) --

{% end debug %}\
{% if fu.SOURCE_TYPE == "header" %}\
        // Documented in base class.
        const std::string&
        getUUID() const;
{% end header %}\
{% if fu.SOURCE_TYPE == "source" %}\
      const std::string&
      DummyMetadata::getUUID() const
      {
        throw std::runtime_error("DummyMetadata: No metadata methods implemented");
      }
{% end source %}\

{% for o in sorted(model.objects.values(), lambda x, y: cmp(x.name, y.name)) %}\
{% if o.name not in fu.METADATA_OBJECT_IGNORE %}\
{% if parents[o.name] is not None and not o.isAbstract and not o.isAbstractProprietary %}\
{% if debug %}\
        //
        // ${o.name} property storage
        //
        // Indexes: ${repr(indexes[o.name])}
        // ${repr(parents[o.name])}
        // Is multi path? ${is_multi_path[o.name]}

{% end debug %}\
{% choose %}\
{% when o.isReference %}\
{% for prop in sorted(o.properties.values() + o.baseObjectProperties, lambda x, y: cmp(x.name, y.name)) %}\
{% if debug %}\
        // ${prop.minOccurs}:${prop.maxOccurs}
        // Is multi path? ${is_multi_path[o.name]}
        // Ignoring ${prop.name} property of reference ${o.name}

{% end debug %}\
{% end %}\
{% end %}\
{% otherwise %}\
\
{% for k, v in indexes[o.name].items() %}\
{% if is_abstract(k) %}\
{% for prop in sorted_properties(model.getObjectByName(k)) %}\
{% choose %}\
{% when not prop.isPrimitive and prop.isChoice %}\
{% if debug %}\
        // Ignoring ${prop.name} of parent abstract type
{% end debug %}\
{% end %}\
{% otherwise %}\
{% for parent_k, parent_v in indexes[k].items() %}\
{% if not prop.isBackReference %}\
{% if debug %}\
        // ${prop.name} accessor from parent ${k}
{% end debug %}\
${getter(k, o, prop, v)}\

{% end %}\
{% end %}\
{% end %}\
{% end %}\
{% end %}\
{% end %}\
{% end %}\
\
{% for prop in sorted(o.properties.values() + o.baseObjectProperties, lambda x, y: cmp(x.name, y.name)) %}\
{% choose %}\
{% when prop.isBackReference %}\
{% if debug %}\
        // Ignoring ${prop.name} back reference
{% end debug %}\
{% end %}\
{% when not prop.isReference and not prop.isAttribute and prop.isComplex() %}\
{% if debug %}\
        // Ignoring ${prop.name} element, complex property
{% end debug %}\
{% end %}\
{% otherwise %}\
{% for k, v in indexes[o.name].items() %}\
${getter(k, o, prop, v)}\

{% end %}\
{% end %}\
{% end %}\
{% end %}\
{% end %}\
{% end %}\
{% end %}\
{% end %}\
{% end %}\

{% if debug %}\
        // -- Entity storage (manual definitions) --

{% end debug %}\
{% if fu.SOURCE_TYPE == "header" %}\
        // Documented in base class.
        void
        setPixelsBinDataBigEndian(bool       bigEndian,
                                  index_type imageIndex,
                                  index_type binDataIndex);
{% end header %}\
{% if fu.SOURCE_TYPE == "source" %}\
      void
      DummyMetadata::setPixelsBinDataBigEndian(bool       /* bigEndian */,
                                               index_type /* imageIndex */,
                                               index_type /* binDataIndex */)
      {
      }
{% end source %}\

{% if fu.SOURCE_TYPE == "header" %}\
        // Documented in base class.
        void
        setMapAnnotationValue(const ::${lang.omexml_model_package}::MapPairs::map_type& map,
                              index_type mapAnnotationIndex);
{% end header %}\
{% if fu.SOURCE_TYPE == "source" %}\
      void
      DummyMetadata::setMapAnnotationValue(const ::${lang.omexml_model_package}::MapPairs::map_type& /* map */,
                                           index_type /* mapAnnotationIndex */)
      {
      }
{% end source %}\

{% if fu.SOURCE_TYPE == "header" %}\
        // Documented in base class.
        void
        setGenericExcitationSourceMap(const ::${lang.omexml_model_package}::MapPairs::map_type& map,
                                      index_type instrumentIndex,
                                      index_type lightSourceIndex);
{% end header %}\
{% if fu.SOURCE_TYPE == "source" %}\
      void
      DummyMetadata::setGenericExcitationSourceMap(const ::${lang.omexml_model_package}::MapPairs::map_type& /* map */,
                                                   index_type /* instrumentIndex */,
                                                   index_type /* lightSourceIndex */)
      {
      }
{% end source %}\

{% if fu.SOURCE_TYPE == "header" %}\
        // Documented in base class.
        void
        setImagingEnvironmentMap(const ::${lang.omexml_model_package}::MapPairs::map_type& map,
                                 index_type imageIndex);
{% end header %}\
{% if fu.SOURCE_TYPE == "source" %}\
      void
      DummyMetadata::setImagingEnvironmentMap(const ::${lang.omexml_model_package}::MapPairs::map_type& /* map */,
                                              index_type /* imageIndex */)
      {
      }
{% end source %}\

{% if debug %}\
        // -- Entity storage (code generated definitions) --

{% end debug %}\
{% if fu.SOURCE_TYPE == "header" %}\
        // Documented in base class.
        void
        setUUID(const std::string& uuid);
{% end header %}\
{% if fu.SOURCE_TYPE == "source" %}\
      void
      DummyMetadata::setUUID(const std::string& /* uuid */)
      {
      }
{% end source %}\

{% for o in sorted(model.objects.values(), lambda x, y: cmp(x.name, y.name)) %}\
{% if o.name not in fu.METADATA_OBJECT_IGNORE %}\
{% if parents[o.name] is not None and not o.isAbstract and not o.isAbstractProprietary %}\
{% if debug %}\
        //
        // ${o.name} property storage
        //
        // ${repr(parents[o.name])}
        // Is multi path? ${is_multi_path[o.name]}

{% end debug %}\
{% choose %}\
{% when o.isReference %}\
{% for prop in sorted(o.properties.values() + o.baseObjectProperties, lambda x, y: cmp(x.name, y.name)) %}\
{% if debug %}\
        // ${prop.minOccurs}:${prop.maxOccurs}
        // Is multi path? ${is_multi_path[o.name]}
        // Ignoring ${prop.name} property of reference ${o.name}

{% end debug %}\
{% end %}\
{% end %}\
{% otherwise %}\
\
{% for k, v in indexes[o.name].items() %}\
{% if is_abstract(k) %}\
{% for prop in sorted_properties(model.getObjectByName(k)) %}\
{% choose %}\
{% when not prop.isPrimitive and prop.isChoice %}\
{% if debug %}\
        // Ignoring ${prop.name} of parent abstract type
{% end debug %}\
{% end %}\
{% otherwise %}\
{% for parent_k, parent_v in indexes[k].items() %}\
{% if not prop.isBackReference %}\
{% if debug %}\
        // ${prop.name} accessor from parent ${k}
{% end debug %}\
${setter(k, o, prop, v)}\

{% end %}\
{% end %}\
{% end %}\
{% end %}\
{% end %}\
{% end %}\
{% end %}\
\
{% for prop in sorted(o.properties.values() + o.baseObjectProperties, lambda x, y: cmp(x.name, y.name)) %}\
{% choose %}\
{% when prop.isBackReference %}\
{% if debug %}\
        // Ignoring ${prop.name} back reference
{% end debug %}\
{% end %}\
{% when not prop.isReference and not prop.isAttribute and prop.isComplex() %}\
{% if debug %}\
        // Ignoring ${prop.name} element, complex property
{% end debug %}\
{% end %}\
{% otherwise %}\
{% for k, v in indexes[o.name].items() %}\
${setter(k, o, prop, v)}\

{% end %}\
{% end %}\
{% end %}\
{% end %}\
{% end %}\
{% end %}\
{% end %}\
{% end %}\
{% end %}\
{% if fu.SOURCE_TYPE == "header" %}\
      };

{% end header%}\
    }
  }
}
{% if fu.SOURCE_TYPE == "header" %}\

#endif // ${fu.GUARD}

/*
 * Local Variables:
 * mode:C++
 * End:
 */
{% end header%}\
