<?xml version = "1.0" encoding = "UTF-8"?>
<!--
    #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    #
    # Copyright (C) 2002-2011 Open Microscopy Environment
    #       Massachusetts Institute of Technology,
    #       National Institutes of Health,
    #       University of Dundee,
    #       University of Wisconsin at Madison
    #
    # This work is licensed under the
    #       Creative Commons Attribution 3.0 Unported License.
    # To view a copy of this license, visit
    #       http://creativecommons.org/licenses/by/3.0/
    # or send a letter to
    #       Creative Commons, 444 Castro Street, Suite 900,
    #       Mountain View, California, 94041, USA.
    # For attribution instructions, visit
    #       http://www.openmicroscopy.org/info/attribution
    #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
-->
<!--
    #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    # Written by: William Moore
    #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
-->

<xsd:schema xmlns="http://www.openmicroscopy.org/Schemas/Editor/2008-04"
        targetNamespace="http://www.openmicroscopy.org/Schemas/Editor/2008-04"
        xmlns:xsd="http://www.w3.org/2001/XMLSchema"
        version="1"
        elementFormDefault="qualified">

    <xsd:annotation>
        <xsd:documentation>
            Open Microscopy Environment
            Protocol Editor Schema April 2008 - Version 1
            Author:  William Moore
            Copyright (C) 2002-2011 Open Microscopy Environment
            See http://users.openmicroscopy.org.uk/~will/
            for user guides etc.
            The structure permitted for elements in the Protocol Editor xml is highly flexible, allowing users to define structured annotations from these elements in any way they choose.
        </xsd:documentation>
    </xsd:annotation>

	<xsd:element name="ProtocolTitle">
		<xsd:annotation>
			<xsd:documentation>
				This is the root element of any OMERO.editor file.
				It may also exist elsewhere in the document, if a user has imported another protocol.
				It cannot be created within a document, other than by importing or copy/paste from elsewhere.
			</xsd:documentation>
		</xsd:annotation>

		<xsd:complexType>
		<xsd:complexContent>
    		<xsd:extension base="baseElement">
    			<xsd:attribute name="keywords" type="xsd:string">
    				<xsd:annotation>
						<xsd:documentation>
							A comma-delimited set of key-words. May help searching. Not utilised currently.
						</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>

				<xsd:attribute name="version" type="xsd:string">
    				<xsd:annotation>
						<xsd:documentation>
							This is the version of OMERO.editor that created this file.
							Prior to OMERO 3.0-Beta-3.0, all documents have been assigned "version=1.0".
	 						The version number will contain both the milestone eg "3.0" and the version, eg "3.1.2"
	 						separated by a dash. So, 3.0-Beta-3.0 will be "3.0-3.0"
						</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>

				<xsd:attribute name="protocolFileName" type="xsd:string">
    				<xsd:annotation>
						<xsd:documentation>
							This is the name of the XML file that this element is the root node of.
							This attribute is updated when the file is saved.
						</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>

				<xsd:attribute name="protocolHasExpChildren" type="xsd:boolean">
    				<xsd:annotation>
						<xsd:documentation>
							DECREMENTED!
							This was previously a flag, to indicate that a "template" had other files that referenced it, so it shouldn't be edited.
						</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>

			</xsd:extension>
		</xsd:complexContent>
		</xsd:complexType>

	</xsd:element>


	<xsd:element name="FixedStep">
		<xsd:annotation>
			<xsd:documentation>
				This is the default field / step of a protocol. It is the only field that does not have an experimental variable.
				Can be used simply for detailing not-variant parts of a protocol, or as a heading etc.
			</xsd:documentation>
		</xsd:annotation>

		<xsd:complexType>
		<xsd:complexContent>
    		<xsd:extension base="baseElement">

			</xsd:extension>
		</xsd:complexContent>
		</xsd:complexType>
	</xsd:element>


	<xsd:element name="TextField">
		<xsd:annotation>
			<xsd:documentation>
				This is a simple text field.
				Can be used to record a single line of text, stored in the value attribute.
				Can also store a default value in the default attribute.
			</xsd:documentation>
		</xsd:annotation>

		<xsd:complexType>
		<xsd:complexContent>
    		<xsd:extension base="baseElement">
				<xsd:attribute name="value" type="xsd:string" />
				<xsd:attribute name="default" type="xsd:string" />
			</xsd:extension>
		</xsd:complexContent>
		</xsd:complexType>
	</xsd:element>


	<xsd:element name="TextBox">
		<xsd:annotation>
			<xsd:documentation>
				This field is used to store a paragraph of text, and a default text can also be specified.
			</xsd:documentation>
		</xsd:annotation>

		<xsd:complexType>
		<xsd:complexContent>
    		<xsd:extension base="baseElement">
				<xsd:attribute name="value" type="xsd:string" />
				<xsd:attribute name="default" type="xsd:string" />
			</xsd:extension>
		</xsd:complexContent>
		</xsd:complexType>
	</xsd:element>


	<xsd:element name="NumberField">
		<xsd:annotation>
			<xsd:documentation>
				This field is used to store a number (decimal). A default number can be specified.
				A string attribute stores the units.
			</xsd:documentation>
		</xsd:annotation>

		<xsd:complexType>
		<xsd:complexContent>
    		<xsd:extension base="baseElement">
				<xsd:attribute name="value" type="xsd:decimal" />
				<xsd:attribute name="default" type="xsd:decimal" />
				<xsd:attribute name="units" type="xsd:string" />
			</xsd:extension>
		</xsd:complexContent>
		</xsd:complexType>
	</xsd:element>


	<xsd:element name="DropDownMenu">
		<xsd:annotation>
			<xsd:documentation>
				This field is used to specify a number of text values, which can be chosen by the use of a drop-down selection.
				The options are stored as a comma-delimited list in the dropDownOptions attribute.
				The chosen option is stored in the value attribute, and a default can also be chosen.
				Both the value and the default text must exist in the list of dropDownOptions.
			</xsd:documentation>
		</xsd:annotation>

		<xsd:complexType>
		<xsd:complexContent>
    		<xsd:extension base="baseElement">
				<xsd:attribute name="value" type="xsd:string" />
				<xsd:attribute name="dropdownOptions" type="xsd:string" />
				<xsd:attribute name="default" type="xsd:string" />
			</xsd:extension>
		</xsd:complexContent>
		</xsd:complexType>
	</xsd:element>


	<xsd:element name="DateField">
		<xsd:annotation>
			<xsd:documentation>
				This field is DEPRECATED. However, future versions of the software should be able to read this field.
				It is now replaced with DateTimeField.
				DateField stores value as a string in the format "Feb 20, 2008".
				The default (in the same format) is refreshed when this file is opened, to be the current date.
			</xsd:documentation>
		</xsd:annotation>

		<xsd:complexType>
		<xsd:complexContent>
    		<xsd:extension base="baseElement">
				<xsd:attribute name="value" type="xsd:string" />
				<xsd:attribute name="default" type="xsd:string" />
			</xsd:extension>
		</xsd:complexContent>
		</xsd:complexType>
	</xsd:element>


		<xsd:element name="DateTimeField">
		<xsd:annotation>
			<xsd:documentation>
				This field allows users to pick a date,
				either as an absolute date (eg 20th March 2008) or as a relative date (eg 2 days later).
				It saves the Date to dataField using the UTCMillisecs attribute.
				This will either be the UTCmillisecond value of an absolute date,
				or the relative date in milliseconds.
				eg 2 days would be stored as 2 * 24 * 60 * 60 * 1000 milliseconds

				In addition, a time is saved separately if chosen by the user.
				eg 13:20, saved as an integer (as seconds) in the seconds attribute.
				Otherwise, this is simply a date field with no time.
			</xsd:documentation>
		</xsd:annotation>

		<xsd:complexType>
		<xsd:complexContent>
    		<xsd:extension base="baseElement">
				<xsd:attribute name="UTCMillisecs" type="xsd:integer" />
				<xsd:attribute name="seconds" type="xsd:integer" />
			</xsd:extension>
		</xsd:complexContent>
		</xsd:complexType>
	</xsd:element>


	<xsd:element name="CheckBoxField">
		<xsd:annotation>
			<xsd:documentation>
				This field is a simple CheckBox, with value (and default) as booleans.
			</xsd:documentation>
		</xsd:annotation>

		<xsd:complexType>
		<xsd:complexContent>
    		<xsd:extension base="baseElement">
				<xsd:attribute name="value" type="xsd:boolean" />
				<xsd:attribute name="default" type="xsd:boolean" />
			</xsd:extension>
		</xsd:complexContent>
		</xsd:complexType>
	</xsd:element>


	<xsd:element name="TimeField">
		<xsd:annotation>
			<xsd:documentation>
				This field is used to specify a time duration.
				The value of this field was originally stored in the value (and default) fields as a string, in the format "hh:mm:ss"
				However, as of Beta-3.0, it is stored as an integer in the seconds attribute.
				The default will also be defined in seconds as of Beta-3.0, even though the default only requires a string.
				Therefore, the default attribute could contain a string like "hh:mm:ss" or an integer (seconds).
			</xsd:documentation>
		</xsd:annotation>

		<xsd:complexType>
		<xsd:complexContent>
    		<xsd:extension base="baseElement">
    			<xsd:attribute name="seconds" type="xsd:integer" />
				<xsd:attribute name="value" type="xsd:string" />
				<xsd:attribute name="default" type="xsd:string" />
			</xsd:extension>
		</xsd:complexContent>
		</xsd:complexType>
	</xsd:element>


	<xsd:element name="TableField">
		<xsd:annotation>
			<xsd:documentation>
				This field can be used to contain a table of values.
				It is not intended to be a spread-sheet, but provides users with a way of storing some data in table form.
				The column names are stored in a comma-delimited list in the tableColumnNames attribute.
				The number of rows is an integer in tableRowCount attribute.
				The table data is stored in an attribute for each row, with the data for each cell separated by commas.
				eg rowNumber0 contains the first row of data, etc.
			</xsd:documentation>
		</xsd:annotation>

		<xsd:complexType>
		<xsd:complexContent>
    		<xsd:extension base="baseElement">
				<xsd:attribute name="tableColumnNames" type="xsd:string" />
				<xsd:attribute name="tableRowCount" type="xsd:integer" />
				<xsd:attribute name="rowNumber0" type="xsd:string" />
				<xsd:attribute name="rowNumber1" type="xsd:string" />
				<xsd:anyAttribute/>
			</xsd:extension>
		</xsd:complexContent>
		</xsd:complexType>
	</xsd:element>


	<xsd:element name="ImageField">
		<xsd:annotation>
			<xsd:documentation>
				This field is used to display an image on the user's local computer.
				It is defined as a link to the image, the default being an Absolute link, stored
				in the imagePath attribute.
				However, it is also possible for users to save the link as a relative link, from
				the OMERO.editor file TO the image. This relative path is stored in the
				relativeImagePath attribute.
				The imagePath attribute and relativeImagePath attribute are mutually exclusive.
				imageZoom is a display attribute that specifies a percentage (integer) zoom, eg "50".
			</xsd:documentation>
		</xsd:annotation>

		<xsd:complexType>
		<xsd:complexContent>
    		<xsd:extension base="baseElement">
				<xsd:attribute name="imagePath" type="xsd:string" />
				<xsd:attribute name="relativeImagePath" type="xsd:string" />
				<xsd:attribute name="imageZoom" type="xsd:integer" />
			</xsd:extension>
		</xsd:complexContent>
		</xsd:complexType>
	</xsd:element>


	<xsd:element name="LinkField">
		<xsd:annotation>
			<xsd:documentation>
				This field is used to store a reference to another file on the same computer, or a URL.
				This can be specified as an absolutePath OR a relativePath from the OMERO.editor file OR
				as a URL. Each of these is defined by a different attribute, all of which are mutually exclusive.
			</xsd:documentation>
		</xsd:annotation>

		<xsd:complexType>
		<xsd:complexContent>
    		<xsd:extension base="baseElement">
				<xsd:attribute name="absoluteFileLink" type="xsd:string" />
				<xsd:attribute name="relativeFileLink" type="xsd:string" />
				<xsd:attribute name="urlLink" type="xsd:string" />
			</xsd:extension>
		</xsd:complexContent>
		</xsd:complexType>
	</xsd:element>


	<xsd:element name="OntologyLookupServiceField">
		<xsd:annotation>
			<xsd:documentation>
				This field defines a term from an ontology. Ontologies supported by the Ontology Lookup Service
				http://www.ebi.ac.uk/ontology-lookup/
				It is stored in the ontolgoyTermId attribute in the format:
				"GO:0007080   mitotic metaphase plate congression"
				with the ontology ID : term ID separated from the term name by "   " (3 spaces).
				Although the name is not needed to define the term (it can always be looked up),
				saving the name allows display and searching of the text (without internet connection).
			</xsd:documentation>
		</xsd:annotation>

		<xsd:complexType>
		<xsd:complexContent>
    		<xsd:extension base="baseElement">
				<xsd:attribute name="ontolgoyTermId" type="xsd:string" />
			</xsd:extension>
		</xsd:complexContent>
		</xsd:complexType>
	</xsd:element>



	<xsd:element name="ObservationDefinition">
		<xsd:annotation>
			<xsd:documentation>
				An observation is a Phenotype or Measurement you intend to score on multiple experimental samples.
				This can be defined by the Entity, Attribute, Units(optional) and observation 'Data Type'.
				Use of Ontology terms is encouraged because ontologies are great!
				For example:
				Time of anaphase onset:
				- Data Type: Integer
				- Entity: 'Metaphase/Anaphase transition'
				- Attribute: 'Time'
				- Units: 'minutes'
				Normal metaphase alignment:
				- Data Type: True/False (boolean)
				- Entity: 'Metaphase plate congression
				- Attribute: 'Normal'
				- no units
			</xsd:documentation>
		</xsd:annotation>

		<xsd:complexType>
		<xsd:complexContent>
    		<xsd:extension base="baseElement">
				<xsd:attribute name="observationAttributeTermID" type="xsd:string" />
				<xsd:attribute name="observationEntityTermID" type="xsd:string" />
				<xsd:attribute name="observationType" type="xsd:string" />
				<xsd:attribute name="observationUnitsTermID" type="xsd:string" />
			</xsd:extension>
		</xsd:complexContent>
		</xsd:complexType>
	</xsd:element>


	<xsd:complexType name="baseElement">

		<xsd:sequence minOccurs="0" maxOccurs="unbounded">
			<xsd:any minOccurs="0" processContents="lax"/>
		</xsd:sequence>

		<xsd:attribute name="elementName" type="xsd:string" use="required" >
			<xsd:annotation>
				<xsd:documentation>
					This is the name that a user gives to a field.
				</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>

		<xsd:attribute name="description" type="xsd:string"  >
			<xsd:annotation>
				<xsd:documentation>
					This is a description that the user gives to a field.
				</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>

		<xsd:attribute name="url" type="xsd:string"  >
			<xsd:annotation>
				<xsd:documentation>
					This is the name that a url that may be added to a field.
				</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>


		<xsd:attribute name="substepsCollapsed" type="xsd:boolean"  >
			<xsd:annotation>
				<xsd:documentation>
					This boolean value is a display parameter that defines whether the children of this field are displayed.
					If substepsCollapsed = true, then the children will not be displayed.
					Changes to this field are not considered an "edit". The currently collapsed state is saved when a file is saved.
				</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>

		<xsd:attribute name="displayChildrenHorizontally" type="xsd:boolean"  >
			<xsd:annotation>
				<xsd:documentation>
					This boolean value is a display parameter that allows users to arrange fields horizontally in columns (instead of vertically).
					It is an experimental feature that has not yet been widely used.
					May be ignored in future.
				</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>

		<xsd:attribute name="backgroundColour" type="xsd:string"  >
			<xsd:annotation>
				<xsd:documentation>
					This is a display parameter that allows users to highlight a field with a background colour.
					It is stored as red, green, blue integers (0-255), in a string in the format "r:g:b"
				</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>


		<xsd:attribute name="fieldLockedUTC" type="xsd:integer">
			<xsd:annotation>
				<xsd:documentation>
					This field is a time-stamp of when a field was locked, to prevent editing.
					It is an integer of UTC milliseconds (from Jan 01 1970).
				</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>

		<xsd:attribute name="fieldLockedUserName" type="xsd:string">
			<xsd:annotation>
				<xsd:documentation>
					This string is the name of the user who locked a field.
					By default it will be the name of the current user.
				</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>

		<xsd:attribute name="lockLevel" type="xsd:string">
			<xsd:annotation>
				<xsd:documentation>
					This string defines the level of locking applied to this field.
					Currently allowed values are:
					"templateLocked"	- This means that experimental variables can still be edited.
					"allAttributesLocked"	- This means that no editing is allowed.
					The presence or absence of this attribute idicates whether a field is locked.
				</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>


		<xsd:attribute name="requiredField" type="xsd:boolean">
			<xsd:annotation>
				<xsd:documentation>
					This boolean idicates whether it is mandatory to fill out the field.
					If true, the field should not be left blank.
				</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>


	</xsd:complexType>


</xsd:schema>
