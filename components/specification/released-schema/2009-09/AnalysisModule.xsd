<?xml version = "1.0" encoding = "UTF-8"?>
<!-- style sheet OFF -->
<!--
    #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    #
    # Copyright (C) 2003-2011 Open Microscopy Environment
    #       Massachusetts Institute of Technology,
    #       National Institutes of Health,
    #       University of Dundee,
    #       University of Wisconsin at Madison
    #
    # This work is licensed under the
    #       Creative Commons Attribution 3.0 Unported License.
    # To view a copy of this license, visit
    #       http://creativecommons.org/licenses/by/3.0/
    # or send a letter to
    #       Creative Commons, 444 Castro Street, Suite 900,
    #       Mountain View, California, 94041, USA.
    # For attribution instructions, visit
    #       http://www.openmicroscopy.org/info/attribution
    #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
-->
<!--
	#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	# Written by:  Josiah Johnston <siah@nih.gov>, Andrew J Patterson
	#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
-->
<xsd:schema
	targetNamespace = "http://www.openmicroscopy.org/Schemas/AnalysisModule/2009-09"
	xmlns:AML = "http://www.openmicroscopy.org/Schemas/AnalysisModule/2009-09"
	xmlns:CLI = "http://www.openmicroscopy.org/Schemas/CLI/2009-09"
	xmlns:Bin = "http://www.openmicroscopy.org/Schemas/BinaryFile/2009-09"
	xmlns:MLI = "http://www.openmicroscopy.org/Schemas/MLI/2009-09"
	xmlns:OME = "http://www.openmicroscopy.org/Schemas/OME/2009-09"
	xmlns:xsd = "http://www.w3.org/2001/XMLSchema"
	xmlns:xml="http://www.w3.org/XML/1998/namespace"
	version = "1"
	elementFormDefault = "qualified">

	<xsd:import namespace="http://www.openmicroscopy.org/Schemas/OME/2009-09" schemaLocation="http://www.openmicroscopy.org/Schemas/OME/2009-09/ome.xsd"/>
	<xsd:import namespace = "http://www.openmicroscopy.org/Schemas/BinaryFile/2009-09" schemaLocation = "http://www.openmicroscopy.org/Schemas/BinaryFile/2009-09/BinaryFile.xsd"/>
	<xsd:import namespace = "http://www.openmicroscopy.org/Schemas/CLI/2009-09" schemaLocation = "http://www.openmicroscopy.org/Schemas/CLI/2009-09/CLI.xsd"/>
	<xsd:import namespace = "http://www.openmicroscopy.org/Schemas/MLI/2009-09" schemaLocation = "http://www.openmicroscopy.org/Schemas/MLI/2009-09/MLI.xsd"/>

	<xsd:import namespace="http://www.w3.org/XML/1998/namespace" schemaLocation="http://www.w3.org/2001/xml.xsd"/>
	<xsd:element name = "Entry"> <!-- top level definition -->
		<xsd:complexType>
			<xsd:attribute name = "Value" use = "required">
				<xsd:annotation>
					<xsd:documentation>Tied to DB. LOOKUP_TABLE_ENTRIES.VALUE</xsd:documentation>
				</xsd:annotation>
				<xsd:simpleType>
					<xsd:restriction base = "xsd:string">
						<xsd:maxLength value = "256"/>
					</xsd:restriction>
				</xsd:simpleType>
			</xsd:attribute>
			<xsd:attribute name = "Label" use="optional">
				<xsd:annotation>
					<xsd:documentation>Tied to DB. LOOKUP_TABLE_ENTRIES.LABEL</xsd:documentation>
				</xsd:annotation>
				<xsd:simpleType>
					<xsd:restriction base = "xsd:string">
						<xsd:maxLength value = "256"/>
					</xsd:restriction>
				</xsd:simpleType>
			</xsd:attribute>
		</xsd:complexType>
	</xsd:element>
	<xsd:element name = "LookupTable"> <!-- top level definition -->
		<xsd:annotation>
			<xsd:documentation>Describes valid values for an input. Think enumerations, (a list of valid values).</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:sequence>
				<xsd:element ref = "AML:Entry" minOccurs="1" maxOccurs = "unbounded"/>
				<xsd:element ref = "AML:Description" minOccurs = "0" maxOccurs="1"/>
			</xsd:sequence>
			<xsd:attribute name = "Name" use = "required">
				<xsd:annotation>
					<xsd:documentation>Tied to DB. LOOKUP_TABLES.NAME</xsd:documentation>
				</xsd:annotation>
				<xsd:simpleType>
					<xsd:restriction base = "xsd:string">
						<xsd:maxLength value = "64"/>
					</xsd:restriction>
				</xsd:simpleType>
			</xsd:attribute>
		</xsd:complexType>
	</xsd:element>
	<xsd:element name = "FormalInput"> <!-- top level definition -->
		<xsd:annotation>
			<xsd:documentation>Specifies an input requirement for a module. Image dimensions and image file locations (repository or other format) should not be specified with this. Image dimensions are intrinsic to an image. They do not represent a special requirement. Image file locations and contents are specified by other elements. Specifically, RawImageFile, RawImageFilePath, XYPlaneFile, and XYPlaneFilePath.
			</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:sequence>
				<xsd:element ref = "AML:LookupTable" minOccurs = "0" maxOccurs="1"/>
				<xsd:element ref = "AML:Description" minOccurs = "0" maxOccurs="1"/>
			</xsd:sequence>
			<xsd:attribute name = "UserDefined" default = "false" use="optional" type = "xsd:boolean">
				<xsd:annotation>
					<xsd:documentation>OME interprets this as a recommendation rather than a requirement.
Tied to DB. Table FORMAL_INPUTS Column USER_DEFINED
					</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name = "Count" default = "+" use="optional">
				<xsd:annotation>
					<xsd:documentation>Specifies how many counts of this formal input are expected. Meanings are specified below
! = exactly one
? = zero or one
+ = one or more
* = zero or more
					</xsd:documentation>
				</xsd:annotation>
				<xsd:simpleType>
					<xsd:restriction base = "xsd:string">
						<xsd:enumeration value = "!"/>
						<xsd:enumeration value = "?"/>
						<xsd:enumeration value = "+"/>
						<xsd:enumeration value = "*"/>
					</xsd:restriction>
				</xsd:simpleType>
			</xsd:attribute>
			<xsd:attribute name = "Name" use = "required">
				<xsd:annotation>
					<xsd:documentation>Valid characters are alphanumeric and spaces.</xsd:documentation>
				</xsd:annotation>
				<xsd:simpleType>
					<xsd:restriction base = "xsd:string">
						<xsd:pattern value = "[A-Za-z0-9\-\^\(\)_ ]+"/>
					</xsd:restriction>
				</xsd:simpleType>
			</xsd:attribute>
			<xsd:attribute name = "SemanticTypeName" use = "required" type = "xsd:string"/>
		</xsd:complexType>
	</xsd:element>
	<xsd:element name = "FormalOutput"> <!-- top level definition -->
		<xsd:annotation>
			<xsd:documentation>Specifies an output element of a module.</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:sequence>
				<xsd:element ref = "AML:Description" minOccurs = "0" maxOccurs="1"/>
			</xsd:sequence>
			<xsd:attribute name = "IBelongTo" use="optional">
				<xsd:annotation>
					<xsd:documentation>Concerning MakeNewRegion attribute of ExecutionInstructions, if a new region type is made, then there are two possible places a formal output attribute can be stored: It can be stored as an attribute of the RegionIterator, or it can be stored as an attribute of the new Region.
This tag is supposed to specify which. Can be left blank if module does not make new iterator.
Tied to DB. FORMAL_OUTPUTS.FEATURE_TAG
Processed before storage to DB
					</xsd:documentation>
				</xsd:annotation>
				<xsd:simpleType>
					<xsd:restriction base = "xsd:string">
						<xsd:enumeration value = "[Region]"/>
						<xsd:enumeration value = "[Iterator]"/>
					</xsd:restriction>
				</xsd:simpleType>
			</xsd:attribute>
			<xsd:attribute name = "Count" default = "+" use="optional">
				<xsd:annotation>
					<xsd:documentation>Specifies how many counts of this formal output will be produced. Meanings are specified below
! = exactly one
? = zero or one
+ = one or more
* = zero or more
					</xsd:documentation>
				</xsd:annotation>
				<xsd:simpleType>
					<xsd:restriction base = "xsd:string">
						<xsd:enumeration value = "!"/>
						<xsd:enumeration value = "?"/>
						<xsd:enumeration value = "+"/>
						<xsd:enumeration value = "*"/>
					</xsd:restriction>
				</xsd:simpleType>
			</xsd:attribute>
			<xsd:attribute name = "Name" use = "required">
				<xsd:simpleType>
					<xsd:restriction base = "xsd:string">
						<xsd:pattern value = "[A-Za-z0-9\-\^\(\)_ ]+"/>
					</xsd:restriction>
				</xsd:simpleType>
			</xsd:attribute>
			<xsd:attribute name = "SemanticTypeName" use="optional" type = "xsd:string">
				<xsd:annotation>
					<xsd:documentation>THIS IS REQUIRED for every formal output outside of the importer. The importer doesn't know what it will run into before it executes, so it can't declare the semantic type of its outputs. If you are writing a module, I HIGHLY HIGHLY recommend that you type your formal outputs.</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
		</xsd:complexType>
	</xsd:element>
	<xsd:element name = "Declaration"> <!-- top level definition -->
		<xsd:annotation>
			<xsd:documentation>States module requirements.
Formal Inputs are optional because input requirements may be specified by guaranteed image attributes. For example, OME_Image_XYZ_stats requires a path to the OME repository file, and Dimensions.
These are given by &lt;RawImageFilePath>, &lt;sizeX>, &lt;sizeY>, &lt;sizeZ>, &lt;sizeT>, and &lt;sizeW>.
			</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:sequence>
				<xsd:element ref = "AML:FormalInput" minOccurs = "0" maxOccurs = "unbounded"/>
				<xsd:element ref = "AML:FormalOutput" minOccurs = "0" maxOccurs = "unbounded"/>
			</xsd:sequence>
		</xsd:complexType>
	</xsd:element>
	<xsd:element name = "AnalysisModule"> <!-- top level definition -->
		<xsd:annotation>
			<xsd:documentation>Describes an interface to use with a program.</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:sequence>
				<xsd:element ref = "AML:Description" minOccurs = "0" maxOccurs="1"/>
				<xsd:element ref = "AML:Declaration" minOccurs="1" maxOccurs="1"/>
				<xsd:choice minOccurs = "0" maxOccurs="1">
					<xsd:element ref = "CLI:ExecutionInstructions" minOccurs="1" maxOccurs="1"/>
					<xsd:element ref = "MLI:ExecutionInstructions" minOccurs="1" maxOccurs="1"/>
				</xsd:choice>
			</xsd:sequence>
			<xsd:attribute name = "isStreamAlgorithm" default = "false" use="optional" type = "xsd:boolean">
				<xsd:annotation>
					<xsd:documentation>This is a stub for future development. The database location doesn't even exist yet.
If the output of the analysis will be the same when pixel positions are scrambled, the analysis is a stream algorithm.
Examples of stream algorithms are:
	A statistics module that produces mean, geometric mean, standard deviation, etc. for pixel intensities.
	A module to cross correlate pixel intensities across wavelengths.
Example of an algorithms that is not a stream algorithm is:
	FindSpots. (It's a module to find blobs in an image.)
If a module is a stream algorithm, it can function across the x, y, z, and time dimensions.
Tied to DB. Table PROGRAMS Column IS_STREAM_ALGORITHM
					</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name = "ModuleType" use = "required">
				<xsd:annotation>
					<xsd:documentation>As more handlers, are added, this part of the schema needs to be changed
Tied to DB. Table PROGRAMS Column MODULE_TYPE
					</xsd:documentation>
				</xsd:annotation>
				<xsd:simpleType>
					<xsd:restriction base = "xsd:string">
						<xsd:pattern value = "OME::Analysis::.+"/>
					</xsd:restriction>
				</xsd:simpleType>
			</xsd:attribute>
			<xsd:attribute name = "RegionIterator" use="optional">
				<xsd:annotation>
					<xsd:documentation>If the module iterates over a region, specify the iterator here. It will reference a region via the TAG column of the REGIONS table.
An example of a module that does not iterate over a region is Find Cells. It examines one image at a time, hence it iterates over an image, not a region. It produces zero or more regions (Çell) per image. These Cell regions belong to an image.
This module would not get a RegionIterator attribute.
An example of a module that iterates over a region is Find Golgi. It examines one CELL at a time. A cell is a region, hence the module iterates over regions, not images or datasets. It produces zero or more Golgi regions per Cell region. These Golgi regions belong to a Cell region.
This module would get a RegionIterator attribute of "CELL".
Tied to DB. Table PROGRAMS Column DEFAULT_ITERATOR
					</xsd:documentation>
				</xsd:annotation>
				<xsd:simpleType>
					<xsd:restriction base = "xsd:string">
						<xsd:maxLength value = "128"/>
					</xsd:restriction>
				</xsd:simpleType>
			</xsd:attribute>
			<xsd:attribute name = "NewRegionName" use="optional">
				<xsd:annotation>
					<xsd:documentation>If this module makes new regions, then the new Region's name needs to be specified here.
If the module does not make new regions, do not specify a value for this attribute.
Tied to DB. PROGRAMS.NEW_FEATURE_TAG
					</xsd:documentation>
				</xsd:annotation>
				<xsd:simpleType>
					<xsd:restriction base = "xsd:string">
						<xsd:maxLength value = "128"/>
					</xsd:restriction>
				</xsd:simpleType>
			</xsd:attribute>
			<xsd:attribute name = "Category" use="optional">
				<xsd:annotation>
					<xsd:documentation>References a Category.</xsd:documentation>
				</xsd:annotation>
				<xsd:simpleType>
					<xsd:restriction base = "xsd:string">
						<xsd:maxLength value = "32"/>
					</xsd:restriction>
				</xsd:simpleType>
			</xsd:attribute>
			<xsd:attribute name = "ProgramID" use = "required" type = "xsd:string">
				<xsd:annotation>
					<xsd:documentation>Eventually will refer to a program. Currently program installation is NOT implemented. So this value is the path to the installed binary file. </xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name = "ModuleName" use="optional">
				<xsd:simpleType>
					<xsd:restriction base = "xsd:string">
						<xsd:maxLength value = "64"/>
					</xsd:restriction>
				</xsd:simpleType>
			</xsd:attribute>
			<xsd:attribute name = "ID" use = "required" type = "AML:ModuleID"/>
		</xsd:complexType>
		<xsd:unique name = "FormalInput">
			<xsd:selector xpath = "AML:Declaration/AML:FormalInput"/>
			<xsd:field xpath = "@Name"/>
		</xsd:unique>
		<xsd:unique name = "FormalOutput">
			<xsd:selector xpath = "AML:Declaration/AML:FormalOutput"/>
			<xsd:field xpath = "@Name"/>
		</xsd:unique>
	</xsd:element>
	<xsd:element name = "InstallationScript"> <!-- top level definition -->
		<xsd:annotation>
			<xsd:documentation>The script should interface with the OME API to find all information it needs. (i.e. installation path) It also needs to set the location of the program after the program is installed. The location should be set through the API, but it will propagate to the LOCATION column of the PROGRAMS table.</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:sequence>
				<xsd:element ref = "Bin:BinaryFile" minOccurs="1" maxOccurs="1"/>
			</xsd:sequence>
		</xsd:complexType>
	</xsd:element>
	<xsd:element name = "InstallationFile"> <!-- top level definition -->
		<xsd:annotation>
			<xsd:documentation>Contains a packaged or zipped installation files (binaries or source code).</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:sequence>
				<xsd:element ref = "Bin:BinaryFile" minOccurs="1" maxOccurs="1"/>
			</xsd:sequence>
			<xsd:attribute name = "Format" use="optional" type = "xsd:string">
				<xsd:annotation>
					<xsd:documentation>This is a stub for future development. Don't bother with it unless you know more about it.
Specifies the packaging and/or compression format of the Installation file.
					</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
		</xsd:complexType>
	</xsd:element>
	<xsd:element name = "Installed"> <!-- top level definition -->
		<xsd:complexType>
			<xsd:attribute name = "location" use = "required" type = "xsd:string"/>
		</xsd:complexType>
	</xsd:element>
	<xsd:element name = "Program"> <!-- top level definition -->
		<xsd:annotation>
			<xsd:documentation>Stores an installation package and installation script for a program.
This currently is NOT implemented.
			</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:choice minOccurs="1" maxOccurs="1">
				<xsd:sequence>
					<xsd:element ref = "AML:InstallationScript" minOccurs="1" maxOccurs="1"/>
					<xsd:element ref = "AML:InstallationFile" minOccurs="1" maxOccurs="1"/>
				</xsd:sequence>
				<xsd:element ref = "AML:Installed" minOccurs="1" maxOccurs="1"/>
			</xsd:choice>
			<xsd:attribute name = "Name" use="optional">
				<xsd:annotation>
					<xsd:documentation>Program name.
Unclear how this would be used. DB location PROGRAMS.PROGRAM_NAME is populated by XML attribute AnalysisModule.Name.
					</xsd:documentation>
				</xsd:annotation>
				<xsd:simpleType>
					<xsd:restriction base = "xsd:string">
						<xsd:maxLength value = "64"/>
					</xsd:restriction>
				</xsd:simpleType>
			</xsd:attribute>
			<xsd:attribute name = "Version" use="optional" type = "xsd:string">
				<xsd:annotation>
					<xsd:documentation>Currently unused</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name = "ProgramID" use = "required" type = "xsd:string"/>
		</xsd:complexType>
	</xsd:element>
	<xsd:element name = "AnalysisModuleLibrary"> <!-- top level definition -->
		<xsd:annotation>
			<xsd:documentation>An analysis module is defined by two things:
1) A program
2) An interface
A single program may have multiple interfaces. Why do you need multiple interfaces?
Pretend you have a program that calculates simple statistics on the pixels of an image. You can specify which statistics you want via parameters.
Typing
./stats -mean -sigma image1
will output
Image | mean | sigma
image1 12.4 1
Typing
./stats -geomean -mean image1
will output
Image | geomean | mean
image1 12.2 12.4
The outputs are completely different. You need to specify an interface for each of these behaviors.
Or pretend you have a powerful program that can do 10 unrelated tasks, each of which outputs an image. While the outputs are the same type and format, they represent 10 completely different things. In this case, it might make sense to define 10 corresponding AnalysisModule to represent the 10 logical functions.
In any case, use AnalysisModule to define an interface and Program to store installation software for a program.
			</xsd:documentation>
		</xsd:annotation>
		<!--
This was commented out by Josiah <siah@nih.gov> on July 3, 2003.
We don't support Program installation yet, and are using the value of ProgramID
in <AnalysisModule> to refer to the location of the installed program.
A temporary hack to be sure, but that's the way it works for now.
		<keyref name = "ProgramRef" refer = "AML:Program">
			<selector xpath = "AML:AnalysisModule"/>
			<field xpath = "@ProgramID"/>
		</keyref>
		<unique name = "Program">
			<selector xpath = "AML:Program"/>
			<field xpath = "@ProgramID"/>
		</unique>
-->
		<xsd:complexType>
			<xsd:sequence>
				<xsd:element ref = "AML:AnalysisModule" minOccurs="1" maxOccurs = "unbounded"/>
				<xsd:element ref = "AML:Category" minOccurs = "0" maxOccurs = "unbounded"/>
				<xsd:element ref = "AML:Program" minOccurs = "0" maxOccurs = "unbounded"/>
			</xsd:sequence>
		</xsd:complexType>
		<xsd:unique name = "AnalysisModule">
			<xsd:selector xpath = "AML:AnalysisModule"/>
			<xsd:field xpath = "@AML:ModuleName"/>
		</xsd:unique>
	</xsd:element>
	<xsd:simpleType name = "Hex40">
		<xsd:restriction base = "xsd:hexBinary">
			<xsd:length value = "20"/>
		</xsd:restriction>
	</xsd:simpleType>
	<xsd:simpleType name = "ModuleID">
		<xsd:restriction base = "OME:LSID">
			<xsd:pattern value = "(urn:lsid:([\w\-\.]+\.[\w\-\.]+)+:Module:\S+)|(Module:\S+)"/>
		</xsd:restriction>
	</xsd:simpleType>
	<xsd:element name = "Category"> <!-- top level definition -->
		<xsd:complexType>
			<xsd:sequence>
				<xsd:element ref = "AML:Description" minOccurs="1" maxOccurs="1"/>
			</xsd:sequence>
			<xsd:attribute name = "Path" use = "required">
				<xsd:annotation>
					<xsd:documentation>Categories are organized into hierarchical structures. This specifies the full path of this category in the following format.
Path = "GrandParent name.Parent name.Category name"
If you defined a sub category, we Strongly encourage you to also define all ancestor categories that are not part of the core OME specification.
					</xsd:documentation>
				</xsd:annotation>
				<xsd:simpleType>
					<xsd:restriction base = "xsd:string">
						<xsd:pattern value = "^[A-Za-z0-9 ]+(\.[A-Za-z0-9 ]+)*$"/>
					</xsd:restriction>
				</xsd:simpleType>
			</xsd:attribute>
		</xsd:complexType>
	</xsd:element>
	<xsd:element name = "Description"> <!-- top level definition -->
		<xsd:annotation>
			<xsd:documentation>
				Just some free-form text.
				The content model is now String.
				This is no longer the correct place for an XML sub-document
				Either
				- use CustomAttributes instead
				Or
				- define your own xml tree outside the OME node and link to the OME objects using references to the IDs
			</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:simpleContent>
				<xsd:extension base = "xsd:string">
					<xsd:attribute ref = "xml:lang" default = "en" use="optional"/>
				</xsd:extension>
			</xsd:simpleContent>
		</xsd:complexType>
	</xsd:element>
</xsd:schema>
