                   Using Bio-Formats Guide by Melissa Linkert

                                  Overview
                                 ----------

This document describes various things that are useful to know when working
with Bio-Formats.  It is recommended that you obtain the Bio-Formats source
by following the directions at http://loci.wisc.edu/bio-formats/source-code,
rather than using an official release.  It is also recommended that you have
a copy of the JavaDocs nearby (available online at
http://hudson.openmicroscopy.org.uk/job/BIOFORMATS-trunk/javadoc/);
the notes that follow will make more sense when you see the API.

For a complete list of supported formats, see the Bio-Formats home page:
http://www.loci.wisc.edu/software/bio-formats

For a few working examples of how to use Bio-Formats, see:

http://github.com/openmicroscopy/bioformats/tree/develop/components/bio-formats/utils

                              Basic File Reading
                             --------------------

Bio-Formats provides several methods for retrieving data from files in an
arbitrary (supported) format.  These methods fall into three categories: raw
pixels, core metadata, and format-specific metadata.  All methods described here
are present and documented in loci.formats.IFormatReader - it is advised that
you take a look at the source and/or JavaDoc.  In general, it is recommended
that you read files using an instance of ImageReader.  While it is possible to
work with readers for a specific format, ImageReader contains additional logic
to automatically detect the format of a file and delegate subsequent calls to
the appropriate reader.

Prior to retrieving pixels or metadata, it is necessary to call setId(String)
on the reader instance, passing in the name of the file to read.  Some formats
allow multiple series (5D image stacks) per file; in this case you may wish to
call setSeries(int) to change which series is being read.

Raw pixels are always retrieved one plane at a time.  Planes are returned
as raw byte arrays, using one of the openBytes methods.

Core metadata is the general term for anything that might be needed to work with
the planes in a file.  A list of core metadata fields is given below, with the
appropriate accessor method in parentheses:

- image width (getSizeX())
- image height (getSizeY())
- number of series per file (getSeriesCount())
- total number of images per series (getImageCount())
- number of slices in the current series (getSizeZ())
- number of timepoints in the current series (getSizeT())
- number of actual channels in the current series (getSizeC())
- number of channels per image (getRGBChannelCount())
- the ordering of the images within the current series (getDimensionOrder())
- whether each image is RGB (isRGB())
- whether the pixel bytes are in little-endian order (isLittleEndian())
- whether the channels in an image are interleaved (isInterleaved())
- the type of pixel data in this file (getPixelType())

All file formats are guaranteed to accurately report core metadata.

Format-specific metadata refers to any other data specified in the file - this
includes acquisition and hardware parameters, among other things.  This data
is stored internally in a java.util.Hashtable, and can be accessed in one of
two ways: individual values can be retrieved by calling
getMetadataValue(String), which gets the value of the specified key.
Alternatively, getMetadata() will return the entire Hashtable.
Note that the keys in this Hashtable are different for each format, hence the
name "format-specific metadata".

See the Bio-Formats Metadata Guide for more information on the metadata
capabilities that Bio-Formats provides.

                             File Reading Extras
                            ---------------------

The previous section described how to read pixels as they are stored in the
file.  However, the native format isn't necessarily convenient, so Bio-Formats
provides a few extras to make file reading more flexible.

- There are a few "wrapper" readers (that implement IFormatReader) that take a
  reader in the constructor, and manipulate the results somehow, for
  convenience. Using them is similar to the java.io InputStream/OutputStream
  model: just layer whichever functionality you need by nesting the wrappers.
  + BufferedImageReader extends IFormatReader, and allows pixel data to be
    returned as BufferedImages instead of raw byte arrays.
  + FileStitcher extends IFormatReader, and uses advanced pattern
    matching heuristics to group files that belong to the same dataset.
  + ChannelSeparator extends IFormatReader, and makes sure that
    all planes are grayscale - RGB images are split into 3 separate grayscale
    images.
  + ChannelMerger extends IFormatReader, and merges grayscale
    images to RGB if the number of channels is greater than 1.
  + ChannelFiller extends IFormatReader, and converts indexed color images to
    RGB images.
  + MinMaxCalculator extends IFormatReader, and provides an API
    for retrieving the minimum and maximum pixel values for each channel.
  + DimensionSwapper extends IFormatReader, and provides an API
    for changing the dimension order of a file.
- ImageTools and loci.formats.gui.AWTImageTools provide a number of methods for
  manipulating BufferedImages and primitive type arrays.  In particular, there
  are methods to split and merge channels in a BufferedImage/array, as well as
  converting to a specific data type (e.g. convert short data to byte data).

                                Writing Files
                               ---------------

The following file formats can be written using Bio-Formats:

- TIFF (uncompressed, LZW, JPEG, or JPEG-2000)
- OME-TIFF (uncompressed, LZW, JPEG, or JPEG-2000)
- JPEG
- PNG
- AVI (uncompressed)
- QuickTime (uncompressed is supported natively; additional codecs use QTJava)
- Encapsulated PostScript (EPS)
- OME-XML (not recommended)

The writer API (see loci.formats.IFormatWriter) is very similar to the reader
API, in that files are written one plane at time (rather than all at once).

All writers allow the output file to be changed before the last plane has
been written.  This allows you to write to any number of output files using
the same writer and output settings (compression, frames per second, etc.),
and is especially useful for formats that do not support multiple images per
file.

Please see loci.formats.tools.ImageConverter and

http://trac.openmicroscopy.org.uk/ome/wiki/BioFormats-Export

for examples of how to write files.

                    Arcane Notes and Implementation Details
                   -----------------------------------------

Following is a list of known oddities.

o Importing multi-file formats (Leica LEI, PerkinElmer, FV1000 OIF, ICS, and
  Prairie TIFF, to name afew) can fail if any of the files are renamed.  There
  are "best guess" heuristics in these readers, but they aren't guaranteed to
  work in general.  So please don't rename files in these formats.

o If you are working on a Macintosh, make sure that the data and resource forks
  of your image files are stored together.  Bio-Formats does not handle
  separated forks (the native QuickTime reader tries, but usually fails).

o RLE-compressed QuickTime movies will look funny if the planes are not read
  in sequential order, since proper decoding of a particular plane can depend
  on the previous plane.
