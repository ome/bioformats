<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0
    http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <groupId>ome</groupId>
  <artifactId>pom-bio-formats</artifactId>
  <version>5.1.5-SNAPSHOT</version>
  <packaging>pom</packaging>

  <name>Bio-Formats projects</name>
  <description>Umbrella project for the Bio-Formats software project.</description>
  <url>http://www.openmicroscopy.org/site/products/bio-formats</url>
  <inceptionYear>2005</inceptionYear>

  <modules>
    <module>components/specification</module>
    <module>components/forks/jai</module>
    <module>components/forks/mdbtools</module>
    <module>components/forks/poi</module>
    <module>components/forks/turbojpeg</module>
    <module>components/autogen</module>
    <module>components/formats-api</module>
    <module>components/formats-bsd</module>
    <module>components/formats-gpl</module>
    <module>components/bundles/bioformats_package</module>
    <module>components/formats-common</module>
    <module>components/bio-formats-plugins</module>
    <module>components/bundles/loci-tools</module>
    <module>components/metakit</module>
    <module>components/bundles/ome-tools</module>
    <module>components/ome-jxr</module>
    <module>components/ome-xml</module>
    <module>components/bio-formats-tools</module>
    <module>components/test-suite</module>
    <module>components/stubs/lwf-stubs</module>
    <module>components/stubs/mipav</module>
    <module>components/xsd-fu</module>
  </modules>

  <properties>
    <!-- If two artifacts on the classpath use two different versions of the
         same dependency, behavior is inconsistent at best, and often broken.
         The following properties facilitate consistency of dependency
         versions between various projects in the SciJava software stack.
         When possible, we advise using the relevant groupId and version
         properties for your dependencies rather than hardcoding them. -->

    <vcs.revision>${revision}</vcs.revision>
    <release.version>5.1.5-SNAPSHOT</release.version>
    <vcs.shortrevision>${shortrevision}</vcs.shortrevision>
    <date>${maven.build.timestamp}</date>
    <year>2013</year>
    <project.rootdir>${basedir}</project.rootdir>
    <imagej1.version>1.48s</imagej1.version>
    <jgoodies-forms.version>1.7.2</jgoodies-forms.version>
    <log4j.version>1.2.17</log4j.version>
    <logback.version>1.1.1</logback.version>
    <slf4j.version>1.7.6</slf4j.version>
    <kryo.version>2.24.0</kryo.version>
    <testng.version>6.8</testng.version>
    <guava.version>17.0</guava.version>

    <xsdfu.schemaver>2015-01</xsdfu.schemaver>
    <xsdfu.schemapath>components/specification/released-schema/${xsdfu.schemaver}</xsdfu.schemapath>
    <xsdfu.ome>${xsdfu.schemapath}/ome.xsd</xsdfu.ome>
    <xsdfu.binaryfile>${xsdfu.schemapath}/BinaryFile.xsd</xsdfu.binaryfile>
    <xsdfu.roi>${xsdfu.schemapath}/ROI.xsd</xsdfu.roi>
    <xsdfu.sa>${xsdfu.schemapath}/SA.xsd</xsdfu.sa>
    <xsdfu.spw>${xsdfu.schemapath}/SPW.xsd</xsdfu.spw>

    <!-- NB: Avoid platform encoding warning when copying resources. -->
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>

    <!-- NB: Specify formatting of the maven.build.timestamp property. -->
    <maven.build.timestamp.format>d MMMMM yyyy</maven.build.timestamp.format>

    <!-- NB: Override argLine property for extra maven-surefire-plugin args. -->
    <argLine/>
  </properties>

  <build>
    <!-- It is nice for "mvn" with no arguments to do something reasonable. -->
    <defaultGoal>install</defaultGoal>

    <sourceDirectory>${project.basedir}/src</sourceDirectory>
    <testSourceDirectory>${project.basedir}/test</testSourceDirectory>
    <resources>
      <resource>
        <directory>${project.basedir}/src</directory>
        <excludes>
          <exclude>**/*.java</exclude>
          <exclude>**/package.html</exclude>
          <exclude>**/*.properties</exclude>
        </excludes>
      </resource>
      <resource>
        <targetPath>META-INF/lib</targetPath>
        <directory>${project.basedir}/lib</directory>
      </resource>
      <resource>
        <directory>${project.basedir}/src</directory>
        <includes>
          <include>**/*.properties</include>
        </includes>
        <filtering>true</filtering>
      </resource>
      <resource>
        <directory>${project.basedir}</directory>
        <includes>
          <include>**/*.cpp</include>
        </includes>
        <filtering>true</filtering>
      </resource>
    </resources>
    <testResources>
      <testResource>
        <directory>${project.basedir}/test</directory>
        <excludes>
          <exclude>**/*.java</exclude>
          <exclude>**/package.html</exclude>
        </excludes>
      </testResource>
    </testResources>

    <plugins>
      <!-- Create -sources.jar when building. -->
      <plugin>
        <artifactId>maven-source-plugin</artifactId>
      </plugin>

      <plugin>
        <artifactId>maven-surefire-plugin</artifactId>
      </plugin>

      <plugin>
        <groupId>org.codehaus.gmaven</groupId>
        <artifactId>gmaven-plugin</artifactId>
        <version>1.4</version>
        <executions>
          <execution>
            <phase>initialize</phase>
            <goals>
              <goal>execute</goal>
            </goals>
            <configuration>
              <defaults>
                <default>UNKNOWN</default>
              </defaults>
              <source>
                import java.util.regex.Pattern

                def ant = new AntBuilder()
                try {
                  ant.exec(outputproperty:"shortrevision",
                    failifexecutionfails:"false",
                    executable: 'git') {
                      arg(line:"rev-parse --short HEAD")
                  }
                }
                catch (Exception e) { }
                try {
                  ant.exec(outputproperty:"revision",
                    failifexecutionfails:"false",
                    executable: 'git') {
                      arg(line:"rev-parse HEAD")
                  }
                }
                catch (Exception e) { }

                try {
                  ant.exec(outputproperty:"exactTag",
                    resultproperty:"exactTagRC",
                    failifexecutionfails:"true",
                    failonerror:"false",
                    executable: 'git') {
                      arg(line:"describe --match=v[0-9]* --exact")
                  }
                }
                catch (Exception e) {
                  ant.project.properties.exactTagRC = ""
                  ant.project.properties.exactTag = ""
                }

                try {
                  ant.exec(outputproperty:"describe",
                    failifexecutionfails:"true",
                    executable: 'git') {
                      arg(line:"describe --match=v[0-9]*")
                  }
                }
                catch (Exception e) {
                  ant.project.properties.describe = ""
                }

                println ant.project.properties.exactTagRC
                println ant.project.properties.exactTag
                println ant.project.properties.describe

                if (ant.project.properties.exactTagRC == 0) {
                  // if we're building from a tag, set the release name
                  // to be the tag name, minus the leading 'v'
                  project.properties.release = ant.project.properties.exactTag.substring(1)
                }
                else if (ant.project.properties.describe) {
                  // if we're building within Git, but not from a tag,
                  // then use the last known tag's number to set a snapshot
                  // version
                  try {
                    def regex = Pattern.compile("v([0-9]+)[.]([0-9]+)[.]([0-9]+)(.*)")
                    def groups = regex.matcher(ant.project.properties.describe)
                    groups.matches()
                    def major = groups.group(1)
                    def minor = groups.group(2)
                    def patch = groups.group(3)
                    project.properties.release = major + "." + minor + "." + patch + "-SNAPSHOT"
                  }
                  catch (IllegalStateException e) {
                    project.properties.release = ""
                  }
                }
                else {
                  // if we're building outside of Git, set a default
                  // version number
                  project.properties.release = project.properties.default
                }
                project.properties.shortrevision = ant.project.properties.shortrevision
                project.properties.revision = ant.project.properties.revision

                if (!project.properties.release) {
                  // assume this is a source package outside of Git
                  // there should be a ant/gitversion.xml file with the
                  // version information used when the package was created

                  def xmlfile = project.properties.get('project.rootdir') + "/ant/gitversion.xml"

                  def xml = new XmlParser().parse(xmlfile)
                  for (property in xml.property) {
                    println "parsing " + property.'@name'
                    if ('release.version' == property.'@name') {
                      project.properties.release = property.'@value'
                    }
                    else if ('vcs.revision' == property.'@name') {
                      project.properties.revision = property.'@value'
                    }
                    else if ('vcs.shortrevision' == property.'@name') {
                      project.properties.shortrevision = property.'@value'
                    }
                  }
                }

                println "shortrevision = " + project.properties.shortrevision
                println "revision = " + project.properties.revision
                println "release = " + project.properties.release
              </source>
            </configuration>
          </execution>
        </executions>
      </plugin>

      <!-- Add Implementation-Build entry to JAR manifest. -->
      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>buildnumber-maven-plugin</artifactId>
      </plugin>

      <!-- Enable 'license:' goals. -->
      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>license-maven-plugin</artifactId>
        <configuration>
          <licenseName>gpl_v2</licenseName>
          <organizationName>Open Microscopy Environment:
  - Board of Regents of the University of Wisconsin-Madison
  - Glencoe Software, Inc.
  - University of Dundee</organizationName>
            <!-- NB: Avoid stomping on variant copyright holders. -->
            <canUpdateCopyright>false</canUpdateCopyright>
          <roots>
            <root>src</root>
            <root>target/generated-sources</root>
            <root>target/processed-sources</root>
            <root>test</root>
            <root>utils</root>
            <root>doc</root>
            <root>cppwrap</root>
          </roots>
        </configuration>
      </plugin>
    </plugins>

    <!-- We use wagon-webdav-jackrabbit 1.0 for deploys, since it is
         compatible with both Maven 2.2.x and Maven 3.0.x cross-platform. -->
    <extensions>
      <extension>
        <groupId>org.apache.maven.wagon</groupId>
        <artifactId>wagon-webdav-jackrabbit</artifactId>
        <version>1.0</version>
      </extension>
    </extensions>

    <pluginManagement>
      <plugins>
        <plugin>
          <artifactId>maven-assembly-plugin</artifactId>
          <version>2.4</version>
        </plugin>

        <plugin>
          <artifactId>maven-clean-plugin</artifactId>
          <version>2.5</version>
        </plugin>

        <plugin>
          <artifactId>maven-compiler-plugin</artifactId>
          <version>3.1</version>
          <!-- Require the Java 6 platform. -->
          <configuration>
            <source>1.6</source>
            <target>1.6</target>
          </configuration>
        </plugin>

        <plugin>
          <artifactId>maven-dependency-plugin</artifactId>
          <version>2.8</version>
        </plugin>

        <plugin>
          <artifactId>maven-deploy-plugin</artifactId>
          <version>2.8.1</version>
        </plugin>

        <plugin>
          <artifactId>maven-install-plugin</artifactId>
          <version>2.5.1</version>
        </plugin>

        <plugin>
          <artifactId>maven-jar-plugin</artifactId>
          <version>2.4</version>
          <!-- Always add classpath to JAR manifests. -->
          <configuration>
            <archive>
              <manifest>
                <addClasspath>true</addClasspath>
                <addDefaultImplementationEntries>true</addDefaultImplementationEntries>
                <addDefaultSpecificationEntries>true</addDefaultSpecificationEntries>
              </manifest>
              <manifestEntries>
                <!-- Add SCM revision from buildnumber plugin, if available. -->
                <Implementation-Build>${buildNumber}</Implementation-Build>
                <!-- Add a formatted timestamp for the build. -->
                <Implementation-Date>${maven.build.timestamp}</Implementation-Date>
              </manifestEntries>
            </archive>
            <excludes>
              <exclude>**/*.cpp</exclude>
              <exclude>**/*.h</exclude>
            </excludes>
          </configuration>
        </plugin>

        <plugin>
          <artifactId>maven-javadoc-plugin</artifactId>
          <!-- NB: The same version declaration and configuration block also
               appears in the <reporting> section, and must be kept in sync. -->
          <version>2.9.1</version>
          <configuration>
            <javadocDirectory>${project.basedir}/src</javadocDirectory>
            <maxmemory>1024m</maxmemory>
            <!-- Workaround for javadoc bug when classes in the default
                 package access classes from non-default packages. See:
                 http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=5101868 -->
            <use>false</use>
            <links>
              <!-- Java 6 -->
              <link>http://docs.oracle.com/javase/6/docs/api/</link>

              <!-- ImageJ1 -->
              <link>http://jenkins.imagej.net/job/ImageJ1-javadoc/javadoc/</link>
            </links>
          </configuration>
        </plugin>

        <plugin>
          <artifactId>maven-plugin-plugin</artifactId>
          <version>3.2</version>
        </plugin>

        <plugin>
          <artifactId>maven-release-plugin</artifactId>
          <version>2.4.2</version>
          <dependencies>
            <dependency>
              <groupId>org.apache.maven.scm</groupId>
              <artifactId>maven-scm-provider-gitexe</artifactId>
              <version>1.9</version>
            </dependency>
          </dependencies>
        </plugin>

        <plugin>
          <artifactId>maven-resources-plugin</artifactId>
          <version>2.6</version>
        </plugin>

        <plugin>
          <artifactId>maven-site-plugin</artifactId>
          <version>3.3</version>
        </plugin>

        <plugin>
          <artifactId>maven-source-plugin</artifactId>
          <version>2.2.1</version>
          <!-- Build source artifact in addition to main artifact. -->
          <executions>
            <execution>
              <goals>
                <goal>jar</goal>
              </goals>
            </execution>
          </executions>
        </plugin>

        <plugin>
          <artifactId>maven-surefire-plugin</artifactId>
          <version>2.16</version>
          <!-- Make sure that:
               A) unit tests run with sufficient RAM allocated;
               B) unit tests do not pop a Java dock icon on OS X;
               C) additional args can be given via argLine property;

               Sometimes, one needs to pass JVM options to the JVM
               running the unit tests, such as -verbose:class or
               -Djava.awt.headless=true.

               Unfortunately, maven-surefire does not expose a
               command-line interface to do so, therefore let's
               simulate it by re-using the property 'argLine' to
               specify those options. -->
          <configuration>
            <argLine>-Xms512m -Xmx512m -Dapple.awt.UIElement="true" ${argLine}</argLine>
          </configuration>
        </plugin>

        <!-- Build Number Maven plugin -
             http://mojo.codehaus.org/buildnumber-maven-plugin/
             This plugin embeds a build number in the JAR manifest. -->
        <plugin>
          <groupId>org.codehaus.mojo</groupId>
          <artifactId>buildnumber-maven-plugin</artifactId>
          <version>1.2</version>
          <!-- Record SCM revision in manifest. -->
          <executions>
            <execution>
              <phase>validate</phase>
              <goals>
                <goal>create</goal>
              </goals>
            </execution>
          </executions>
          <configuration>
            <getRevisionOnlyOnce>true</getRevisionOnlyOnce>
            <revisionOnScmFailure>UNKNOWN</revisionOnScmFailure>
          </configuration>
        </plugin>

        <!-- Exec Maven plugin -
        http://mojo.codehaus.org/exec-maven-plugin/
        This plugin launches a Java class using Maven. -->
        <plugin>
          <groupId>org.codehaus.mojo</groupId>
          <artifactId>exec-maven-plugin</artifactId>
          <version>1.2.1</version>
        </plugin>

        <!-- License Maven plugin -
             http://mojo.codehaus.org/license-maven-plugin/
             This plugin manages project licenses and source file headers. -->
        <plugin>
          <groupId>org.codehaus.mojo</groupId>
          <artifactId>license-maven-plugin</artifactId>
          <version>1.6</version>
          <configuration>
            <projectName>${project.description}</projectName>
            <addJavaLicenseAfterPackage>false</addJavaLicenseAfterPackage>
            <canUpdateDescription>true</canUpdateDescription>
            <canUpdateCopyright>true</canUpdateCopyright>
            <extraExtensions>
              <bsh>java</bsh>
              <config>properties</config>
              <ijm>java</ijm>
            </extraExtensions>
          </configuration>
        </plugin>

        <!-- Versions Maven plugin -
             http://mojo.codehaus.org/versions-maven-plugin/
             Check for new plugin versions using
             "mvn versions:display-plugin-updates" -->
        <plugin>
          <groupId>org.codehaus.mojo</groupId>
          <artifactId>versions-maven-plugin</artifactId>
          <version>2.1</version>
        </plugin>

        <!-- Eclipse-specific configuration

             With a recent version of m2e, Eclipse's Maven binding, it is no
             longer enough to configure plugins; they will be ignored by
             default. But we really want the buildnumber and the jar plugin to
             do their job. So now we have to add lifecycle mappings in addition
             to configuring the plugins.

             Let's hope that m2e remains the only IDE Maven binding that
             requires such a lot of additional work just to get the same result
             as plain Maven would produce out of the box. -->
        <plugin>
          <groupId>org.eclipse.m2e</groupId>
          <artifactId>lifecycle-mapping</artifactId>
          <version>1.0.0</version>
          <configuration>
            <lifecycleMappingMetadata>
              <pluginExecutions>
                <pluginExecution>
                  <pluginExecutionFilter>
                    <groupId>org.codehaus.gmaven</groupId>
                    <artifactId>gmaven-plugin</artifactId>
                    <versionRange>[1.4,)</versionRange>
                    <goals>
                      <goal>execute</goal>
                    </goals>
                  </pluginExecutionFilter>
                  <action>
                    <ignore />
                  </action>
                </pluginExecution>
                <pluginExecution>
                  <pluginExecutionFilter>
                    <groupId>org.codehaus.mojo</groupId>
                    <artifactId>buildnumber-maven-plugin</artifactId>
                    <versionRange>[1.0,)</versionRange>
                    <goals>
                      <goal>create</goal>
                    </goals>
                  </pluginExecutionFilter>
                  <action>
                    <execute>
                      <runOnIncremental>true</runOnIncremental>
                      <runOnConfiguration>true</runOnConfiguration>
                    </execute>
                  </action>
                </pluginExecution>
                <pluginExecution>
                  <pluginExecutionFilter>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-jar-plugin</artifactId>
                    <versionRange>[2.0,)</versionRange>
                    <goals>
                      <goal>jar</goal>
                    </goals>
                  </pluginExecutionFilter>
                  <action>
                    <execute>
                      <runOnIncremental>true</runOnIncremental>
                      <runOnConfiguration>true</runOnConfiguration>
                    </execute>
                  </action>
                </pluginExecution>
                <pluginExecution>
                  <pluginExecutionFilter>
                    <groupId>net.imagej</groupId>
                    <artifactId>imagej-maven-plugin</artifactId>
                    <versionRange>[0.1.0,)</versionRange>
                    <goals>
                      <goal>set-rootdir</goal>
                    </goals>
                  </pluginExecutionFilter>
                  <action>
                    <ignore />
                  </action>
                </pluginExecution>
              </pluginExecutions>
            </lifecycleMappingMetadata>
          </configuration>
        </plugin>
      </plugins>
    </pluginManagement>
  </build>

  <reporting>
    <plugins>
      <!-- Generate javadocs as part of site generation. -->
      <plugin>
        <artifactId>maven-javadoc-plugin</artifactId>
        <!-- NB: The following version declaration and configuration block
             are fully replicated from the pluginManagement section. This
             is necessary because many versions of maven-site-plugin
             (including 3.3) do not respect the pluginManagement values.
             See: http://jira.codehaus.org/browse/MSITE-443
             While the maven-site-plugin documentation states that it
             "search[es] the same groupId/artifactId in the
             build.pluginManagement.plugins section", this claim
             unfortunately does not seem to reflect reality. -->
        <version>2.9.1</version>
        <configuration>
          <javadocDirectory>${project.basedir}/src</javadocDirectory>
          <maxmemory>1024m</maxmemory>
          <!-- Workaround for javadoc bug when classes in the default
               package access classes from non-default packages. See:
               http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=5101868 -->
          <use>false</use>
          <links>
            <!-- Java 6 -->
            <link>http://docs.oracle.com/javase/6/docs/api/</link>

            <!-- ImageJ1 -->
            <link>http://jenkins.imagej.net/job/ImageJ1-javadoc/javadoc/</link>
          </links>
        </configuration>
      </plugin>
    </plugins>
  </reporting>

  <prerequisites>
    <maven>2.2.1</maven>
  </prerequisites>

  <organization>
    <name>Open Microscopy Environment</name>
    <url>http://www.openmicroscopy.org/</url>
  </organization>

  <issueManagement>
    <system>Trac</system>
    <url>https://trac.openmicroscopy.org/ome</url>
  </issueManagement>

  <ciManagement>
    <system>Jenkins</system>
    <url>https://ci.openmicroscopy.org/</url>
  </ciManagement>

  <mailingLists>
    <mailingList>
      <name>OME-users</name>
      <subscribe>http://lists.openmicroscopy.org.uk/mailman/listinfo/ome-users/</subscribe>
      <unsubscribe>http://lists.openmicroscopy.org.uk/mailman/listinfo/ome-users/</unsubscribe>
      <post>ome-users@lists.openmicroscopy.org.uk</post>
      <archive>http://lists.openmicroscopy.org.uk/pipermail/ome-users/</archive>
    </mailingList>
    <mailingList>
      <name>OME-devel</name>
      <subscribe>http://lists.openmicroscopy.org.uk/mailman/listinfo/ome-devel/</subscribe>
      <unsubscribe>http://lists.openmicroscopy.org.uk/mailman/listinfo/ome-devel/</unsubscribe>
      <post>ome-devel@lists.openmicroscopy.org.uk</post>
      <archive>http://lists.openmicroscopy.org.uk/pipermail/ome-devel/</archive>
    </mailingList>
  </mailingLists>

  <scm>
    <connection>scm:git:git://github.com/openmicroscopy/bioformats</connection>
    <developerConnection>scm:git:git@github.com:openmicroscopy/bioformats</developerConnection>
    <tag>HEAD</tag>
    <url>http://github.com/openmicroscopy/bioformats</url>
  </scm>

  <!-- NB: for parent project -->
  <repositories>
    <repository>
        <id>ome.experimental</id>
        <url>http://artifacts.openmicroscopy.org/artifactory/ome.experimental</url>
    </repository>
    <repository>
      <id>ome.external</id>
      <url>http://artifacts.openmicroscopy.org/artifactory/ome.external</url>
    </repository>
    <repository>
      <id>ome.releases</id>
      <url>http://artifacts.openmicroscopy.org/artifactory/ome.releases</url>
    </repository>
    <repository>
      <id>unidata.releases</id>
      <url>http://artifacts.unidata.ucar.edu/content/repositories/unidata-releases</url>
    </repository>
  </repositories>

  <pluginRepositories>
    <pluginRepository>
      <id>central</id>
      <name>Central Repository</name>
      <url>http://repo.maven.apache.org/maven2</url>
      <layout>default</layout>
    </pluginRepository>
    <pluginRepository>
      <id>ome.releases</id>
      <url>http://artifacts.openmicroscopy.org/artifactory/ome.releases</url>
    </pluginRepository>
    <pluginRepository>
      <id>ome.external</id>
      <url>http://artifacts.openmicroscopy.org/artifactory/ome.external</url>
    </pluginRepository>
    <pluginRepository>
      <id>ome.experimental</id>
      <url>http://artifacts.openmicroscopy.org/artifactory/ome.experimental</url>
    </pluginRepository>
  </pluginRepositories>

  <profiles>
    <profile>
      <id>merge-build</id>

      <repositories>
        <repository>
          <id>ome.unstable</id>
          <url>http://artifacts.openmicroscopy.org/artifactory/ome.unstable</url>
        </repository>
      </repositories>

      <pluginRepositories>
        <pluginRepository>
          <id>ome.unstable</id>
          <url>http://artifacts.openmicroscopy.org/artifactory/ome.unstable</url>
          <snapshots>
            <enabled>true</enabled>
          </snapshots>
        </pluginRepository>
      </pluginRepositories>

      <distributionManagement>
        <repository>
          <id>ome.unstable</id>
          <name>OME Unstable Repository</name>
          <url>http://artifacts.openmicroscopy.org/artifactory/ome.unstable</url>
        </repository>
        <snapshotRepository>
          <id>ome.unstable</id>
          <name>OME Unstable Repository</name>
          <url>http://artifacts.openmicroscopy.org/artifactory/ome.unstable</url>
        </snapshotRepository>
      </distributionManagement>
    </profile>

    <profile>
      <id>latest-build</id>
      <activation>
        <activeByDefault>true</activeByDefault>
      </activation>

      <repositories>
        <repository>
          <id>ome.snapshots</id>
          <url>http://artifacts.openmicroscopy.org/artifactory/ome.snapshots</url>
        </repository>
      </repositories>

      <pluginRepositories>
        <pluginRepository>
          <id>ome.snapshots</id>
          <url>http://artifacts.openmicroscopy.org/artifactory/ome.snapshots</url>
          <snapshots>
            <enabled>true</enabled>
          </snapshots>
        </pluginRepository>
      </pluginRepositories>

      <distributionManagement>
        <repository>
          <id>ome.staging</id>
          <name>OME Staging Repository</name>
          <url>http://artifacts.openmicroscopy.org/artifactory/ome.staging</url>
        </repository>
        <snapshotRepository>
          <id>ome.snapshots</id>
          <name>OME Snapshots Repository</name>
          <url>http://artifacts.openmicroscopy.org/artifactory/ome.snapshots</url>
        </snapshotRepository>
      </distributionManagement>
    </profile>

    <!-- Build test artifact when tests are present. -->
    <profile>
      <id>test-jar</id>
      <activation>
        <file>
          <!-- NB: Cannot use ${project.build.testSourceDirectory} because
               Maven only limitedly interpolates this section of the POM.
               See: http://maven.apache.org/pom.html#Activation -->
          <exists>${basedir}/src/test/java</exists>
        </file>
      </activation>
      <build>
        <plugins>
          <plugin>
            <artifactId>maven-jar-plugin</artifactId>
            <executions>
              <execution>
                <goals>
                  <goal>test-jar</goal>
                </goals>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
    </profile>

    <!-- Run integration tests when "-P run-its" is passed.
         This works using the maven-invoker-plugin. -->
    <profile>
      <id>run-its</id>
      <build>
        <defaultGoal>integration-test</defaultGoal>
        <plugins>
          <plugin>
            <artifactId>maven-invoker-plugin</artifactId>
            <version>1.8</version>
            <configuration>
              <debug>${invoker.debug}</debug>
              <showErrors>true</showErrors>
              <streamLogs>true</streamLogs>
              <projectsDirectory>src/it</projectsDirectory>
              <cloneProjectsTo>${project.build.directory}/it</cloneProjectsTo>
              <pomIncludes>
                <pomInclude>*/pom.xml</pomInclude>
              </pomIncludes>
              <settingsFile>src/it/settings.xml</settingsFile>
              <localRepositoryPath>${project.build.directory}/local-repo</localRepositoryPath>
              <preBuildHookScript>setup.bsh</preBuildHookScript>
              <postBuildHookScript>verify.bsh</postBuildHookScript>
            </configuration>
            <executions>
              <execution>
                <id>integration-test</id>
                <goals>
                  <goal>install</goal>
                  <goal>run</goal>
                </goals>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
    </profile>
  </profiles>

</project>
