Bio-Formats C++ implementation
══════════════════════════════

Prerequisites
─────────────

┌──────────────┬──────────┬─────────────────┬────────────────┬──────────┐
│ Dependency   │ Version  │ Debian/Ubuntu   │ RedHat/CentOS  │ Homebrew │
├──────────────┼──────────┼─────────────────┼────────────────┼──────────┤
│ Xerces-C 3.x │    3.x   │ libxerces-c-dev │ xerces-c-devel │ xerces-c │
│ Boost        │ >= 1.44¹ │ libboost-dev    │ boost-devel    │ boost    │
│ GTest        │ >= 1.5   │ libgtest-dev    │ gtest-devel    │ N/A²     │
│ CMake        │ >= 2.8   │ cmake           │ cmake          │ cmake    │
└──────────────┴──────────┴─────────────────┴────────────────┴──────────┘

  1. 1.41 is known to not work nicely with cmake; 1.5x or later recommended
  2. http://answers.ros.org/question/42335/mac-os-x-install-error-no-available-formula-for-gtest/

The C++ bindings use C++11 features such as std::shared_ptr when using
a C++11 compiler.  When using an older compiler, the Boost equivalents
will be used as fallbacks to provide the same functionality.  cmake
will automatically detect and use C++11 features when available.

Google Test
───────────

The Google test (gtest) framework is used for unit testing.
Unfortunately, it's packaged in different ways on different systems
and for different versions.

RedHat/CentOS: Just install the package.  Future versions might
require doing similar things to the Debian version.

Debian/Ubuntu: After installing the package, you need to build a copy
of the library, for example:

  mkdir gtest
  cd gtest
  cmake /usr/src/gtest
  make

While you could do this once, ideally you would do this immediately
prior to each build to ensure that gtest is built with the same
compiler and compiler options as the bioformats build.  See
tools/test-build for how this is handled for the GitHub/Travis builds,
which is done on Ubuntu systems.

Homebrew: See the above prerequisites link.  The easiest thing to do
is to download and build gtest, then install it into /opt/gtest (both
the includes directory and the static libraries).  It doesn't provide
an "install" target; you'll have to "cp -r includes *.a destination".

  % ls /opt/gtest
  include         libgtest.a      libgtest_main.a

Building
────────

Create a temporary build directory.  The temporary build directory can
be in any location inside or outside the bioformats source tree.
However, you may not use the cmake source directory (bioformats/cpp)
as the build directory.  This fills the source tree full of
autogenerated files.

If running the unit tests is required, make sure that GTEST_ROOT is
set in the environment, and that this points to the location you
installed gtest in, above.

Run cmake from the temporary build directory:

  mkdir build
  cd build
  GTEST_ROOT=/path/to/gtest cmake /path/to/bioformats/cpp

Run "cmake -LH" to see basic configurable options.  The following basic
basic options are supported:

  test=(ON|OFF)  Enable unit tests

For example, to disable tests, run "cmake -Dtest=OFF".


Building
────────

Run:

  make


Installation
────────────

To install the headers and libraries directly on the system:

  make install

To install in a staging directory:

  make DESTDIR=/path/to/staging/directory install

Testing
───────

Run:

  make test
